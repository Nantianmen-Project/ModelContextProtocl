// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mcp_service.proto

#include "mcp_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mcp {
PROTOBUF_CONSTEXPR RegisterRequest::RegisterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.capabilities_)*/nullptr
  , /*decltype(_impl_.client_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterRequestDefaultTypeInternal() {}
  union {
    RegisterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
PROTOBUF_CONSTEXPR RegisterResponse::RegisterResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.capabilities_)*/nullptr
  , /*decltype(_impl_.server_info_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterResponseDefaultTypeInternal() {}
  union {
    RegisterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
PROTOBUF_CONSTEXPR RegisterInputSchemaRequest::RegisterInputSchemaRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tool_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.schema_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterInputSchemaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterInputSchemaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterInputSchemaRequestDefaultTypeInternal() {}
  union {
    RegisterInputSchemaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterInputSchemaRequestDefaultTypeInternal _RegisterInputSchemaRequest_default_instance_;
PROTOBUF_CONSTEXPR RegisterInputSchemaResponse::RegisterInputSchemaResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.schema_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterInputSchemaResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterInputSchemaResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterInputSchemaResponseDefaultTypeInternal() {}
  union {
    RegisterInputSchemaResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterInputSchemaResponseDefaultTypeInternal _RegisterInputSchemaResponse_default_instance_;
PROTOBUF_CONSTEXPR GetInputSchemaRequest::GetInputSchemaRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tool_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetInputSchemaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInputSchemaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInputSchemaRequestDefaultTypeInternal() {}
  union {
    GetInputSchemaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInputSchemaRequestDefaultTypeInternal _GetInputSchemaRequest_default_instance_;
PROTOBUF_CONSTEXPR RegisterToolRequest::RegisterToolRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tool_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterToolRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterToolRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterToolRequestDefaultTypeInternal() {}
  union {
    RegisterToolRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterToolRequestDefaultTypeInternal _RegisterToolRequest_default_instance_;
PROTOBUF_CONSTEXPR RegisterToolResponse::RegisterToolResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tool_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterToolResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterToolResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterToolResponseDefaultTypeInternal() {}
  union {
    RegisterToolResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterToolResponseDefaultTypeInternal _RegisterToolResponse_default_instance_;
PROTOBUF_CONSTEXPR ListToolsRequest::ListToolsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListToolsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListToolsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListToolsRequestDefaultTypeInternal() {}
  union {
    ListToolsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListToolsRequestDefaultTypeInternal _ListToolsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListToolsResponse::ListToolsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tools_)*/{}
  , /*decltype(_impl_.next_cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListToolsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListToolsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListToolsResponseDefaultTypeInternal() {}
  union {
    ListToolsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListToolsResponseDefaultTypeInternal _ListToolsResponse_default_instance_;
PROTOBUF_CONSTEXPR Prompt_MetadataEntry_DoNotUse::Prompt_MetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Prompt_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Prompt_MetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Prompt_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Prompt_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Prompt_MetadataEntry_DoNotUseDefaultTypeInternal _Prompt_MetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Prompt::Prompt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_preferences_)*/nullptr
  , /*decltype(_impl_.annotations_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PromptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PromptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PromptDefaultTypeInternal() {}
  union {
    Prompt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PromptDefaultTypeInternal _Prompt_default_instance_;
PROTOBUF_CONSTEXPR RegisterPromptRequest::RegisterPromptRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prompt_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterPromptRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterPromptRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterPromptRequestDefaultTypeInternal() {}
  union {
    RegisterPromptRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterPromptRequestDefaultTypeInternal _RegisterPromptRequest_default_instance_;
PROTOBUF_CONSTEXPR RegisterPromptResponse::RegisterPromptResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prompt_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterPromptResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterPromptResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterPromptResponseDefaultTypeInternal() {}
  union {
    RegisterPromptResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterPromptResponseDefaultTypeInternal _RegisterPromptResponse_default_instance_;
PROTOBUF_CONSTEXPR GetPromptRequest::GetPromptRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPromptRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPromptRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPromptRequestDefaultTypeInternal() {}
  union {
    GetPromptRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPromptRequestDefaultTypeInternal _GetPromptRequest_default_instance_;
PROTOBUF_CONSTEXPR ListPromptsRequest::ListPromptsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filter_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListPromptsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListPromptsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListPromptsRequestDefaultTypeInternal() {}
  union {
    ListPromptsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListPromptsRequestDefaultTypeInternal _ListPromptsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListPromptsResponse::ListPromptsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prompts_)*/{}
  , /*decltype(_impl_.next_cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListPromptsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListPromptsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListPromptsResponseDefaultTypeInternal() {}
  union {
    ListPromptsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListPromptsResponseDefaultTypeInternal _ListPromptsResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdatePromptRequest::UpdatePromptRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prompt_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdatePromptRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdatePromptRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdatePromptRequestDefaultTypeInternal() {}
  union {
    UpdatePromptRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdatePromptRequestDefaultTypeInternal _UpdatePromptRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdatePromptResponse::UpdatePromptResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdatePromptResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdatePromptResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdatePromptResponseDefaultTypeInternal() {}
  union {
    UpdatePromptResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdatePromptResponseDefaultTypeInternal _UpdatePromptResponse_default_instance_;
PROTOBUF_CONSTEXPR DeletePromptRequest::DeletePromptRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeletePromptRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeletePromptRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeletePromptRequestDefaultTypeInternal() {}
  union {
    DeletePromptRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeletePromptRequestDefaultTypeInternal _DeletePromptRequest_default_instance_;
PROTOBUF_CONSTEXPR DeletePromptResponse::DeletePromptResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeletePromptResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeletePromptResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeletePromptResponseDefaultTypeInternal() {}
  union {
    DeletePromptResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeletePromptResponseDefaultTypeInternal _DeletePromptResponse_default_instance_;
PROTOBUF_CONSTEXPR Empty::Empty(
    ::_pbi::ConstantInitialized) {}
struct EmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyDefaultTypeInternal _Empty_default_instance_;
}  // namespace mcp
static ::_pb::Metadata file_level_metadata_mcp_5fservice_2eproto[21];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_mcp_5fservice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_mcp_5fservice_2eproto = nullptr;

const uint32_t TableStruct_mcp_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterRequest, _impl_.client_id_),
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterRequest, _impl_.capabilities_),
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterRequest, _impl_.client_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterResponse, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterResponse, _impl_.capabilities_),
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterResponse, _impl_.server_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterInputSchemaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterInputSchemaRequest, _impl_.tool_name_),
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterInputSchemaRequest, _impl_.schema_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterInputSchemaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterInputSchemaResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterInputSchemaResponse, _impl_.schema_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::GetInputSchemaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::GetInputSchemaRequest, _impl_.tool_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterToolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterToolRequest, _impl_.tool_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterToolResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterToolResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterToolResponse, _impl_.tool_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ListToolsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ListToolsRequest, _impl_.params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ListToolsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ListToolsResponse, _impl_.tools_),
  PROTOBUF_FIELD_OFFSET(::mcp::ListToolsResponse, _impl_.next_cursor_),
  PROTOBUF_FIELD_OFFSET(::mcp::Prompt_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcp::Prompt_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::Prompt_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcp::Prompt_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::Prompt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::Prompt, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::mcp::Prompt, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::mcp::Prompt, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::mcp::Prompt, _impl_.model_preferences_),
  PROTOBUF_FIELD_OFFSET(::mcp::Prompt, _impl_.annotations_),
  PROTOBUF_FIELD_OFFSET(::mcp::Prompt, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterPromptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterPromptRequest, _impl_.prompt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterPromptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterPromptResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::mcp::RegisterPromptResponse, _impl_.prompt_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::GetPromptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::GetPromptRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ListPromptsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ListPromptsRequest, _impl_.params_),
  PROTOBUF_FIELD_OFFSET(::mcp::ListPromptsRequest, _impl_.filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ListPromptsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ListPromptsResponse, _impl_.prompts_),
  PROTOBUF_FIELD_OFFSET(::mcp::ListPromptsResponse, _impl_.next_cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::UpdatePromptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::UpdatePromptRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::mcp::UpdatePromptRequest, _impl_.prompt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::UpdatePromptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::UpdatePromptResponse, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::DeletePromptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::DeletePromptRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::DeletePromptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::DeletePromptResponse, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mcp::RegisterRequest)},
  { 9, -1, -1, sizeof(::mcp::RegisterResponse)},
  { 19, -1, -1, sizeof(::mcp::RegisterInputSchemaRequest)},
  { 27, -1, -1, sizeof(::mcp::RegisterInputSchemaResponse)},
  { 35, -1, -1, sizeof(::mcp::GetInputSchemaRequest)},
  { 42, -1, -1, sizeof(::mcp::RegisterToolRequest)},
  { 49, -1, -1, sizeof(::mcp::RegisterToolResponse)},
  { 57, -1, -1, sizeof(::mcp::ListToolsRequest)},
  { 64, -1, -1, sizeof(::mcp::ListToolsResponse)},
  { 72, 80, -1, sizeof(::mcp::Prompt_MetadataEntry_DoNotUse)},
  { 82, -1, -1, sizeof(::mcp::Prompt)},
  { 94, -1, -1, sizeof(::mcp::RegisterPromptRequest)},
  { 101, -1, -1, sizeof(::mcp::RegisterPromptResponse)},
  { 109, -1, -1, sizeof(::mcp::GetPromptRequest)},
  { 116, -1, -1, sizeof(::mcp::ListPromptsRequest)},
  { 124, -1, -1, sizeof(::mcp::ListPromptsResponse)},
  { 132, -1, -1, sizeof(::mcp::UpdatePromptRequest)},
  { 140, -1, -1, sizeof(::mcp::UpdatePromptResponse)},
  { 147, -1, -1, sizeof(::mcp::DeletePromptRequest)},
  { 154, -1, -1, sizeof(::mcp::DeletePromptResponse)},
  { 161, -1, -1, sizeof(::mcp::Empty)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mcp::_RegisterRequest_default_instance_._instance,
  &::mcp::_RegisterResponse_default_instance_._instance,
  &::mcp::_RegisterInputSchemaRequest_default_instance_._instance,
  &::mcp::_RegisterInputSchemaResponse_default_instance_._instance,
  &::mcp::_GetInputSchemaRequest_default_instance_._instance,
  &::mcp::_RegisterToolRequest_default_instance_._instance,
  &::mcp::_RegisterToolResponse_default_instance_._instance,
  &::mcp::_ListToolsRequest_default_instance_._instance,
  &::mcp::_ListToolsResponse_default_instance_._instance,
  &::mcp::_Prompt_MetadataEntry_DoNotUse_default_instance_._instance,
  &::mcp::_Prompt_default_instance_._instance,
  &::mcp::_RegisterPromptRequest_default_instance_._instance,
  &::mcp::_RegisterPromptResponse_default_instance_._instance,
  &::mcp::_GetPromptRequest_default_instance_._instance,
  &::mcp::_ListPromptsRequest_default_instance_._instance,
  &::mcp::_ListPromptsResponse_default_instance_._instance,
  &::mcp::_UpdatePromptRequest_default_instance_._instance,
  &::mcp::_UpdatePromptResponse_default_instance_._instance,
  &::mcp::_DeletePromptRequest_default_instance_._instance,
  &::mcp::_DeletePromptResponse_default_instance_._instance,
  &::mcp::_Empty_default_instance_._instance,
};

const char descriptor_table_protodef_mcp_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021mcp_service.proto\022\003mcp\032\tmcp.proto\"}\n\017R"
  "egisterRequest\022\021\n\tclient_id\030\001 \001(\t\022-\n\014cap"
  "abilities\030\002 \001(\0132\027.mcp.ClientCapabilities"
  "\022(\n\013client_info\030\003 \001(\0132\023.mcp.Implementati"
  "on\"\220\001\n\020RegisterResponse\022\017\n\007success\030\001 \001(\010"
  "\022\022\n\nsession_id\030\002 \001(\t\022-\n\014capabilities\030\003 \001"
  "(\0132\027.mcp.ServerCapabilities\022(\n\013server_in"
  "fo\030\004 \001(\0132\023.mcp.Implementation\"Q\n\032Registe"
  "rInputSchemaRequest\022\021\n\ttool_name\030\001 \001(\t\022 "
  "\n\006schema\030\002 \001(\0132\020.mcp.InputSchema\"A\n\033Regi"
  "sterInputSchemaResponse\022\017\n\007success\030\001 \001(\010"
  "\022\021\n\tschema_id\030\002 \001(\t\"*\n\025GetInputSchemaReq"
  "uest\022\021\n\ttool_name\030\001 \001(\t\".\n\023RegisterToolR"
  "equest\022\027\n\004tool\030\001 \001(\0132\t.mcp.Tool\"8\n\024Regis"
  "terToolResponse\022\017\n\007success\030\001 \001(\010\022\017\n\007tool"
  "_id\030\002 \001(\t\"8\n\020ListToolsRequest\022$\n\006params\030"
  "\001 \001(\0132\024.mcp.PaginatedParams\"B\n\021ListTools"
  "Response\022\030\n\005tools\030\001 \003(\0132\t.mcp.Tool\022\023\n\013ne"
  "xt_cursor\030\002 \001(\t\"\363\001\n\006Prompt\022\014\n\004name\030\001 \001(\t"
  "\022\017\n\007content\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\0220"
  "\n\021model_preferences\030\004 \001(\0132\025.mcp.ModelPre"
  "ferences\022%\n\013annotations\030\005 \001(\0132\020.mcp.Anno"
  "tations\022+\n\010metadata\030\006 \003(\0132\031.mcp.Prompt.M"
  "etadataEntry\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"4\n\025RegisterPromptR"
  "equest\022\033\n\006prompt\030\001 \001(\0132\013.mcp.Prompt\"<\n\026R"
  "egisterPromptResponse\022\017\n\007success\030\001 \001(\010\022\021"
  "\n\tprompt_id\030\002 \001(\t\" \n\020GetPromptRequest\022\014\n"
  "\004name\030\001 \001(\t\"J\n\022ListPromptsRequest\022$\n\006par"
  "ams\030\001 \001(\0132\024.mcp.PaginatedParams\022\016\n\006filte"
  "r\030\002 \001(\t\"H\n\023ListPromptsResponse\022\034\n\007prompt"
  "s\030\001 \003(\0132\013.mcp.Prompt\022\023\n\013next_cursor\030\002 \001("
  "\t\"@\n\023UpdatePromptRequest\022\014\n\004name\030\001 \001(\t\022\033"
  "\n\006prompt\030\002 \001(\0132\013.mcp.Prompt\"\'\n\024UpdatePro"
  "mptResponse\022\017\n\007success\030\001 \001(\010\"#\n\023DeletePr"
  "omptRequest\022\014\n\004name\030\001 \001(\t\"\'\n\024DeletePromp"
  "tResponse\022\017\n\007success\030\001 \001(\010\"\007\n\005Empty2\261\010\n\n"
  "MCPService\0227\n\010Register\022\024.mcp.RegisterReq"
  "uest\032\025.mcp.RegisterResponse\022;\n\nInitializ"
  "e\022\026.mcp.InitializeRequest\032\025.mcp.Initiali"
  "zeResult\022:\n\rHandleRequest\022\023.mcp.JSONRPCR"
  "equest\032\024.mcp.JSONRPCResponse\022:\n\022HandleNo"
  "tification\022\030.mcp.JSONRPCNotification\032\n.m"
  "cp.Empty\022I\n\022HandleBatchRequest\022\030.mcp.JSO"
  "NRPCBatchRequest\032\031.mcp.JSONRPCBatchRespo"
  "nse\022X\n\023RegisterInputSchema\022\037.mcp.Registe"
  "rInputSchemaRequest\032 .mcp.RegisterInputS"
  "chemaResponse\022>\n\016GetInputSchema\022\032.mcp.Ge"
  "tInputSchemaRequest\032\020.mcp.InputSchema\022D\n"
  "\rListResources\022\031.mcp.ListResourcesReques"
  "t\032\030.mcp.ListResourcesResult\022A\n\014ReadResou"
  "rce\022\030.mcp.ReadResourceRequest\032\027.mcp.Read"
  "ResourceResult\022C\n\014RegisterTool\022\030.mcp.Reg"
  "isterToolRequest\032\031.mcp.RegisterToolRespo"
  "nse\022:\n\tListTools\022\025.mcp.ListToolsRequest\032"
  "\026.mcp.ListToolsResponse\022I\n\016RegisterPromp"
  "t\022\032.mcp.RegisterPromptRequest\032\033.mcp.Regi"
  "sterPromptResponse\022/\n\tGetPrompt\022\025.mcp.Ge"
  "tPromptRequest\032\013.mcp.Prompt\022@\n\013ListPromp"
  "ts\022\027.mcp.ListPromptsRequest\032\030.mcp.ListPr"
  "omptsResponse\022C\n\014UpdatePrompt\022\030.mcp.Upda"
  "tePromptRequest\032\031.mcp.UpdatePromptRespon"
  "se\022C\n\014DeletePrompt\022\030.mcp.DeletePromptReq"
  "uest\032\031.mcp.DeletePromptResponseb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_mcp_5fservice_2eproto_deps[1] = {
  &::descriptor_table_mcp_2eproto,
};
static ::_pbi::once_flag descriptor_table_mcp_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_mcp_5fservice_2eproto = {
    false, false, 2559, descriptor_table_protodef_mcp_5fservice_2eproto,
    "mcp_service.proto",
    &descriptor_table_mcp_5fservice_2eproto_once, descriptor_table_mcp_5fservice_2eproto_deps, 1, 21,
    schemas, file_default_instances, TableStruct_mcp_5fservice_2eproto::offsets,
    file_level_metadata_mcp_5fservice_2eproto, file_level_enum_descriptors_mcp_5fservice_2eproto,
    file_level_service_descriptors_mcp_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_mcp_5fservice_2eproto_getter() {
  return &descriptor_table_mcp_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_mcp_5fservice_2eproto(&descriptor_table_mcp_5fservice_2eproto);
namespace mcp {

// ===================================================================

class RegisterRequest::_Internal {
 public:
  static const ::mcp::ClientCapabilities& capabilities(const RegisterRequest* msg);
  static const ::mcp::Implementation& client_info(const RegisterRequest* msg);
};

const ::mcp::ClientCapabilities&
RegisterRequest::_Internal::capabilities(const RegisterRequest* msg) {
  return *msg->_impl_.capabilities_;
}
const ::mcp::Implementation&
RegisterRequest::_Internal::client_info(const RegisterRequest* msg) {
  return *msg->_impl_.client_info_;
}
void RegisterRequest::clear_capabilities() {
  if (GetArenaForAllocation() == nullptr && _impl_.capabilities_ != nullptr) {
    delete _impl_.capabilities_;
  }
  _impl_.capabilities_ = nullptr;
}
void RegisterRequest::clear_client_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.client_info_ != nullptr) {
    delete _impl_.client_info_;
  }
  _impl_.client_info_ = nullptr;
}
RegisterRequest::RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.RegisterRequest)
}
RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_id_){}
    , decltype(_impl_.capabilities_){nullptr}
    , decltype(_impl_.client_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_capabilities()) {
    _this->_impl_.capabilities_ = new ::mcp::ClientCapabilities(*from._impl_.capabilities_);
  }
  if (from._internal_has_client_info()) {
    _this->_impl_.client_info_ = new ::mcp::Implementation(*from._impl_.client_info_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.RegisterRequest)
}

inline void RegisterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_id_){}
    , decltype(_impl_.capabilities_){nullptr}
    , decltype(_impl_.client_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:mcp.RegisterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.capabilities_;
  if (this != internal_default_instance()) delete _impl_.client_info_;
}

void RegisterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.RegisterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.capabilities_ != nullptr) {
    delete _impl_.capabilities_;
  }
  _impl_.capabilities_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.client_info_ != nullptr) {
    delete _impl_.client_info_;
  }
  _impl_.client_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.RegisterRequest.client_id"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.ClientCapabilities capabilities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_capabilities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mcp.Implementation client_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.RegisterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (!this->_internal_client_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.RegisterRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // .mcp.ClientCapabilities capabilities = 2;
  if (this->_internal_has_capabilities()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::capabilities(this),
        _Internal::capabilities(this).GetCachedSize(), target, stream);
  }

  // .mcp.Implementation client_info = 3;
  if (this->_internal_has_client_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::client_info(this),
        _Internal::client_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.RegisterRequest)
  return target;
}

size_t RegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.RegisterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // .mcp.ClientCapabilities capabilities = 2;
  if (this->_internal_has_capabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.capabilities_);
  }

  // .mcp.Implementation client_info = 3;
  if (this->_internal_has_client_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.client_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterRequest::GetClassData() const { return &_class_data_; }


void RegisterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterRequest*>(&to_msg);
  auto& from = static_cast<const RegisterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_has_capabilities()) {
    _this->_internal_mutable_capabilities()->::mcp::ClientCapabilities::MergeFrom(
        from._internal_capabilities());
  }
  if (from._internal_has_client_info()) {
    _this->_internal_mutable_client_info()->::mcp::Implementation::MergeFrom(
        from._internal_client_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {
  return true;
}

void RegisterRequest::InternalSwap(RegisterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_id_, lhs_arena,
      &other->_impl_.client_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.client_info_)
      + sizeof(RegisterRequest::_impl_.client_info_)
      - PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.capabilities_)>(
          reinterpret_cast<char*>(&_impl_.capabilities_),
          reinterpret_cast<char*>(&other->_impl_.capabilities_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[0]);
}

// ===================================================================

class RegisterResponse::_Internal {
 public:
  static const ::mcp::ServerCapabilities& capabilities(const RegisterResponse* msg);
  static const ::mcp::Implementation& server_info(const RegisterResponse* msg);
};

const ::mcp::ServerCapabilities&
RegisterResponse::_Internal::capabilities(const RegisterResponse* msg) {
  return *msg->_impl_.capabilities_;
}
const ::mcp::Implementation&
RegisterResponse::_Internal::server_info(const RegisterResponse* msg) {
  return *msg->_impl_.server_info_;
}
void RegisterResponse::clear_capabilities() {
  if (GetArenaForAllocation() == nullptr && _impl_.capabilities_ != nullptr) {
    delete _impl_.capabilities_;
  }
  _impl_.capabilities_ = nullptr;
}
void RegisterResponse::clear_server_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.server_info_ != nullptr) {
    delete _impl_.server_info_;
  }
  _impl_.server_info_ = nullptr;
}
RegisterResponse::RegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.RegisterResponse)
}
RegisterResponse::RegisterResponse(const RegisterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){}
    , decltype(_impl_.capabilities_){nullptr}
    , decltype(_impl_.server_info_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_capabilities()) {
    _this->_impl_.capabilities_ = new ::mcp::ServerCapabilities(*from._impl_.capabilities_);
  }
  if (from._internal_has_server_info()) {
    _this->_impl_.server_info_ = new ::mcp::Implementation(*from._impl_.server_info_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:mcp.RegisterResponse)
}

inline void RegisterResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){}
    , decltype(_impl_.capabilities_){nullptr}
    , decltype(_impl_.server_info_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterResponse::~RegisterResponse() {
  // @@protoc_insertion_point(destructor:mcp.RegisterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.capabilities_;
  if (this != internal_default_instance()) delete _impl_.server_info_;
}

void RegisterResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.RegisterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.capabilities_ != nullptr) {
    delete _impl_.capabilities_;
  }
  _impl_.capabilities_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.server_info_ != nullptr) {
    delete _impl_.server_info_;
  }
  _impl_.server_info_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.RegisterResponse.session_id"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.ServerCapabilities capabilities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_capabilities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mcp.Implementation server_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.RegisterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.RegisterResponse.session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_id(), target);
  }

  // .mcp.ServerCapabilities capabilities = 3;
  if (this->_internal_has_capabilities()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::capabilities(this),
        _Internal::capabilities(this).GetCachedSize(), target, stream);
  }

  // .mcp.Implementation server_info = 4;
  if (this->_internal_has_server_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::server_info(this),
        _Internal::server_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.RegisterResponse)
  return target;
}

size_t RegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.RegisterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .mcp.ServerCapabilities capabilities = 3;
  if (this->_internal_has_capabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.capabilities_);
  }

  // .mcp.Implementation server_info = 4;
  if (this->_internal_has_server_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.server_info_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterResponse::GetClassData() const { return &_class_data_; }


void RegisterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterResponse*>(&to_msg);
  auto& from = static_cast<const RegisterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.RegisterResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_has_capabilities()) {
    _this->_internal_mutable_capabilities()->::mcp::ServerCapabilities::MergeFrom(
        from._internal_capabilities());
  }
  if (from._internal_has_server_info()) {
    _this->_internal_mutable_server_info()->::mcp::Implementation::MergeFrom(
        from._internal_server_info());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponse::IsInitialized() const {
  return true;
}

void RegisterResponse::InternalSwap(RegisterResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.success_)
      + sizeof(RegisterResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.capabilities_)>(
          reinterpret_cast<char*>(&_impl_.capabilities_),
          reinterpret_cast<char*>(&other->_impl_.capabilities_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[1]);
}

// ===================================================================

class RegisterInputSchemaRequest::_Internal {
 public:
  static const ::mcp::InputSchema& schema(const RegisterInputSchemaRequest* msg);
};

const ::mcp::InputSchema&
RegisterInputSchemaRequest::_Internal::schema(const RegisterInputSchemaRequest* msg) {
  return *msg->_impl_.schema_;
}
void RegisterInputSchemaRequest::clear_schema() {
  if (GetArenaForAllocation() == nullptr && _impl_.schema_ != nullptr) {
    delete _impl_.schema_;
  }
  _impl_.schema_ = nullptr;
}
RegisterInputSchemaRequest::RegisterInputSchemaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.RegisterInputSchemaRequest)
}
RegisterInputSchemaRequest::RegisterInputSchemaRequest(const RegisterInputSchemaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterInputSchemaRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tool_name_){}
    , decltype(_impl_.schema_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tool_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tool_name().empty()) {
    _this->_impl_.tool_name_.Set(from._internal_tool_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_schema()) {
    _this->_impl_.schema_ = new ::mcp::InputSchema(*from._impl_.schema_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.RegisterInputSchemaRequest)
}

inline void RegisterInputSchemaRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tool_name_){}
    , decltype(_impl_.schema_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tool_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterInputSchemaRequest::~RegisterInputSchemaRequest() {
  // @@protoc_insertion_point(destructor:mcp.RegisterInputSchemaRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterInputSchemaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tool_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.schema_;
}

void RegisterInputSchemaRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterInputSchemaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.RegisterInputSchemaRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tool_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.schema_ != nullptr) {
    delete _impl_.schema_;
  }
  _impl_.schema_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterInputSchemaRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tool_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tool_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.RegisterInputSchemaRequest.tool_name"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.InputSchema schema = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterInputSchemaRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.RegisterInputSchemaRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tool_name = 1;
  if (!this->_internal_tool_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tool_name().data(), static_cast<int>(this->_internal_tool_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.RegisterInputSchemaRequest.tool_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tool_name(), target);
  }

  // .mcp.InputSchema schema = 2;
  if (this->_internal_has_schema()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::schema(this),
        _Internal::schema(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.RegisterInputSchemaRequest)
  return target;
}

size_t RegisterInputSchemaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.RegisterInputSchemaRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tool_name = 1;
  if (!this->_internal_tool_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tool_name());
  }

  // .mcp.InputSchema schema = 2;
  if (this->_internal_has_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.schema_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterInputSchemaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterInputSchemaRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterInputSchemaRequest::GetClassData() const { return &_class_data_; }


void RegisterInputSchemaRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterInputSchemaRequest*>(&to_msg);
  auto& from = static_cast<const RegisterInputSchemaRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.RegisterInputSchemaRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tool_name().empty()) {
    _this->_internal_set_tool_name(from._internal_tool_name());
  }
  if (from._internal_has_schema()) {
    _this->_internal_mutable_schema()->::mcp::InputSchema::MergeFrom(
        from._internal_schema());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterInputSchemaRequest::CopyFrom(const RegisterInputSchemaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.RegisterInputSchemaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterInputSchemaRequest::IsInitialized() const {
  return true;
}

void RegisterInputSchemaRequest::InternalSwap(RegisterInputSchemaRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tool_name_, lhs_arena,
      &other->_impl_.tool_name_, rhs_arena
  );
  swap(_impl_.schema_, other->_impl_.schema_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterInputSchemaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[2]);
}

// ===================================================================

class RegisterInputSchemaResponse::_Internal {
 public:
};

RegisterInputSchemaResponse::RegisterInputSchemaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.RegisterInputSchemaResponse)
}
RegisterInputSchemaResponse::RegisterInputSchemaResponse(const RegisterInputSchemaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterInputSchemaResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_id_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.schema_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema_id().empty()) {
    _this->_impl_.schema_id_.Set(from._internal_schema_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:mcp.RegisterInputSchemaResponse)
}

inline void RegisterInputSchemaResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_id_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.schema_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterInputSchemaResponse::~RegisterInputSchemaResponse() {
  // @@protoc_insertion_point(destructor:mcp.RegisterInputSchemaResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterInputSchemaResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.schema_id_.Destroy();
}

void RegisterInputSchemaResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterInputSchemaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.RegisterInputSchemaResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.schema_id_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterInputSchemaResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string schema_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_schema_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.RegisterInputSchemaResponse.schema_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterInputSchemaResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.RegisterInputSchemaResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string schema_id = 2;
  if (!this->_internal_schema_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_schema_id().data(), static_cast<int>(this->_internal_schema_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.RegisterInputSchemaResponse.schema_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_schema_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.RegisterInputSchemaResponse)
  return target;
}

size_t RegisterInputSchemaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.RegisterInputSchemaResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string schema_id = 2;
  if (!this->_internal_schema_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_schema_id());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterInputSchemaResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterInputSchemaResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterInputSchemaResponse::GetClassData() const { return &_class_data_; }


void RegisterInputSchemaResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterInputSchemaResponse*>(&to_msg);
  auto& from = static_cast<const RegisterInputSchemaResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.RegisterInputSchemaResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_schema_id().empty()) {
    _this->_internal_set_schema_id(from._internal_schema_id());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterInputSchemaResponse::CopyFrom(const RegisterInputSchemaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.RegisterInputSchemaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterInputSchemaResponse::IsInitialized() const {
  return true;
}

void RegisterInputSchemaResponse::InternalSwap(RegisterInputSchemaResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.schema_id_, lhs_arena,
      &other->_impl_.schema_id_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterInputSchemaResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[3]);
}

// ===================================================================

class GetInputSchemaRequest::_Internal {
 public:
};

GetInputSchemaRequest::GetInputSchemaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.GetInputSchemaRequest)
}
GetInputSchemaRequest::GetInputSchemaRequest(const GetInputSchemaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetInputSchemaRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tool_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tool_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tool_name().empty()) {
    _this->_impl_.tool_name_.Set(from._internal_tool_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcp.GetInputSchemaRequest)
}

inline void GetInputSchemaRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tool_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tool_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetInputSchemaRequest::~GetInputSchemaRequest() {
  // @@protoc_insertion_point(destructor:mcp.GetInputSchemaRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInputSchemaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tool_name_.Destroy();
}

void GetInputSchemaRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetInputSchemaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.GetInputSchemaRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tool_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInputSchemaRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tool_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tool_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.GetInputSchemaRequest.tool_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInputSchemaRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.GetInputSchemaRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tool_name = 1;
  if (!this->_internal_tool_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tool_name().data(), static_cast<int>(this->_internal_tool_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.GetInputSchemaRequest.tool_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tool_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.GetInputSchemaRequest)
  return target;
}

size_t GetInputSchemaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.GetInputSchemaRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tool_name = 1;
  if (!this->_internal_tool_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tool_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInputSchemaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetInputSchemaRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInputSchemaRequest::GetClassData() const { return &_class_data_; }


void GetInputSchemaRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetInputSchemaRequest*>(&to_msg);
  auto& from = static_cast<const GetInputSchemaRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.GetInputSchemaRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tool_name().empty()) {
    _this->_internal_set_tool_name(from._internal_tool_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInputSchemaRequest::CopyFrom(const GetInputSchemaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.GetInputSchemaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInputSchemaRequest::IsInitialized() const {
  return true;
}

void GetInputSchemaRequest::InternalSwap(GetInputSchemaRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tool_name_, lhs_arena,
      &other->_impl_.tool_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInputSchemaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[4]);
}

// ===================================================================

class RegisterToolRequest::_Internal {
 public:
  static const ::mcp::Tool& tool(const RegisterToolRequest* msg);
};

const ::mcp::Tool&
RegisterToolRequest::_Internal::tool(const RegisterToolRequest* msg) {
  return *msg->_impl_.tool_;
}
void RegisterToolRequest::clear_tool() {
  if (GetArenaForAllocation() == nullptr && _impl_.tool_ != nullptr) {
    delete _impl_.tool_;
  }
  _impl_.tool_ = nullptr;
}
RegisterToolRequest::RegisterToolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.RegisterToolRequest)
}
RegisterToolRequest::RegisterToolRequest(const RegisterToolRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterToolRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tool_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tool()) {
    _this->_impl_.tool_ = new ::mcp::Tool(*from._impl_.tool_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.RegisterToolRequest)
}

inline void RegisterToolRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tool_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterToolRequest::~RegisterToolRequest() {
  // @@protoc_insertion_point(destructor:mcp.RegisterToolRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterToolRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tool_;
}

void RegisterToolRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterToolRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.RegisterToolRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.tool_ != nullptr) {
    delete _impl_.tool_;
  }
  _impl_.tool_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterToolRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcp.Tool tool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tool(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterToolRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.RegisterToolRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcp.Tool tool = 1;
  if (this->_internal_has_tool()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tool(this),
        _Internal::tool(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.RegisterToolRequest)
  return target;
}

size_t RegisterToolRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.RegisterToolRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mcp.Tool tool = 1;
  if (this->_internal_has_tool()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tool_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterToolRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterToolRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterToolRequest::GetClassData() const { return &_class_data_; }


void RegisterToolRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterToolRequest*>(&to_msg);
  auto& from = static_cast<const RegisterToolRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.RegisterToolRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tool()) {
    _this->_internal_mutable_tool()->::mcp::Tool::MergeFrom(
        from._internal_tool());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterToolRequest::CopyFrom(const RegisterToolRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.RegisterToolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterToolRequest::IsInitialized() const {
  return true;
}

void RegisterToolRequest::InternalSwap(RegisterToolRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.tool_, other->_impl_.tool_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterToolRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[5]);
}

// ===================================================================

class RegisterToolResponse::_Internal {
 public:
};

RegisterToolResponse::RegisterToolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.RegisterToolResponse)
}
RegisterToolResponse::RegisterToolResponse(const RegisterToolResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterToolResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tool_id_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tool_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tool_id().empty()) {
    _this->_impl_.tool_id_.Set(from._internal_tool_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:mcp.RegisterToolResponse)
}

inline void RegisterToolResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tool_id_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tool_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterToolResponse::~RegisterToolResponse() {
  // @@protoc_insertion_point(destructor:mcp.RegisterToolResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterToolResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tool_id_.Destroy();
}

void RegisterToolResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterToolResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.RegisterToolResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tool_id_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterToolResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tool_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tool_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.RegisterToolResponse.tool_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterToolResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.RegisterToolResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string tool_id = 2;
  if (!this->_internal_tool_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tool_id().data(), static_cast<int>(this->_internal_tool_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.RegisterToolResponse.tool_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tool_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.RegisterToolResponse)
  return target;
}

size_t RegisterToolResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.RegisterToolResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tool_id = 2;
  if (!this->_internal_tool_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tool_id());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterToolResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterToolResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterToolResponse::GetClassData() const { return &_class_data_; }


void RegisterToolResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterToolResponse*>(&to_msg);
  auto& from = static_cast<const RegisterToolResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.RegisterToolResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tool_id().empty()) {
    _this->_internal_set_tool_id(from._internal_tool_id());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterToolResponse::CopyFrom(const RegisterToolResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.RegisterToolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterToolResponse::IsInitialized() const {
  return true;
}

void RegisterToolResponse::InternalSwap(RegisterToolResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tool_id_, lhs_arena,
      &other->_impl_.tool_id_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterToolResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[6]);
}

// ===================================================================

class ListToolsRequest::_Internal {
 public:
  static const ::mcp::PaginatedParams& params(const ListToolsRequest* msg);
};

const ::mcp::PaginatedParams&
ListToolsRequest::_Internal::params(const ListToolsRequest* msg) {
  return *msg->_impl_.params_;
}
void ListToolsRequest::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
ListToolsRequest::ListToolsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.ListToolsRequest)
}
ListToolsRequest::ListToolsRequest(const ListToolsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListToolsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_params()) {
    _this->_impl_.params_ = new ::mcp::PaginatedParams(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.ListToolsRequest)
}

inline void ListToolsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListToolsRequest::~ListToolsRequest() {
  // @@protoc_insertion_point(destructor:mcp.ListToolsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListToolsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.params_;
}

void ListToolsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListToolsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ListToolsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListToolsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcp.PaginatedParams params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListToolsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ListToolsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcp.PaginatedParams params = 1;
  if (this->_internal_has_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ListToolsRequest)
  return target;
}

size_t ListToolsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ListToolsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mcp.PaginatedParams params = 1;
  if (this->_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListToolsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListToolsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListToolsRequest::GetClassData() const { return &_class_data_; }


void ListToolsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListToolsRequest*>(&to_msg);
  auto& from = static_cast<const ListToolsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ListToolsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_params()) {
    _this->_internal_mutable_params()->::mcp::PaginatedParams::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListToolsRequest::CopyFrom(const ListToolsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ListToolsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListToolsRequest::IsInitialized() const {
  return true;
}

void ListToolsRequest::InternalSwap(ListToolsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListToolsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[7]);
}

// ===================================================================

class ListToolsResponse::_Internal {
 public:
};

void ListToolsResponse::clear_tools() {
  _impl_.tools_.Clear();
}
ListToolsResponse::ListToolsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.ListToolsResponse)
}
ListToolsResponse::ListToolsResponse(const ListToolsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListToolsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tools_){from._impl_.tools_}
    , decltype(_impl_.next_cursor_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_cursor().empty()) {
    _this->_impl_.next_cursor_.Set(from._internal_next_cursor(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcp.ListToolsResponse)
}

inline void ListToolsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tools_){arena}
    , decltype(_impl_.next_cursor_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListToolsResponse::~ListToolsResponse() {
  // @@protoc_insertion_point(destructor:mcp.ListToolsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListToolsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tools_.~RepeatedPtrField();
  _impl_.next_cursor_.Destroy();
}

void ListToolsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListToolsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ListToolsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tools_.Clear();
  _impl_.next_cursor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListToolsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mcp.Tool tools = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tools(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.ListToolsResponse.next_cursor"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListToolsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ListToolsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mcp.Tool tools = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tools_size()); i < n; i++) {
    const auto& repfield = this->_internal_tools(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string next_cursor = 2;
  if (!this->_internal_next_cursor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_cursor().data(), static_cast<int>(this->_internal_next_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.ListToolsResponse.next_cursor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ListToolsResponse)
  return target;
}

size_t ListToolsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ListToolsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcp.Tool tools = 1;
  total_size += 1UL * this->_internal_tools_size();
  for (const auto& msg : this->_impl_.tools_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_cursor = 2;
  if (!this->_internal_next_cursor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_cursor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListToolsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListToolsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListToolsResponse::GetClassData() const { return &_class_data_; }


void ListToolsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListToolsResponse*>(&to_msg);
  auto& from = static_cast<const ListToolsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ListToolsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tools_.MergeFrom(from._impl_.tools_);
  if (!from._internal_next_cursor().empty()) {
    _this->_internal_set_next_cursor(from._internal_next_cursor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListToolsResponse::CopyFrom(const ListToolsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ListToolsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListToolsResponse::IsInitialized() const {
  return true;
}

void ListToolsResponse::InternalSwap(ListToolsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tools_.InternalSwap(&other->_impl_.tools_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_cursor_, lhs_arena,
      &other->_impl_.next_cursor_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListToolsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[8]);
}

// ===================================================================

Prompt_MetadataEntry_DoNotUse::Prompt_MetadataEntry_DoNotUse() {}
Prompt_MetadataEntry_DoNotUse::Prompt_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Prompt_MetadataEntry_DoNotUse::MergeFrom(const Prompt_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Prompt_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[9]);
}

// ===================================================================

class Prompt::_Internal {
 public:
  static const ::mcp::ModelPreferences& model_preferences(const Prompt* msg);
  static const ::mcp::Annotations& annotations(const Prompt* msg);
};

const ::mcp::ModelPreferences&
Prompt::_Internal::model_preferences(const Prompt* msg) {
  return *msg->_impl_.model_preferences_;
}
const ::mcp::Annotations&
Prompt::_Internal::annotations(const Prompt* msg) {
  return *msg->_impl_.annotations_;
}
void Prompt::clear_model_preferences() {
  if (GetArenaForAllocation() == nullptr && _impl_.model_preferences_ != nullptr) {
    delete _impl_.model_preferences_;
  }
  _impl_.model_preferences_ = nullptr;
}
void Prompt::clear_annotations() {
  if (GetArenaForAllocation() == nullptr && _impl_.annotations_ != nullptr) {
    delete _impl_.annotations_;
  }
  _impl_.annotations_ = nullptr;
}
Prompt::Prompt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Prompt::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:mcp.Prompt)
}
Prompt::Prompt(const Prompt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Prompt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metadata_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.model_preferences_){nullptr}
    , decltype(_impl_.annotations_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_model_preferences()) {
    _this->_impl_.model_preferences_ = new ::mcp::ModelPreferences(*from._impl_.model_preferences_);
  }
  if (from._internal_has_annotations()) {
    _this->_impl_.annotations_ = new ::mcp::Annotations(*from._impl_.annotations_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.Prompt)
}

inline void Prompt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metadata_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.model_preferences_){nullptr}
    , decltype(_impl_.annotations_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Prompt::~Prompt() {
  // @@protoc_insertion_point(destructor:mcp.Prompt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Prompt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.Destruct();
  _impl_.metadata_.~MapField();
  _impl_.name_.Destroy();
  _impl_.content_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.model_preferences_;
  if (this != internal_default_instance()) delete _impl_.annotations_;
}

void Prompt::ArenaDtor(void* object) {
  Prompt* _this = reinterpret_cast< Prompt* >(object);
  _this->_impl_.metadata_.Destruct();
}
void Prompt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Prompt::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.Prompt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.model_preferences_ != nullptr) {
    delete _impl_.model_preferences_;
  }
  _impl_.model_preferences_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.annotations_ != nullptr) {
    delete _impl_.annotations_;
  }
  _impl_.annotations_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Prompt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.Prompt.name"));
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.Prompt.content"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.Prompt.description"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.ModelPreferences model_preferences = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_preferences(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mcp.Annotations annotations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Prompt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.Prompt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.Prompt.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.Prompt.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.Prompt.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // .mcp.ModelPreferences model_preferences = 4;
  if (this->_internal_has_model_preferences()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::model_preferences(this),
        _Internal::model_preferences(this).GetCachedSize(), target, stream);
  }

  // .mcp.Annotations annotations = 5;
  if (this->_internal_has_annotations()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::annotations(this),
        _Internal::annotations(this).GetCachedSize(), target, stream);
  }

  // map<string, bytes> metadata = 6;
  if (!this->_internal_metadata().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Prompt_MetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_metadata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "mcp.Prompt.MetadataEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.Prompt)
  return target;
}

size_t Prompt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.Prompt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> metadata = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += Prompt_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .mcp.ModelPreferences model_preferences = 4;
  if (this->_internal_has_model_preferences()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_preferences_);
  }

  // .mcp.Annotations annotations = 5;
  if (this->_internal_has_annotations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.annotations_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Prompt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Prompt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Prompt::GetClassData() const { return &_class_data_; }


void Prompt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Prompt*>(&to_msg);
  auto& from = static_cast<const Prompt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.Prompt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_model_preferences()) {
    _this->_internal_mutable_model_preferences()->::mcp::ModelPreferences::MergeFrom(
        from._internal_model_preferences());
  }
  if (from._internal_has_annotations()) {
    _this->_internal_mutable_annotations()->::mcp::Annotations::MergeFrom(
        from._internal_annotations());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Prompt::CopyFrom(const Prompt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.Prompt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prompt::IsInitialized() const {
  return true;
}

void Prompt::InternalSwap(Prompt* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Prompt, _impl_.annotations_)
      + sizeof(Prompt::_impl_.annotations_)
      - PROTOBUF_FIELD_OFFSET(Prompt, _impl_.model_preferences_)>(
          reinterpret_cast<char*>(&_impl_.model_preferences_),
          reinterpret_cast<char*>(&other->_impl_.model_preferences_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Prompt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[10]);
}

// ===================================================================

class RegisterPromptRequest::_Internal {
 public:
  static const ::mcp::Prompt& prompt(const RegisterPromptRequest* msg);
};

const ::mcp::Prompt&
RegisterPromptRequest::_Internal::prompt(const RegisterPromptRequest* msg) {
  return *msg->_impl_.prompt_;
}
RegisterPromptRequest::RegisterPromptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.RegisterPromptRequest)
}
RegisterPromptRequest::RegisterPromptRequest(const RegisterPromptRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterPromptRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prompt_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prompt()) {
    _this->_impl_.prompt_ = new ::mcp::Prompt(*from._impl_.prompt_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.RegisterPromptRequest)
}

inline void RegisterPromptRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prompt_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterPromptRequest::~RegisterPromptRequest() {
  // @@protoc_insertion_point(destructor:mcp.RegisterPromptRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterPromptRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.prompt_;
}

void RegisterPromptRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterPromptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.RegisterPromptRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.prompt_ != nullptr) {
    delete _impl_.prompt_;
  }
  _impl_.prompt_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterPromptRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcp.Prompt prompt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prompt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterPromptRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.RegisterPromptRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcp.Prompt prompt = 1;
  if (this->_internal_has_prompt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::prompt(this),
        _Internal::prompt(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.RegisterPromptRequest)
  return target;
}

size_t RegisterPromptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.RegisterPromptRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mcp.Prompt prompt = 1;
  if (this->_internal_has_prompt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prompt_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterPromptRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterPromptRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterPromptRequest::GetClassData() const { return &_class_data_; }


void RegisterPromptRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterPromptRequest*>(&to_msg);
  auto& from = static_cast<const RegisterPromptRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.RegisterPromptRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_prompt()) {
    _this->_internal_mutable_prompt()->::mcp::Prompt::MergeFrom(
        from._internal_prompt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterPromptRequest::CopyFrom(const RegisterPromptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.RegisterPromptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterPromptRequest::IsInitialized() const {
  return true;
}

void RegisterPromptRequest::InternalSwap(RegisterPromptRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.prompt_, other->_impl_.prompt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterPromptRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[11]);
}

// ===================================================================

class RegisterPromptResponse::_Internal {
 public:
};

RegisterPromptResponse::RegisterPromptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.RegisterPromptResponse)
}
RegisterPromptResponse::RegisterPromptResponse(const RegisterPromptResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterPromptResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prompt_id_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.prompt_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prompt_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prompt_id().empty()) {
    _this->_impl_.prompt_id_.Set(from._internal_prompt_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:mcp.RegisterPromptResponse)
}

inline void RegisterPromptResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prompt_id_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.prompt_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prompt_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterPromptResponse::~RegisterPromptResponse() {
  // @@protoc_insertion_point(destructor:mcp.RegisterPromptResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterPromptResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prompt_id_.Destroy();
}

void RegisterPromptResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterPromptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.RegisterPromptResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prompt_id_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterPromptResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string prompt_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prompt_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.RegisterPromptResponse.prompt_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterPromptResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.RegisterPromptResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string prompt_id = 2;
  if (!this->_internal_prompt_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prompt_id().data(), static_cast<int>(this->_internal_prompt_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.RegisterPromptResponse.prompt_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prompt_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.RegisterPromptResponse)
  return target;
}

size_t RegisterPromptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.RegisterPromptResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prompt_id = 2;
  if (!this->_internal_prompt_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prompt_id());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterPromptResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterPromptResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterPromptResponse::GetClassData() const { return &_class_data_; }


void RegisterPromptResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterPromptResponse*>(&to_msg);
  auto& from = static_cast<const RegisterPromptResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.RegisterPromptResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_prompt_id().empty()) {
    _this->_internal_set_prompt_id(from._internal_prompt_id());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterPromptResponse::CopyFrom(const RegisterPromptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.RegisterPromptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterPromptResponse::IsInitialized() const {
  return true;
}

void RegisterPromptResponse::InternalSwap(RegisterPromptResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prompt_id_, lhs_arena,
      &other->_impl_.prompt_id_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterPromptResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[12]);
}

// ===================================================================

class GetPromptRequest::_Internal {
 public:
};

GetPromptRequest::GetPromptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.GetPromptRequest)
}
GetPromptRequest::GetPromptRequest(const GetPromptRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPromptRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcp.GetPromptRequest)
}

inline void GetPromptRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPromptRequest::~GetPromptRequest() {
  // @@protoc_insertion_point(destructor:mcp.GetPromptRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPromptRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GetPromptRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPromptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.GetPromptRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPromptRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.GetPromptRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPromptRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.GetPromptRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.GetPromptRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.GetPromptRequest)
  return target;
}

size_t GetPromptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.GetPromptRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPromptRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPromptRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPromptRequest::GetClassData() const { return &_class_data_; }


void GetPromptRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPromptRequest*>(&to_msg);
  auto& from = static_cast<const GetPromptRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.GetPromptRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPromptRequest::CopyFrom(const GetPromptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.GetPromptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPromptRequest::IsInitialized() const {
  return true;
}

void GetPromptRequest::InternalSwap(GetPromptRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPromptRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[13]);
}

// ===================================================================

class ListPromptsRequest::_Internal {
 public:
  static const ::mcp::PaginatedParams& params(const ListPromptsRequest* msg);
};

const ::mcp::PaginatedParams&
ListPromptsRequest::_Internal::params(const ListPromptsRequest* msg) {
  return *msg->_impl_.params_;
}
void ListPromptsRequest::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
ListPromptsRequest::ListPromptsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.ListPromptsRequest)
}
ListPromptsRequest::ListPromptsRequest(const ListPromptsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListPromptsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filter_){}
    , decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filter().empty()) {
    _this->_impl_.filter_.Set(from._internal_filter(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_params()) {
    _this->_impl_.params_ = new ::mcp::PaginatedParams(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.ListPromptsRequest)
}

inline void ListPromptsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filter_){}
    , decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListPromptsRequest::~ListPromptsRequest() {
  // @@protoc_insertion_point(destructor:mcp.ListPromptsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListPromptsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filter_.Destroy();
  if (this != internal_default_instance()) delete _impl_.params_;
}

void ListPromptsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListPromptsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ListPromptsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filter_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPromptsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcp.PaginatedParams params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.ListPromptsRequest.filter"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListPromptsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ListPromptsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcp.PaginatedParams params = 1;
  if (this->_internal_has_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  // string filter = 2;
  if (!this->_internal_filter().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filter().data(), static_cast<int>(this->_internal_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.ListPromptsRequest.filter");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ListPromptsRequest)
  return target;
}

size_t ListPromptsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ListPromptsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filter = 2;
  if (!this->_internal_filter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filter());
  }

  // .mcp.PaginatedParams params = 1;
  if (this->_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListPromptsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListPromptsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListPromptsRequest::GetClassData() const { return &_class_data_; }


void ListPromptsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListPromptsRequest*>(&to_msg);
  auto& from = static_cast<const ListPromptsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ListPromptsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filter().empty()) {
    _this->_internal_set_filter(from._internal_filter());
  }
  if (from._internal_has_params()) {
    _this->_internal_mutable_params()->::mcp::PaginatedParams::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListPromptsRequest::CopyFrom(const ListPromptsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ListPromptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPromptsRequest::IsInitialized() const {
  return true;
}

void ListPromptsRequest::InternalSwap(ListPromptsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filter_, lhs_arena,
      &other->_impl_.filter_, rhs_arena
  );
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPromptsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[14]);
}

// ===================================================================

class ListPromptsResponse::_Internal {
 public:
};

ListPromptsResponse::ListPromptsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.ListPromptsResponse)
}
ListPromptsResponse::ListPromptsResponse(const ListPromptsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListPromptsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prompts_){from._impl_.prompts_}
    , decltype(_impl_.next_cursor_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_cursor().empty()) {
    _this->_impl_.next_cursor_.Set(from._internal_next_cursor(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcp.ListPromptsResponse)
}

inline void ListPromptsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prompts_){arena}
    , decltype(_impl_.next_cursor_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListPromptsResponse::~ListPromptsResponse() {
  // @@protoc_insertion_point(destructor:mcp.ListPromptsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListPromptsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prompts_.~RepeatedPtrField();
  _impl_.next_cursor_.Destroy();
}

void ListPromptsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListPromptsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ListPromptsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prompts_.Clear();
  _impl_.next_cursor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPromptsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mcp.Prompt prompts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prompts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.ListPromptsResponse.next_cursor"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListPromptsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ListPromptsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mcp.Prompt prompts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_prompts_size()); i < n; i++) {
    const auto& repfield = this->_internal_prompts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string next_cursor = 2;
  if (!this->_internal_next_cursor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_cursor().data(), static_cast<int>(this->_internal_next_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.ListPromptsResponse.next_cursor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ListPromptsResponse)
  return target;
}

size_t ListPromptsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ListPromptsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcp.Prompt prompts = 1;
  total_size += 1UL * this->_internal_prompts_size();
  for (const auto& msg : this->_impl_.prompts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_cursor = 2;
  if (!this->_internal_next_cursor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_cursor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListPromptsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListPromptsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListPromptsResponse::GetClassData() const { return &_class_data_; }


void ListPromptsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListPromptsResponse*>(&to_msg);
  auto& from = static_cast<const ListPromptsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ListPromptsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.prompts_.MergeFrom(from._impl_.prompts_);
  if (!from._internal_next_cursor().empty()) {
    _this->_internal_set_next_cursor(from._internal_next_cursor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListPromptsResponse::CopyFrom(const ListPromptsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ListPromptsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPromptsResponse::IsInitialized() const {
  return true;
}

void ListPromptsResponse::InternalSwap(ListPromptsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.prompts_.InternalSwap(&other->_impl_.prompts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_cursor_, lhs_arena,
      &other->_impl_.next_cursor_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPromptsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[15]);
}

// ===================================================================

class UpdatePromptRequest::_Internal {
 public:
  static const ::mcp::Prompt& prompt(const UpdatePromptRequest* msg);
};

const ::mcp::Prompt&
UpdatePromptRequest::_Internal::prompt(const UpdatePromptRequest* msg) {
  return *msg->_impl_.prompt_;
}
UpdatePromptRequest::UpdatePromptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.UpdatePromptRequest)
}
UpdatePromptRequest::UpdatePromptRequest(const UpdatePromptRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdatePromptRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.prompt_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_prompt()) {
    _this->_impl_.prompt_ = new ::mcp::Prompt(*from._impl_.prompt_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.UpdatePromptRequest)
}

inline void UpdatePromptRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.prompt_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdatePromptRequest::~UpdatePromptRequest() {
  // @@protoc_insertion_point(destructor:mcp.UpdatePromptRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdatePromptRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.prompt_;
}

void UpdatePromptRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdatePromptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.UpdatePromptRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.prompt_ != nullptr) {
    delete _impl_.prompt_;
  }
  _impl_.prompt_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePromptRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.UpdatePromptRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.Prompt prompt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prompt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdatePromptRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.UpdatePromptRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.UpdatePromptRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .mcp.Prompt prompt = 2;
  if (this->_internal_has_prompt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::prompt(this),
        _Internal::prompt(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.UpdatePromptRequest)
  return target;
}

size_t UpdatePromptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.UpdatePromptRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .mcp.Prompt prompt = 2;
  if (this->_internal_has_prompt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prompt_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdatePromptRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdatePromptRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdatePromptRequest::GetClassData() const { return &_class_data_; }


void UpdatePromptRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdatePromptRequest*>(&to_msg);
  auto& from = static_cast<const UpdatePromptRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.UpdatePromptRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_prompt()) {
    _this->_internal_mutable_prompt()->::mcp::Prompt::MergeFrom(
        from._internal_prompt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdatePromptRequest::CopyFrom(const UpdatePromptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.UpdatePromptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePromptRequest::IsInitialized() const {
  return true;
}

void UpdatePromptRequest::InternalSwap(UpdatePromptRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.prompt_, other->_impl_.prompt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePromptRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[16]);
}

// ===================================================================

class UpdatePromptResponse::_Internal {
 public:
};

UpdatePromptResponse::UpdatePromptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.UpdatePromptResponse)
}
UpdatePromptResponse::UpdatePromptResponse(const UpdatePromptResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdatePromptResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:mcp.UpdatePromptResponse)
}

inline void UpdatePromptResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdatePromptResponse::~UpdatePromptResponse() {
  // @@protoc_insertion_point(destructor:mcp.UpdatePromptResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdatePromptResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UpdatePromptResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdatePromptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.UpdatePromptResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePromptResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdatePromptResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.UpdatePromptResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.UpdatePromptResponse)
  return target;
}

size_t UpdatePromptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.UpdatePromptResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdatePromptResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdatePromptResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdatePromptResponse::GetClassData() const { return &_class_data_; }


void UpdatePromptResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdatePromptResponse*>(&to_msg);
  auto& from = static_cast<const UpdatePromptResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.UpdatePromptResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdatePromptResponse::CopyFrom(const UpdatePromptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.UpdatePromptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePromptResponse::IsInitialized() const {
  return true;
}

void UpdatePromptResponse::InternalSwap(UpdatePromptResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePromptResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[17]);
}

// ===================================================================

class DeletePromptRequest::_Internal {
 public:
};

DeletePromptRequest::DeletePromptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.DeletePromptRequest)
}
DeletePromptRequest::DeletePromptRequest(const DeletePromptRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeletePromptRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcp.DeletePromptRequest)
}

inline void DeletePromptRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeletePromptRequest::~DeletePromptRequest() {
  // @@protoc_insertion_point(destructor:mcp.DeletePromptRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeletePromptRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void DeletePromptRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeletePromptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.DeletePromptRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeletePromptRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.DeletePromptRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeletePromptRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.DeletePromptRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.DeletePromptRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.DeletePromptRequest)
  return target;
}

size_t DeletePromptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.DeletePromptRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeletePromptRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeletePromptRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeletePromptRequest::GetClassData() const { return &_class_data_; }


void DeletePromptRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeletePromptRequest*>(&to_msg);
  auto& from = static_cast<const DeletePromptRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.DeletePromptRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeletePromptRequest::CopyFrom(const DeletePromptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.DeletePromptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePromptRequest::IsInitialized() const {
  return true;
}

void DeletePromptRequest::InternalSwap(DeletePromptRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePromptRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[18]);
}

// ===================================================================

class DeletePromptResponse::_Internal {
 public:
};

DeletePromptResponse::DeletePromptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.DeletePromptResponse)
}
DeletePromptResponse::DeletePromptResponse(const DeletePromptResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeletePromptResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:mcp.DeletePromptResponse)
}

inline void DeletePromptResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeletePromptResponse::~DeletePromptResponse() {
  // @@protoc_insertion_point(destructor:mcp.DeletePromptResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeletePromptResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeletePromptResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeletePromptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.DeletePromptResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeletePromptResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeletePromptResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.DeletePromptResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.DeletePromptResponse)
  return target;
}

size_t DeletePromptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.DeletePromptResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeletePromptResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeletePromptResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeletePromptResponse::GetClassData() const { return &_class_data_; }


void DeletePromptResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeletePromptResponse*>(&to_msg);
  auto& from = static_cast<const DeletePromptResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.DeletePromptResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeletePromptResponse::CopyFrom(const DeletePromptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.DeletePromptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePromptResponse::IsInitialized() const {
  return true;
}

void DeletePromptResponse::InternalSwap(DeletePromptResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePromptResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[19]);
}

// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mcp.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Empty* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mcp.Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_5fservice_2eproto_getter, &descriptor_table_mcp_5fservice_2eproto_once,
      file_level_metadata_mcp_5fservice_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mcp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mcp::RegisterRequest*
Arena::CreateMaybeMessage< ::mcp::RegisterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::RegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::RegisterResponse*
Arena::CreateMaybeMessage< ::mcp::RegisterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::RegisterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::RegisterInputSchemaRequest*
Arena::CreateMaybeMessage< ::mcp::RegisterInputSchemaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::RegisterInputSchemaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::RegisterInputSchemaResponse*
Arena::CreateMaybeMessage< ::mcp::RegisterInputSchemaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::RegisterInputSchemaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::GetInputSchemaRequest*
Arena::CreateMaybeMessage< ::mcp::GetInputSchemaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::GetInputSchemaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::RegisterToolRequest*
Arena::CreateMaybeMessage< ::mcp::RegisterToolRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::RegisterToolRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::RegisterToolResponse*
Arena::CreateMaybeMessage< ::mcp::RegisterToolResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::RegisterToolResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ListToolsRequest*
Arena::CreateMaybeMessage< ::mcp::ListToolsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ListToolsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ListToolsResponse*
Arena::CreateMaybeMessage< ::mcp::ListToolsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ListToolsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::Prompt_MetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::mcp::Prompt_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::Prompt_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::Prompt*
Arena::CreateMaybeMessage< ::mcp::Prompt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::Prompt >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::RegisterPromptRequest*
Arena::CreateMaybeMessage< ::mcp::RegisterPromptRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::RegisterPromptRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::RegisterPromptResponse*
Arena::CreateMaybeMessage< ::mcp::RegisterPromptResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::RegisterPromptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::GetPromptRequest*
Arena::CreateMaybeMessage< ::mcp::GetPromptRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::GetPromptRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ListPromptsRequest*
Arena::CreateMaybeMessage< ::mcp::ListPromptsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ListPromptsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ListPromptsResponse*
Arena::CreateMaybeMessage< ::mcp::ListPromptsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ListPromptsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::UpdatePromptRequest*
Arena::CreateMaybeMessage< ::mcp::UpdatePromptRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::UpdatePromptRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::UpdatePromptResponse*
Arena::CreateMaybeMessage< ::mcp::UpdatePromptResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::UpdatePromptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::DeletePromptRequest*
Arena::CreateMaybeMessage< ::mcp::DeletePromptRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::DeletePromptRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::DeletePromptResponse*
Arena::CreateMaybeMessage< ::mcp::DeletePromptResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::DeletePromptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::Empty*
Arena::CreateMaybeMessage< ::mcp::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::Empty >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
