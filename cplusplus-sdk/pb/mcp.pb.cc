// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mcp.proto

#include "mcp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mcp {
PROTOBUF_CONSTEXPR JSONRPCMessage::JSONRPCMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct JSONRPCMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JSONRPCMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JSONRPCMessageDefaultTypeInternal() {}
  union {
    JSONRPCMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JSONRPCMessageDefaultTypeInternal _JSONRPCMessage_default_instance_;
PROTOBUF_CONSTEXPR JSONRPCRequest::JSONRPCRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.jsonrpc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JSONRPCRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JSONRPCRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JSONRPCRequestDefaultTypeInternal() {}
  union {
    JSONRPCRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JSONRPCRequestDefaultTypeInternal _JSONRPCRequest_default_instance_;
PROTOBUF_CONSTEXPR JSONRPCNotification::JSONRPCNotification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.jsonrpc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JSONRPCNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JSONRPCNotificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JSONRPCNotificationDefaultTypeInternal() {}
  union {
    JSONRPCNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JSONRPCNotificationDefaultTypeInternal _JSONRPCNotification_default_instance_;
PROTOBUF_CONSTEXPR JSONRPCResponse::JSONRPCResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.jsonrpc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JSONRPCResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JSONRPCResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JSONRPCResponseDefaultTypeInternal() {}
  union {
    JSONRPCResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JSONRPCResponseDefaultTypeInternal _JSONRPCResponse_default_instance_;
PROTOBUF_CONSTEXPR JSONRPCError::JSONRPCError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.jsonrpc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JSONRPCErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JSONRPCErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JSONRPCErrorDefaultTypeInternal() {}
  union {
    JSONRPCError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JSONRPCErrorDefaultTypeInternal _JSONRPCError_default_instance_;
PROTOBUF_CONSTEXPR JSONRPCBatchRequest::JSONRPCBatchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.requests_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JSONRPCBatchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JSONRPCBatchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JSONRPCBatchRequestDefaultTypeInternal() {}
  union {
    JSONRPCBatchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JSONRPCBatchRequestDefaultTypeInternal _JSONRPCBatchRequest_default_instance_;
PROTOBUF_CONSTEXPR JSONRPCBatchResponse::JSONRPCBatchResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.responses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JSONRPCBatchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JSONRPCBatchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JSONRPCBatchResponseDefaultTypeInternal() {}
  union {
    JSONRPCBatchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JSONRPCBatchResponseDefaultTypeInternal _JSONRPCBatchResponse_default_instance_;
PROTOBUF_CONSTEXPR RequestParams_AdditionalParamsEntry_DoNotUse::RequestParams_AdditionalParamsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct RequestParams_AdditionalParamsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestParams_AdditionalParamsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestParams_AdditionalParamsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RequestParams_AdditionalParamsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestParams_AdditionalParamsEntry_DoNotUseDefaultTypeInternal _RequestParams_AdditionalParamsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR RequestParams::RequestParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.additional_params_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._meta_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestParamsDefaultTypeInternal() {}
  union {
    RequestParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestParamsDefaultTypeInternal _RequestParams_default_instance_;
PROTOBUF_CONSTEXPR NotificationParams_AdditionalParamsEntry_DoNotUse::NotificationParams_AdditionalParamsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct NotificationParams_AdditionalParamsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationParams_AdditionalParamsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationParams_AdditionalParamsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    NotificationParams_AdditionalParamsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationParams_AdditionalParamsEntry_DoNotUseDefaultTypeInternal _NotificationParams_AdditionalParamsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR NotificationParams::NotificationParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.additional_params_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._meta_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotificationParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationParamsDefaultTypeInternal() {}
  union {
    NotificationParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationParamsDefaultTypeInternal _NotificationParams_default_instance_;
PROTOBUF_CONSTEXPR MetaParams_AdditionalMetaEntry_DoNotUse::MetaParams_AdditionalMetaEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct MetaParams_AdditionalMetaEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetaParams_AdditionalMetaEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetaParams_AdditionalMetaEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MetaParams_AdditionalMetaEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetaParams_AdditionalMetaEntry_DoNotUseDefaultTypeInternal _MetaParams_AdditionalMetaEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MetaParams::MetaParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.additional_meta_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.progress_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetaParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetaParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetaParamsDefaultTypeInternal() {}
  union {
    MetaParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetaParamsDefaultTypeInternal _MetaParams_default_instance_;
PROTOBUF_CONSTEXPR Result_AdditionalResultEntry_DoNotUse::Result_AdditionalResultEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Result_AdditionalResultEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Result_AdditionalResultEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Result_AdditionalResultEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Result_AdditionalResultEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Result_AdditionalResultEntry_DoNotUseDefaultTypeInternal _Result_AdditionalResultEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Result::Result(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.additional_result_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._meta_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultDefaultTypeInternal _Result_default_instance_;
PROTOBUF_CONSTEXPR MetaResult_AdditionalMetaEntry_DoNotUse::MetaResult_AdditionalMetaEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct MetaResult_AdditionalMetaEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetaResult_AdditionalMetaEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetaResult_AdditionalMetaEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MetaResult_AdditionalMetaEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetaResult_AdditionalMetaEntry_DoNotUseDefaultTypeInternal _MetaResult_AdditionalMetaEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MetaResult::MetaResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.additional_meta_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetaResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetaResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetaResultDefaultTypeInternal() {}
  union {
    MetaResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetaResultDefaultTypeInternal _MetaResult_default_instance_;
PROTOBUF_CONSTEXPR Error::Error(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorDefaultTypeInternal() {}
  union {
    Error _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorDefaultTypeInternal _Error_default_instance_;
PROTOBUF_CONSTEXPR Implementation::Implementation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImplementationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImplementationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImplementationDefaultTypeInternal() {}
  union {
    Implementation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImplementationDefaultTypeInternal _Implementation_default_instance_;
PROTOBUF_CONSTEXPR ClientCapabilities_ExperimentalEntry_DoNotUse::ClientCapabilities_ExperimentalEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ClientCapabilities_ExperimentalEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientCapabilities_ExperimentalEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientCapabilities_ExperimentalEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ClientCapabilities_ExperimentalEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientCapabilities_ExperimentalEntry_DoNotUseDefaultTypeInternal _ClientCapabilities_ExperimentalEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ClientCapabilities::ClientCapabilities(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.experimental_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.roots_)*/nullptr
  , /*decltype(_impl_.sampling_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientCapabilitiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientCapabilitiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientCapabilitiesDefaultTypeInternal() {}
  union {
    ClientCapabilities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientCapabilitiesDefaultTypeInternal _ClientCapabilities_default_instance_;
PROTOBUF_CONSTEXPR ServerCapabilities_ExperimentalEntry_DoNotUse::ServerCapabilities_ExperimentalEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ServerCapabilities_ExperimentalEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerCapabilities_ExperimentalEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerCapabilities_ExperimentalEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ServerCapabilities_ExperimentalEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerCapabilities_ExperimentalEntry_DoNotUseDefaultTypeInternal _ServerCapabilities_ExperimentalEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ServerCapabilities::ServerCapabilities(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.experimental_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.logging_)*/nullptr
  , /*decltype(_impl_.completions_)*/nullptr
  , /*decltype(_impl_.prompts_)*/nullptr
  , /*decltype(_impl_.resources_)*/nullptr
  , /*decltype(_impl_.tools_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerCapabilitiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerCapabilitiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerCapabilitiesDefaultTypeInternal() {}
  union {
    ServerCapabilities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerCapabilitiesDefaultTypeInternal _ServerCapabilities_default_instance_;
PROTOBUF_CONSTEXPR RootsCapability::RootsCapability(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_changed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RootsCapabilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RootsCapabilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RootsCapabilityDefaultTypeInternal() {}
  union {
    RootsCapability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RootsCapabilityDefaultTypeInternal _RootsCapability_default_instance_;
PROTOBUF_CONSTEXPR SamplingCapability::SamplingCapability(
    ::_pbi::ConstantInitialized) {}
struct SamplingCapabilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SamplingCapabilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SamplingCapabilityDefaultTypeInternal() {}
  union {
    SamplingCapability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SamplingCapabilityDefaultTypeInternal _SamplingCapability_default_instance_;
PROTOBUF_CONSTEXPR LoggingCapability::LoggingCapability(
    ::_pbi::ConstantInitialized) {}
struct LoggingCapabilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoggingCapabilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoggingCapabilityDefaultTypeInternal() {}
  union {
    LoggingCapability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoggingCapabilityDefaultTypeInternal _LoggingCapability_default_instance_;
PROTOBUF_CONSTEXPR CompletionsCapability::CompletionsCapability(
    ::_pbi::ConstantInitialized) {}
struct CompletionsCapabilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompletionsCapabilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompletionsCapabilityDefaultTypeInternal() {}
  union {
    CompletionsCapability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompletionsCapabilityDefaultTypeInternal _CompletionsCapability_default_instance_;
PROTOBUF_CONSTEXPR PromptsCapability::PromptsCapability(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_changed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PromptsCapabilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PromptsCapabilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PromptsCapabilityDefaultTypeInternal() {}
  union {
    PromptsCapability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PromptsCapabilityDefaultTypeInternal _PromptsCapability_default_instance_;
PROTOBUF_CONSTEXPR ResourcesCapability::ResourcesCapability(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subscribe_)*/false
  , /*decltype(_impl_.list_changed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResourcesCapabilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourcesCapabilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourcesCapabilityDefaultTypeInternal() {}
  union {
    ResourcesCapability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourcesCapabilityDefaultTypeInternal _ResourcesCapability_default_instance_;
PROTOBUF_CONSTEXPR ToolsCapability::ToolsCapability(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_changed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ToolsCapabilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToolsCapabilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToolsCapabilityDefaultTypeInternal() {}
  union {
    ToolsCapability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToolsCapabilityDefaultTypeInternal _ToolsCapability_default_instance_;
PROTOBUF_CONSTEXPR Resource::Resource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.annotations_)*/nullptr
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceDefaultTypeInternal() {}
  union {
    Resource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceDefaultTypeInternal _Resource_default_instance_;
PROTOBUF_CONSTEXPR ResourceTemplate::ResourceTemplate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uri_template_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.annotations_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResourceTemplateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceTemplateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceTemplateDefaultTypeInternal() {}
  union {
    ResourceTemplate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceTemplateDefaultTypeInternal _ResourceTemplate_default_instance_;
PROTOBUF_CONSTEXPR ResourceContents::ResourceContents(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ResourceContentsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceContentsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceContentsDefaultTypeInternal() {}
  union {
    ResourceContents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceContentsDefaultTypeInternal _ResourceContents_default_instance_;
PROTOBUF_CONSTEXPR TextResourceContents::TextResourceContents(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TextResourceContentsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextResourceContentsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextResourceContentsDefaultTypeInternal() {}
  union {
    TextResourceContents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextResourceContentsDefaultTypeInternal _TextResourceContents_default_instance_;
PROTOBUF_CONSTEXPR BlobResourceContents::BlobResourceContents(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blob_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlobResourceContentsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlobResourceContentsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlobResourceContentsDefaultTypeInternal() {}
  union {
    BlobResourceContents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlobResourceContentsDefaultTypeInternal _BlobResourceContents_default_instance_;
PROTOBUF_CONSTEXPR Tool::Tool(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.input_schema_)*/nullptr
  , /*decltype(_impl_.annotations_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ToolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToolDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToolDefaultTypeInternal() {}
  union {
    Tool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToolDefaultTypeInternal _Tool_default_instance_;
PROTOBUF_CONSTEXPR InputSchema_PropertiesEntry_DoNotUse::InputSchema_PropertiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct InputSchema_PropertiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputSchema_PropertiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputSchema_PropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    InputSchema_PropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputSchema_PropertiesEntry_DoNotUseDefaultTypeInternal _InputSchema_PropertiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR InputSchema::InputSchema(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.properties_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.required_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InputSchemaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputSchemaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputSchemaDefaultTypeInternal() {}
  union {
    InputSchema _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputSchemaDefaultTypeInternal _InputSchema_default_instance_;
PROTOBUF_CONSTEXPR ToolAnnotations::ToolAnnotations(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.read_only_hint_)*/false
  , /*decltype(_impl_.destructive_hint_)*/false
  , /*decltype(_impl_.idempotent_hint_)*/false
  , /*decltype(_impl_.open_world_hint_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ToolAnnotationsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToolAnnotationsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToolAnnotationsDefaultTypeInternal() {}
  union {
    ToolAnnotations _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToolAnnotationsDefaultTypeInternal _ToolAnnotations_default_instance_;
PROTOBUF_CONSTEXPR Annotations::Annotations(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.audience_)*/{}
  , /*decltype(_impl_._audience_cached_byte_size_)*/{0}
  , /*decltype(_impl_.priority_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnnotationsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnnotationsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnnotationsDefaultTypeInternal() {}
  union {
    Annotations _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnnotationsDefaultTypeInternal _Annotations_default_instance_;
PROTOBUF_CONSTEXPR TextContent::TextContent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.annotations_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TextContentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextContentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextContentDefaultTypeInternal() {}
  union {
    TextContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextContentDefaultTypeInternal _TextContent_default_instance_;
PROTOBUF_CONSTEXPR ImageContent::ImageContent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.annotations_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImageContentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageContentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageContentDefaultTypeInternal() {}
  union {
    ImageContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageContentDefaultTypeInternal _ImageContent_default_instance_;
PROTOBUF_CONSTEXPR AudioContent::AudioContent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.annotations_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AudioContentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioContentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioContentDefaultTypeInternal() {}
  union {
    AudioContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioContentDefaultTypeInternal _AudioContent_default_instance_;
PROTOBUF_CONSTEXPR ModelPreferences::ModelPreferences(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hints_)*/{}
  , /*decltype(_impl_.cost_priority_)*/0
  , /*decltype(_impl_.speed_priority_)*/0
  , /*decltype(_impl_.intelligence_priority_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelPreferencesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelPreferencesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelPreferencesDefaultTypeInternal() {}
  union {
    ModelPreferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelPreferencesDefaultTypeInternal _ModelPreferences_default_instance_;
PROTOBUF_CONSTEXPR ModelHint::ModelHint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelHintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelHintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelHintDefaultTypeInternal() {}
  union {
    ModelHint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelHintDefaultTypeInternal _ModelHint_default_instance_;
PROTOBUF_CONSTEXPR ResourceReference::ResourceReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResourceReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceReferenceDefaultTypeInternal() {}
  union {
    ResourceReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceReferenceDefaultTypeInternal _ResourceReference_default_instance_;
PROTOBUF_CONSTEXPR PromptReference::PromptReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PromptReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PromptReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PromptReferenceDefaultTypeInternal() {}
  union {
    PromptReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PromptReferenceDefaultTypeInternal _PromptReference_default_instance_;
PROTOBUF_CONSTEXPR Root::Root(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RootDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RootDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RootDefaultTypeInternal() {}
  union {
    Root _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RootDefaultTypeInternal _Root_default_instance_;
PROTOBUF_CONSTEXPR InitializeRequest::InitializeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InitializeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitializeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitializeRequestDefaultTypeInternal() {}
  union {
    InitializeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitializeRequestDefaultTypeInternal _InitializeRequest_default_instance_;
PROTOBUF_CONSTEXPR InitializeParams::InitializeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.protocol_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.capabilities_)*/nullptr
  , /*decltype(_impl_.client_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InitializeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitializeParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitializeParamsDefaultTypeInternal() {}
  union {
    InitializeParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitializeParamsDefaultTypeInternal _InitializeParams_default_instance_;
PROTOBUF_CONSTEXPR InitializeResult::InitializeResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.protocol_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instructions_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.capabilities_)*/nullptr
  , /*decltype(_impl_.server_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InitializeResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitializeResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitializeResultDefaultTypeInternal() {}
  union {
    InitializeResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitializeResultDefaultTypeInternal _InitializeResult_default_instance_;
PROTOBUF_CONSTEXPR ListResourcesRequest::ListResourcesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListResourcesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListResourcesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListResourcesRequestDefaultTypeInternal() {}
  union {
    ListResourcesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListResourcesRequestDefaultTypeInternal _ListResourcesRequest_default_instance_;
PROTOBUF_CONSTEXPR ListResourcesResult::ListResourcesResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resources_)*/{}
  , /*decltype(_impl_.next_cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListResourcesResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListResourcesResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListResourcesResultDefaultTypeInternal() {}
  union {
    ListResourcesResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListResourcesResultDefaultTypeInternal _ListResourcesResult_default_instance_;
PROTOBUF_CONSTEXPR ReadResourceRequest::ReadResourceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadResourceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadResourceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadResourceRequestDefaultTypeInternal() {}
  union {
    ReadResourceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadResourceRequestDefaultTypeInternal _ReadResourceRequest_default_instance_;
PROTOBUF_CONSTEXPR ReadResourceParams::ReadResourceParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadResourceParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadResourceParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadResourceParamsDefaultTypeInternal() {}
  union {
    ReadResourceParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadResourceParamsDefaultTypeInternal _ReadResourceParams_default_instance_;
PROTOBUF_CONSTEXPR ReadResourceResult::ReadResourceResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contents_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadResourceResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadResourceResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadResourceResultDefaultTypeInternal() {}
  union {
    ReadResourceResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadResourceResultDefaultTypeInternal _ReadResourceResult_default_instance_;
PROTOBUF_CONSTEXPR PaginatedParams::PaginatedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PaginatedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaginatedParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaginatedParamsDefaultTypeInternal() {}
  union {
    PaginatedParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaginatedParamsDefaultTypeInternal _PaginatedParams_default_instance_;
}  // namespace mcp
static ::_pb::Metadata file_level_metadata_mcp_2eproto[57];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_mcp_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_mcp_2eproto = nullptr;

const uint32_t TableStruct_mcp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCMessage, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCRequest, _impl_.jsonrpc_),
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCRequest, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCRequest, _impl_.params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCNotification, _impl_.jsonrpc_),
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCNotification, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCNotification, _impl_.params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCResponse, _impl_.jsonrpc_),
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCResponse, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCResponse, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCError, _impl_.jsonrpc_),
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCError, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCError, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCBatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCBatchRequest, _impl_.requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCBatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::JSONRPCBatchResponse, _impl_.responses_),
  PROTOBUF_FIELD_OFFSET(::mcp::RequestParams_AdditionalParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcp::RequestParams_AdditionalParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::RequestParams_AdditionalParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcp::RequestParams_AdditionalParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::RequestParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::RequestParams, _impl_._meta_),
  PROTOBUF_FIELD_OFFSET(::mcp::RequestParams, _impl_.additional_params_),
  PROTOBUF_FIELD_OFFSET(::mcp::NotificationParams_AdditionalParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcp::NotificationParams_AdditionalParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::NotificationParams_AdditionalParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcp::NotificationParams_AdditionalParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::NotificationParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::NotificationParams, _impl_._meta_),
  PROTOBUF_FIELD_OFFSET(::mcp::NotificationParams, _impl_.additional_params_),
  PROTOBUF_FIELD_OFFSET(::mcp::MetaParams_AdditionalMetaEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcp::MetaParams_AdditionalMetaEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::MetaParams_AdditionalMetaEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcp::MetaParams_AdditionalMetaEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::MetaParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::MetaParams, _impl_.progress_token_),
  PROTOBUF_FIELD_OFFSET(::mcp::MetaParams, _impl_.additional_meta_),
  PROTOBUF_FIELD_OFFSET(::mcp::Result_AdditionalResultEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcp::Result_AdditionalResultEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::Result_AdditionalResultEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcp::Result_AdditionalResultEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::Result, _impl_._meta_),
  PROTOBUF_FIELD_OFFSET(::mcp::Result, _impl_.additional_result_),
  PROTOBUF_FIELD_OFFSET(::mcp::MetaResult_AdditionalMetaEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcp::MetaResult_AdditionalMetaEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::MetaResult_AdditionalMetaEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcp::MetaResult_AdditionalMetaEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::MetaResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::MetaResult, _impl_.additional_meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::Error, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::mcp::Error, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::mcp::Error, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::Implementation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::Implementation, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::mcp::Implementation, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::mcp::ClientCapabilities_ExperimentalEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcp::ClientCapabilities_ExperimentalEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ClientCapabilities_ExperimentalEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcp::ClientCapabilities_ExperimentalEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ClientCapabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ClientCapabilities, _impl_.experimental_),
  PROTOBUF_FIELD_OFFSET(::mcp::ClientCapabilities, _impl_.roots_),
  PROTOBUF_FIELD_OFFSET(::mcp::ClientCapabilities, _impl_.sampling_),
  PROTOBUF_FIELD_OFFSET(::mcp::ServerCapabilities_ExperimentalEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcp::ServerCapabilities_ExperimentalEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ServerCapabilities_ExperimentalEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcp::ServerCapabilities_ExperimentalEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ServerCapabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ServerCapabilities, _impl_.experimental_),
  PROTOBUF_FIELD_OFFSET(::mcp::ServerCapabilities, _impl_.logging_),
  PROTOBUF_FIELD_OFFSET(::mcp::ServerCapabilities, _impl_.completions_),
  PROTOBUF_FIELD_OFFSET(::mcp::ServerCapabilities, _impl_.prompts_),
  PROTOBUF_FIELD_OFFSET(::mcp::ServerCapabilities, _impl_.resources_),
  PROTOBUF_FIELD_OFFSET(::mcp::ServerCapabilities, _impl_.tools_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::RootsCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::RootsCapability, _impl_.list_changed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::SamplingCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::LoggingCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::CompletionsCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::PromptsCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::PromptsCapability, _impl_.list_changed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ResourcesCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ResourcesCapability, _impl_.subscribe_),
  PROTOBUF_FIELD_OFFSET(::mcp::ResourcesCapability, _impl_.list_changed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ToolsCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ToolsCapability, _impl_.list_changed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::Resource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::Resource, _impl_.uri_),
  PROTOBUF_FIELD_OFFSET(::mcp::Resource, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::mcp::Resource, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::mcp::Resource, _impl_.mime_type_),
  PROTOBUF_FIELD_OFFSET(::mcp::Resource, _impl_.annotations_),
  PROTOBUF_FIELD_OFFSET(::mcp::Resource, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ResourceTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ResourceTemplate, _impl_.uri_template_),
  PROTOBUF_FIELD_OFFSET(::mcp::ResourceTemplate, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::mcp::ResourceTemplate, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::mcp::ResourceTemplate, _impl_.mime_type_),
  PROTOBUF_FIELD_OFFSET(::mcp::ResourceTemplate, _impl_.annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ResourceContents, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mcp::ResourceContents, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ResourceContents, _impl_.uri_),
  PROTOBUF_FIELD_OFFSET(::mcp::ResourceContents, _impl_.mime_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::mcp::ResourceContents, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::TextResourceContents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::TextResourceContents, _impl_.text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::BlobResourceContents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::BlobResourceContents, _impl_.blob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::Tool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::Tool, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::mcp::Tool, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::mcp::Tool, _impl_.input_schema_),
  PROTOBUF_FIELD_OFFSET(::mcp::Tool, _impl_.annotations_),
  PROTOBUF_FIELD_OFFSET(::mcp::InputSchema_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcp::InputSchema_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::InputSchema_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcp::InputSchema_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::InputSchema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::InputSchema, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::mcp::InputSchema, _impl_.properties_),
  PROTOBUF_FIELD_OFFSET(::mcp::InputSchema, _impl_.required_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ToolAnnotations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ToolAnnotations, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::mcp::ToolAnnotations, _impl_.read_only_hint_),
  PROTOBUF_FIELD_OFFSET(::mcp::ToolAnnotations, _impl_.destructive_hint_),
  PROTOBUF_FIELD_OFFSET(::mcp::ToolAnnotations, _impl_.idempotent_hint_),
  PROTOBUF_FIELD_OFFSET(::mcp::ToolAnnotations, _impl_.open_world_hint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::Annotations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::Annotations, _impl_.audience_),
  PROTOBUF_FIELD_OFFSET(::mcp::Annotations, _impl_.priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::TextContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::TextContent, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::mcp::TextContent, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::mcp::TextContent, _impl_.annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ImageContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ImageContent, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::mcp::ImageContent, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::mcp::ImageContent, _impl_.mime_type_),
  PROTOBUF_FIELD_OFFSET(::mcp::ImageContent, _impl_.annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::AudioContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::AudioContent, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::mcp::AudioContent, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::mcp::AudioContent, _impl_.mime_type_),
  PROTOBUF_FIELD_OFFSET(::mcp::AudioContent, _impl_.annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ModelPreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ModelPreferences, _impl_.hints_),
  PROTOBUF_FIELD_OFFSET(::mcp::ModelPreferences, _impl_.cost_priority_),
  PROTOBUF_FIELD_OFFSET(::mcp::ModelPreferences, _impl_.speed_priority_),
  PROTOBUF_FIELD_OFFSET(::mcp::ModelPreferences, _impl_.intelligence_priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ModelHint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ModelHint, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ResourceReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ResourceReference, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::mcp::ResourceReference, _impl_.uri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::PromptReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::PromptReference, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::mcp::PromptReference, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::Root, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::Root, _impl_.uri_),
  PROTOBUF_FIELD_OFFSET(::mcp::Root, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::InitializeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::InitializeRequest, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::mcp::InitializeRequest, _impl_.params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::InitializeParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::InitializeParams, _impl_.protocol_version_),
  PROTOBUF_FIELD_OFFSET(::mcp::InitializeParams, _impl_.capabilities_),
  PROTOBUF_FIELD_OFFSET(::mcp::InitializeParams, _impl_.client_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::InitializeResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::InitializeResult, _impl_.protocol_version_),
  PROTOBUF_FIELD_OFFSET(::mcp::InitializeResult, _impl_.capabilities_),
  PROTOBUF_FIELD_OFFSET(::mcp::InitializeResult, _impl_.server_info_),
  PROTOBUF_FIELD_OFFSET(::mcp::InitializeResult, _impl_.instructions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ListResourcesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ListResourcesRequest, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::mcp::ListResourcesRequest, _impl_.params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ListResourcesResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ListResourcesResult, _impl_.resources_),
  PROTOBUF_FIELD_OFFSET(::mcp::ListResourcesResult, _impl_.next_cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ReadResourceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ReadResourceRequest, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::mcp::ReadResourceRequest, _impl_.params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ReadResourceParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ReadResourceParams, _impl_.uri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::ReadResourceResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::ReadResourceResult, _impl_.contents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcp::PaginatedParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcp::PaginatedParams, _impl_.cursor_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mcp::JSONRPCMessage)},
  { 13, -1, -1, sizeof(::mcp::JSONRPCRequest)},
  { 23, -1, -1, sizeof(::mcp::JSONRPCNotification)},
  { 32, -1, -1, sizeof(::mcp::JSONRPCResponse)},
  { 41, -1, -1, sizeof(::mcp::JSONRPCError)},
  { 50, -1, -1, sizeof(::mcp::JSONRPCBatchRequest)},
  { 57, -1, -1, sizeof(::mcp::JSONRPCBatchResponse)},
  { 64, 72, -1, sizeof(::mcp::RequestParams_AdditionalParamsEntry_DoNotUse)},
  { 74, -1, -1, sizeof(::mcp::RequestParams)},
  { 82, 90, -1, sizeof(::mcp::NotificationParams_AdditionalParamsEntry_DoNotUse)},
  { 92, -1, -1, sizeof(::mcp::NotificationParams)},
  { 100, 108, -1, sizeof(::mcp::MetaParams_AdditionalMetaEntry_DoNotUse)},
  { 110, -1, -1, sizeof(::mcp::MetaParams)},
  { 118, 126, -1, sizeof(::mcp::Result_AdditionalResultEntry_DoNotUse)},
  { 128, -1, -1, sizeof(::mcp::Result)},
  { 136, 144, -1, sizeof(::mcp::MetaResult_AdditionalMetaEntry_DoNotUse)},
  { 146, -1, -1, sizeof(::mcp::MetaResult)},
  { 153, -1, -1, sizeof(::mcp::Error)},
  { 162, -1, -1, sizeof(::mcp::Implementation)},
  { 170, 178, -1, sizeof(::mcp::ClientCapabilities_ExperimentalEntry_DoNotUse)},
  { 180, -1, -1, sizeof(::mcp::ClientCapabilities)},
  { 189, 197, -1, sizeof(::mcp::ServerCapabilities_ExperimentalEntry_DoNotUse)},
  { 199, -1, -1, sizeof(::mcp::ServerCapabilities)},
  { 211, -1, -1, sizeof(::mcp::RootsCapability)},
  { 218, -1, -1, sizeof(::mcp::SamplingCapability)},
  { 224, -1, -1, sizeof(::mcp::LoggingCapability)},
  { 230, -1, -1, sizeof(::mcp::CompletionsCapability)},
  { 236, -1, -1, sizeof(::mcp::PromptsCapability)},
  { 243, -1, -1, sizeof(::mcp::ResourcesCapability)},
  { 251, -1, -1, sizeof(::mcp::ToolsCapability)},
  { 258, -1, -1, sizeof(::mcp::Resource)},
  { 270, -1, -1, sizeof(::mcp::ResourceTemplate)},
  { 281, -1, -1, sizeof(::mcp::ResourceContents)},
  { 292, -1, -1, sizeof(::mcp::TextResourceContents)},
  { 299, -1, -1, sizeof(::mcp::BlobResourceContents)},
  { 306, -1, -1, sizeof(::mcp::Tool)},
  { 316, 324, -1, sizeof(::mcp::InputSchema_PropertiesEntry_DoNotUse)},
  { 326, -1, -1, sizeof(::mcp::InputSchema)},
  { 335, -1, -1, sizeof(::mcp::ToolAnnotations)},
  { 346, -1, -1, sizeof(::mcp::Annotations)},
  { 354, -1, -1, sizeof(::mcp::TextContent)},
  { 363, -1, -1, sizeof(::mcp::ImageContent)},
  { 373, -1, -1, sizeof(::mcp::AudioContent)},
  { 383, -1, -1, sizeof(::mcp::ModelPreferences)},
  { 393, -1, -1, sizeof(::mcp::ModelHint)},
  { 400, -1, -1, sizeof(::mcp::ResourceReference)},
  { 408, -1, -1, sizeof(::mcp::PromptReference)},
  { 416, -1, -1, sizeof(::mcp::Root)},
  { 424, -1, -1, sizeof(::mcp::InitializeRequest)},
  { 432, -1, -1, sizeof(::mcp::InitializeParams)},
  { 441, -1, -1, sizeof(::mcp::InitializeResult)},
  { 451, -1, -1, sizeof(::mcp::ListResourcesRequest)},
  { 459, -1, -1, sizeof(::mcp::ListResourcesResult)},
  { 467, -1, -1, sizeof(::mcp::ReadResourceRequest)},
  { 475, -1, -1, sizeof(::mcp::ReadResourceParams)},
  { 482, -1, -1, sizeof(::mcp::ReadResourceResult)},
  { 489, -1, -1, sizeof(::mcp::PaginatedParams)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mcp::_JSONRPCMessage_default_instance_._instance,
  &::mcp::_JSONRPCRequest_default_instance_._instance,
  &::mcp::_JSONRPCNotification_default_instance_._instance,
  &::mcp::_JSONRPCResponse_default_instance_._instance,
  &::mcp::_JSONRPCError_default_instance_._instance,
  &::mcp::_JSONRPCBatchRequest_default_instance_._instance,
  &::mcp::_JSONRPCBatchResponse_default_instance_._instance,
  &::mcp::_RequestParams_AdditionalParamsEntry_DoNotUse_default_instance_._instance,
  &::mcp::_RequestParams_default_instance_._instance,
  &::mcp::_NotificationParams_AdditionalParamsEntry_DoNotUse_default_instance_._instance,
  &::mcp::_NotificationParams_default_instance_._instance,
  &::mcp::_MetaParams_AdditionalMetaEntry_DoNotUse_default_instance_._instance,
  &::mcp::_MetaParams_default_instance_._instance,
  &::mcp::_Result_AdditionalResultEntry_DoNotUse_default_instance_._instance,
  &::mcp::_Result_default_instance_._instance,
  &::mcp::_MetaResult_AdditionalMetaEntry_DoNotUse_default_instance_._instance,
  &::mcp::_MetaResult_default_instance_._instance,
  &::mcp::_Error_default_instance_._instance,
  &::mcp::_Implementation_default_instance_._instance,
  &::mcp::_ClientCapabilities_ExperimentalEntry_DoNotUse_default_instance_._instance,
  &::mcp::_ClientCapabilities_default_instance_._instance,
  &::mcp::_ServerCapabilities_ExperimentalEntry_DoNotUse_default_instance_._instance,
  &::mcp::_ServerCapabilities_default_instance_._instance,
  &::mcp::_RootsCapability_default_instance_._instance,
  &::mcp::_SamplingCapability_default_instance_._instance,
  &::mcp::_LoggingCapability_default_instance_._instance,
  &::mcp::_CompletionsCapability_default_instance_._instance,
  &::mcp::_PromptsCapability_default_instance_._instance,
  &::mcp::_ResourcesCapability_default_instance_._instance,
  &::mcp::_ToolsCapability_default_instance_._instance,
  &::mcp::_Resource_default_instance_._instance,
  &::mcp::_ResourceTemplate_default_instance_._instance,
  &::mcp::_ResourceContents_default_instance_._instance,
  &::mcp::_TextResourceContents_default_instance_._instance,
  &::mcp::_BlobResourceContents_default_instance_._instance,
  &::mcp::_Tool_default_instance_._instance,
  &::mcp::_InputSchema_PropertiesEntry_DoNotUse_default_instance_._instance,
  &::mcp::_InputSchema_default_instance_._instance,
  &::mcp::_ToolAnnotations_default_instance_._instance,
  &::mcp::_Annotations_default_instance_._instance,
  &::mcp::_TextContent_default_instance_._instance,
  &::mcp::_ImageContent_default_instance_._instance,
  &::mcp::_AudioContent_default_instance_._instance,
  &::mcp::_ModelPreferences_default_instance_._instance,
  &::mcp::_ModelHint_default_instance_._instance,
  &::mcp::_ResourceReference_default_instance_._instance,
  &::mcp::_PromptReference_default_instance_._instance,
  &::mcp::_Root_default_instance_._instance,
  &::mcp::_InitializeRequest_default_instance_._instance,
  &::mcp::_InitializeParams_default_instance_._instance,
  &::mcp::_InitializeResult_default_instance_._instance,
  &::mcp::_ListResourcesRequest_default_instance_._instance,
  &::mcp::_ListResourcesResult_default_instance_._instance,
  &::mcp::_ReadResourceRequest_default_instance_._instance,
  &::mcp::_ReadResourceParams_default_instance_._instance,
  &::mcp::_ReadResourceResult_default_instance_._instance,
  &::mcp::_PaginatedParams_default_instance_._instance,
};

const char descriptor_table_protodef_mcp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmcp.proto\022\003mcp\"\253\002\n\016JSONRPCMessage\022&\n\007r"
  "equest\030\001 \001(\0132\023.mcp.JSONRPCRequestH\000\0220\n\014n"
  "otification\030\002 \001(\0132\030.mcp.JSONRPCNotificat"
  "ionH\000\0221\n\rbatch_request\030\003 \001(\0132\030.mcp.JSONR"
  "PCBatchRequestH\000\022(\n\010response\030\004 \001(\0132\024.mcp"
  ".JSONRPCResponseH\000\022\"\n\005error\030\005 \001(\0132\021.mcp."
  "JSONRPCErrorH\000\0223\n\016batch_response\030\006 \001(\0132\031"
  ".mcp.JSONRPCBatchResponseH\000B\t\n\007message\"a"
  "\n\016JSONRPCRequest\022\017\n\007jsonrpc\030\001 \001(\t\022\n\n\002id\030"
  "\002 \001(\t\022\016\n\006method\030\003 \001(\t\022\"\n\006params\030\004 \001(\0132\022."
  "mcp.RequestParams\"_\n\023JSONRPCNotification"
  "\022\017\n\007jsonrpc\030\001 \001(\t\022\016\n\006method\030\002 \001(\t\022\'\n\006par"
  "ams\030\003 \001(\0132\027.mcp.NotificationParams\"K\n\017JS"
  "ONRPCResponse\022\017\n\007jsonrpc\030\001 \001(\t\022\n\n\002id\030\002 \001"
  "(\t\022\033\n\006result\030\003 \001(\0132\013.mcp.Result\"F\n\014JSONR"
  "PCError\022\017\n\007jsonrpc\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\022\031\n\005"
  "error\030\003 \001(\0132\n.mcp.Error\"<\n\023JSONRPCBatchR"
  "equest\022%\n\010requests\030\001 \003(\0132\023.mcp.JSONRPCRe"
  "quest\"\?\n\024JSONRPCBatchResponse\022\'\n\trespons"
  "es\030\001 \003(\0132\024.mcp.JSONRPCResponse\"\255\001\n\rReque"
  "stParams\022\036\n\005_meta\030\001 \001(\0132\017.mcp.MetaParams"
  "\022C\n\021additional_params\030\002 \003(\0132(.mcp.Reques"
  "tParams.AdditionalParamsEntry\0327\n\025Additio"
  "nalParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
  "(\014:\0028\001\"\267\001\n\022NotificationParams\022\036\n\005_meta\030\001"
  " \001(\0132\017.mcp.MetaParams\022H\n\021additional_para"
  "ms\030\002 \003(\0132-.mcp.NotificationParams.Additi"
  "onalParamsEntry\0327\n\025AdditionalParamsEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"\231\001\n\nMet"
  "aParams\022\026\n\016progress_token\030\001 \001(\t\022<\n\017addit"
  "ional_meta\030\002 \003(\0132#.mcp.MetaParams.Additi"
  "onalMetaEntry\0325\n\023AdditionalMetaEntry\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"\237\001\n\006Result\022"
  "\036\n\005_meta\030\001 \001(\0132\017.mcp.MetaResult\022<\n\021addit"
  "ional_result\030\002 \003(\0132!.mcp.Result.Addition"
  "alResultEntry\0327\n\025AdditionalResultEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"\201\001\n\nMetaR"
  "esult\022<\n\017additional_meta\030\001 \003(\0132#.mcp.Met"
  "aResult.AdditionalMetaEntry\0325\n\023Additiona"
  "lMetaEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\002"
  "8\001\"4\n\005Error\022\014\n\004code\030\001 \001(\005\022\017\n\007message\030\002 \001"
  "(\t\022\014\n\004data\030\003 \001(\014\"/\n\016Implementation\022\014\n\004na"
  "me\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\"\332\001\n\022ClientCapa"
  "bilities\022\?\n\014experimental\030\001 \003(\0132).mcp.Cli"
  "entCapabilities.ExperimentalEntry\022#\n\005roo"
  "ts\030\002 \001(\0132\024.mcp.RootsCapability\022)\n\010sampli"
  "ng\030\003 \001(\0132\027.mcp.SamplingCapability\0323\n\021Exp"
  "erimentalEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
  "(\014:\0028\001\"\337\002\n\022ServerCapabilities\022\?\n\014experim"
  "ental\030\001 \003(\0132).mcp.ServerCapabilities.Exp"
  "erimentalEntry\022\'\n\007logging\030\002 \001(\0132\026.mcp.Lo"
  "ggingCapability\022/\n\013completions\030\003 \001(\0132\032.m"
  "cp.CompletionsCapability\022\'\n\007prompts\030\004 \001("
  "\0132\026.mcp.PromptsCapability\022+\n\tresources\030\005"
  " \001(\0132\030.mcp.ResourcesCapability\022#\n\005tools\030"
  "\006 \001(\0132\024.mcp.ToolsCapability\0323\n\021Experimen"
  "talEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001"
  "\"\'\n\017RootsCapability\022\024\n\014list_changed\030\001 \001("
  "\010\"\024\n\022SamplingCapability\"\023\n\021LoggingCapabi"
  "lity\"\027\n\025CompletionsCapability\")\n\021Prompts"
  "Capability\022\024\n\014list_changed\030\001 \001(\010\">\n\023Reso"
  "urcesCapability\022\021\n\tsubscribe\030\001 \001(\010\022\024\n\014li"
  "st_changed\030\002 \001(\010\"\'\n\017ToolsCapability\022\024\n\014l"
  "ist_changed\030\001 \001(\010\"\202\001\n\010Resource\022\013\n\003uri\030\001 "
  "\001(\t\022\014\n\004name\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\021"
  "\n\tmime_type\030\004 \001(\t\022%\n\013annotations\030\005 \001(\0132\020"
  ".mcp.Annotations\022\014\n\004size\030\006 \001(\003\"\205\001\n\020Resou"
  "rceTemplate\022\024\n\014uri_template\030\001 \001(\t\022\014\n\004nam"
  "e\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\021\n\tmime_typ"
  "e\030\004 \001(\t\022%\n\013annotations\030\005 \001(\0132\020.mcp.Annot"
  "ations\"\223\001\n\020ResourceContents\022\013\n\003uri\030\001 \001(\t"
  "\022\021\n\tmime_type\030\002 \001(\t\022)\n\004text\030\003 \001(\0132\031.mcp."
  "TextResourceContentsH\000\022)\n\004blob\030\004 \001(\0132\031.m"
  "cp.BlobResourceContentsH\000B\t\n\007content\"$\n\024"
  "TextResourceContents\022\014\n\004text\030\001 \001(\t\"$\n\024Bl"
  "obResourceContents\022\014\n\004blob\030\001 \001(\014\"|\n\004Tool"
  "\022\014\n\004name\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022&\n\014i"
  "nput_schema\030\003 \001(\0132\020.mcp.InputSchema\022)\n\013a"
  "nnotations\030\004 \001(\0132\024.mcp.ToolAnnotations\"\226"
  "\001\n\013InputSchema\022\014\n\004type\030\001 \001(\t\0224\n\nproperti"
  "es\030\002 \003(\0132 .mcp.InputSchema.PropertiesEnt"
  "ry\022\020\n\010required\030\003 \003(\t\0321\n\017PropertiesEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"\204\001\n\017Tool"
  "Annotations\022\r\n\005title\030\001 \001(\t\022\026\n\016read_only_"
  "hint\030\002 \001(\010\022\030\n\020destructive_hint\030\003 \001(\010\022\027\n\017"
  "idempotent_hint\030\004 \001(\010\022\027\n\017open_world_hint"
  "\030\005 \001(\010\"<\n\013Annotations\022\033\n\010audience\030\001 \003(\0162"
  "\t.mcp.Role\022\020\n\010priority\030\002 \001(\002\"P\n\013TextCont"
  "ent\022\014\n\004type\030\001 \001(\t\022\014\n\004text\030\002 \001(\t\022%\n\013annot"
  "ations\030\003 \001(\0132\020.mcp.Annotations\"d\n\014ImageC"
  "ontent\022\014\n\004type\030\001 \001(\t\022\014\n\004data\030\002 \001(\014\022\021\n\tmi"
  "me_type\030\003 \001(\t\022%\n\013annotations\030\004 \001(\0132\020.mcp"
  ".Annotations\"d\n\014AudioContent\022\014\n\004type\030\001 \001"
  "(\t\022\014\n\004data\030\002 \001(\014\022\021\n\tmime_type\030\003 \001(\t\022%\n\013a"
  "nnotations\030\004 \001(\0132\020.mcp.Annotations\"\177\n\020Mo"
  "delPreferences\022\035\n\005hints\030\001 \003(\0132\016.mcp.Mode"
  "lHint\022\025\n\rcost_priority\030\002 \001(\002\022\026\n\016speed_pr"
  "iority\030\003 \001(\002\022\035\n\025intelligence_priority\030\004 "
  "\001(\002\"\031\n\tModelHint\022\014\n\004name\030\001 \001(\t\".\n\021Resour"
  "ceReference\022\014\n\004type\030\001 \001(\t\022\013\n\003uri\030\002 \001(\t\"-"
  "\n\017PromptReference\022\014\n\004type\030\001 \001(\t\022\014\n\004name\030"
  "\002 \001(\t\"!\n\004Root\022\013\n\003uri\030\001 \001(\t\022\014\n\004name\030\002 \001(\t"
  "\"J\n\021InitializeRequest\022\016\n\006method\030\001 \001(\t\022%\n"
  "\006params\030\002 \001(\0132\025.mcp.InitializeParams\"\205\001\n"
  "\020InitializeParams\022\030\n\020protocol_version\030\001 "
  "\001(\t\022-\n\014capabilities\030\002 \001(\0132\027.mcp.ClientCa"
  "pabilities\022(\n\013client_info\030\003 \001(\0132\023.mcp.Im"
  "plementation\"\233\001\n\020InitializeResult\022\030\n\020pro"
  "tocol_version\030\001 \001(\t\022-\n\014capabilities\030\002 \001("
  "\0132\027.mcp.ServerCapabilities\022(\n\013server_inf"
  "o\030\003 \001(\0132\023.mcp.Implementation\022\024\n\014instruct"
  "ions\030\004 \001(\t\"L\n\024ListResourcesRequest\022\016\n\006me"
  "thod\030\001 \001(\t\022$\n\006params\030\002 \001(\0132\024.mcp.Paginat"
  "edParams\"L\n\023ListResourcesResult\022 \n\tresou"
  "rces\030\001 \003(\0132\r.mcp.Resource\022\023\n\013next_cursor"
  "\030\002 \001(\t\"N\n\023ReadResourceRequest\022\016\n\006method\030"
  "\001 \001(\t\022\'\n\006params\030\002 \001(\0132\027.mcp.ReadResource"
  "Params\"!\n\022ReadResourceParams\022\013\n\003uri\030\001 \001("
  "\t\"=\n\022ReadResourceResult\022\'\n\010contents\030\001 \003("
  "\0132\025.mcp.ResourceContents\"!\n\017PaginatedPar"
  "ams\022\016\n\006cursor\030\001 \001(\t*\?\n\004Role\022\024\n\020ROLE_UNSP"
  "ECIFIED\020\000\022\r\n\tROLE_USER\020\001\022\022\n\016ROLE_ASSISTA"
  "NT\020\002*\376\001\n\014LoggingLevel\022\035\n\031LOGGING_LEVEL_U"
  "NSPECIFIED\020\000\022\027\n\023LOGGING_LEVEL_DEBUG\020\001\022\026\n"
  "\022LOGGING_LEVEL_INFO\020\002\022\030\n\024LOGGING_LEVEL_N"
  "OTICE\020\003\022\031\n\025LOGGING_LEVEL_WARNING\020\004\022\027\n\023LO"
  "GGING_LEVEL_ERROR\020\005\022\032\n\026LOGGING_LEVEL_CRI"
  "TICAL\020\006\022\027\n\023LOGGING_LEVEL_ALERT\020\007\022\033\n\027LOGG"
  "ING_LEVEL_EMERGENCY\020\010b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_mcp_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_mcp_2eproto = {
    false, false, 5149, descriptor_table_protodef_mcp_2eproto,
    "mcp.proto",
    &descriptor_table_mcp_2eproto_once, nullptr, 0, 57,
    schemas, file_default_instances, TableStruct_mcp_2eproto::offsets,
    file_level_metadata_mcp_2eproto, file_level_enum_descriptors_mcp_2eproto,
    file_level_service_descriptors_mcp_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_mcp_2eproto_getter() {
  return &descriptor_table_mcp_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_mcp_2eproto(&descriptor_table_mcp_2eproto);
namespace mcp {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Role_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mcp_2eproto);
  return file_level_enum_descriptors_mcp_2eproto[0];
}
bool Role_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoggingLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mcp_2eproto);
  return file_level_enum_descriptors_mcp_2eproto[1];
}
bool LoggingLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class JSONRPCMessage::_Internal {
 public:
  static const ::mcp::JSONRPCRequest& request(const JSONRPCMessage* msg);
  static const ::mcp::JSONRPCNotification& notification(const JSONRPCMessage* msg);
  static const ::mcp::JSONRPCBatchRequest& batch_request(const JSONRPCMessage* msg);
  static const ::mcp::JSONRPCResponse& response(const JSONRPCMessage* msg);
  static const ::mcp::JSONRPCError& error(const JSONRPCMessage* msg);
  static const ::mcp::JSONRPCBatchResponse& batch_response(const JSONRPCMessage* msg);
};

const ::mcp::JSONRPCRequest&
JSONRPCMessage::_Internal::request(const JSONRPCMessage* msg) {
  return *msg->_impl_.message_.request_;
}
const ::mcp::JSONRPCNotification&
JSONRPCMessage::_Internal::notification(const JSONRPCMessage* msg) {
  return *msg->_impl_.message_.notification_;
}
const ::mcp::JSONRPCBatchRequest&
JSONRPCMessage::_Internal::batch_request(const JSONRPCMessage* msg) {
  return *msg->_impl_.message_.batch_request_;
}
const ::mcp::JSONRPCResponse&
JSONRPCMessage::_Internal::response(const JSONRPCMessage* msg) {
  return *msg->_impl_.message_.response_;
}
const ::mcp::JSONRPCError&
JSONRPCMessage::_Internal::error(const JSONRPCMessage* msg) {
  return *msg->_impl_.message_.error_;
}
const ::mcp::JSONRPCBatchResponse&
JSONRPCMessage::_Internal::batch_response(const JSONRPCMessage* msg) {
  return *msg->_impl_.message_.batch_response_;
}
void JSONRPCMessage::set_allocated_request(::mcp::JSONRPCRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    set_has_request();
    _impl_.message_.request_ = request;
  }
  // @@protoc_insertion_point(field_set_allocated:mcp.JSONRPCMessage.request)
}
void JSONRPCMessage::set_allocated_notification(::mcp::JSONRPCNotification* notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(notification);
    if (message_arena != submessage_arena) {
      notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification, submessage_arena);
    }
    set_has_notification();
    _impl_.message_.notification_ = notification;
  }
  // @@protoc_insertion_point(field_set_allocated:mcp.JSONRPCMessage.notification)
}
void JSONRPCMessage::set_allocated_batch_request(::mcp::JSONRPCBatchRequest* batch_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (batch_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(batch_request);
    if (message_arena != submessage_arena) {
      batch_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batch_request, submessage_arena);
    }
    set_has_batch_request();
    _impl_.message_.batch_request_ = batch_request;
  }
  // @@protoc_insertion_point(field_set_allocated:mcp.JSONRPCMessage.batch_request)
}
void JSONRPCMessage::set_allocated_response(::mcp::JSONRPCResponse* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    set_has_response();
    _impl_.message_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:mcp.JSONRPCMessage.response)
}
void JSONRPCMessage::set_allocated_error(::mcp::JSONRPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    _impl_.message_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:mcp.JSONRPCMessage.error)
}
void JSONRPCMessage::set_allocated_batch_response(::mcp::JSONRPCBatchResponse* batch_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (batch_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(batch_response);
    if (message_arena != submessage_arena) {
      batch_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batch_response, submessage_arena);
    }
    set_has_batch_response();
    _impl_.message_.batch_response_ = batch_response;
  }
  // @@protoc_insertion_point(field_set_allocated:mcp.JSONRPCMessage.batch_response)
}
JSONRPCMessage::JSONRPCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.JSONRPCMessage)
}
JSONRPCMessage::JSONRPCMessage(const JSONRPCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JSONRPCMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kRequest: {
      _this->_internal_mutable_request()->::mcp::JSONRPCRequest::MergeFrom(
          from._internal_request());
      break;
    }
    case kNotification: {
      _this->_internal_mutable_notification()->::mcp::JSONRPCNotification::MergeFrom(
          from._internal_notification());
      break;
    }
    case kBatchRequest: {
      _this->_internal_mutable_batch_request()->::mcp::JSONRPCBatchRequest::MergeFrom(
          from._internal_batch_request());
      break;
    }
    case kResponse: {
      _this->_internal_mutable_response()->::mcp::JSONRPCResponse::MergeFrom(
          from._internal_response());
      break;
    }
    case kError: {
      _this->_internal_mutable_error()->::mcp::JSONRPCError::MergeFrom(
          from._internal_error());
      break;
    }
    case kBatchResponse: {
      _this->_internal_mutable_batch_response()->::mcp::JSONRPCBatchResponse::MergeFrom(
          from._internal_batch_response());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mcp.JSONRPCMessage)
}

inline void JSONRPCMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

JSONRPCMessage::~JSONRPCMessage() {
  // @@protoc_insertion_point(destructor:mcp.JSONRPCMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JSONRPCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void JSONRPCMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JSONRPCMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:mcp.JSONRPCMessage)
  switch (message_case()) {
    case kRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.request_;
      }
      break;
    }
    case kNotification: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.notification_;
      }
      break;
    }
    case kBatchRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.batch_request_;
      }
      break;
    }
    case kResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.response_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.error_;
      }
      break;
    }
    case kBatchResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.batch_response_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void JSONRPCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.JSONRPCMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JSONRPCMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcp.JSONRPCRequest request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mcp.JSONRPCNotification notification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mcp.JSONRPCBatchRequest batch_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mcp.JSONRPCResponse response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mcp.JSONRPCError error = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mcp.JSONRPCBatchResponse batch_response = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JSONRPCMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.JSONRPCMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcp.JSONRPCRequest request = 1;
  if (_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // .mcp.JSONRPCNotification notification = 2;
  if (_internal_has_notification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::notification(this),
        _Internal::notification(this).GetCachedSize(), target, stream);
  }

  // .mcp.JSONRPCBatchRequest batch_request = 3;
  if (_internal_has_batch_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::batch_request(this),
        _Internal::batch_request(this).GetCachedSize(), target, stream);
  }

  // .mcp.JSONRPCResponse response = 4;
  if (_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // .mcp.JSONRPCError error = 5;
  if (_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // .mcp.JSONRPCBatchResponse batch_response = 6;
  if (_internal_has_batch_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::batch_response(this),
        _Internal::batch_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.JSONRPCMessage)
  return target;
}

size_t JSONRPCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.JSONRPCMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .mcp.JSONRPCRequest request = 1;
    case kRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.request_);
      break;
    }
    // .mcp.JSONRPCNotification notification = 2;
    case kNotification: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.notification_);
      break;
    }
    // .mcp.JSONRPCBatchRequest batch_request = 3;
    case kBatchRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.batch_request_);
      break;
    }
    // .mcp.JSONRPCResponse response = 4;
    case kResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.response_);
      break;
    }
    // .mcp.JSONRPCError error = 5;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.error_);
      break;
    }
    // .mcp.JSONRPCBatchResponse batch_response = 6;
    case kBatchResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.batch_response_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JSONRPCMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JSONRPCMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JSONRPCMessage::GetClassData() const { return &_class_data_; }


void JSONRPCMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JSONRPCMessage*>(&to_msg);
  auto& from = static_cast<const JSONRPCMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.JSONRPCMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kRequest: {
      _this->_internal_mutable_request()->::mcp::JSONRPCRequest::MergeFrom(
          from._internal_request());
      break;
    }
    case kNotification: {
      _this->_internal_mutable_notification()->::mcp::JSONRPCNotification::MergeFrom(
          from._internal_notification());
      break;
    }
    case kBatchRequest: {
      _this->_internal_mutable_batch_request()->::mcp::JSONRPCBatchRequest::MergeFrom(
          from._internal_batch_request());
      break;
    }
    case kResponse: {
      _this->_internal_mutable_response()->::mcp::JSONRPCResponse::MergeFrom(
          from._internal_response());
      break;
    }
    case kError: {
      _this->_internal_mutable_error()->::mcp::JSONRPCError::MergeFrom(
          from._internal_error());
      break;
    }
    case kBatchResponse: {
      _this->_internal_mutable_batch_response()->::mcp::JSONRPCBatchResponse::MergeFrom(
          from._internal_batch_response());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JSONRPCMessage::CopyFrom(const JSONRPCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.JSONRPCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JSONRPCMessage::IsInitialized() const {
  return true;
}

void JSONRPCMessage::InternalSwap(JSONRPCMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata JSONRPCMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[0]);
}

// ===================================================================

class JSONRPCRequest::_Internal {
 public:
  static const ::mcp::RequestParams& params(const JSONRPCRequest* msg);
};

const ::mcp::RequestParams&
JSONRPCRequest::_Internal::params(const JSONRPCRequest* msg) {
  return *msg->_impl_.params_;
}
JSONRPCRequest::JSONRPCRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.JSONRPCRequest)
}
JSONRPCRequest::JSONRPCRequest(const JSONRPCRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JSONRPCRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.jsonrpc_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.jsonrpc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jsonrpc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_jsonrpc().empty()) {
    _this->_impl_.jsonrpc_.Set(from._internal_jsonrpc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method().empty()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_params()) {
    _this->_impl_.params_ = new ::mcp::RequestParams(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.JSONRPCRequest)
}

inline void JSONRPCRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.jsonrpc_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.jsonrpc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jsonrpc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JSONRPCRequest::~JSONRPCRequest() {
  // @@protoc_insertion_point(destructor:mcp.JSONRPCRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JSONRPCRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.jsonrpc_.Destroy();
  _impl_.id_.Destroy();
  _impl_.method_.Destroy();
  if (this != internal_default_instance()) delete _impl_.params_;
}

void JSONRPCRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JSONRPCRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.JSONRPCRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.jsonrpc_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.method_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JSONRPCRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string jsonrpc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_jsonrpc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.JSONRPCRequest.jsonrpc"));
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.JSONRPCRequest.id"));
        } else
          goto handle_unusual;
        continue;
      // string method = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.JSONRPCRequest.method"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.RequestParams params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JSONRPCRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.JSONRPCRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string jsonrpc = 1;
  if (!this->_internal_jsonrpc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jsonrpc().data(), static_cast<int>(this->_internal_jsonrpc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.JSONRPCRequest.jsonrpc");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_jsonrpc(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.JSONRPCRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string method = 3;
  if (!this->_internal_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.JSONRPCRequest.method");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_method(), target);
  }

  // .mcp.RequestParams params = 4;
  if (this->_internal_has_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.JSONRPCRequest)
  return target;
}

size_t JSONRPCRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.JSONRPCRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string jsonrpc = 1;
  if (!this->_internal_jsonrpc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jsonrpc());
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string method = 3;
  if (!this->_internal_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // .mcp.RequestParams params = 4;
  if (this->_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JSONRPCRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JSONRPCRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JSONRPCRequest::GetClassData() const { return &_class_data_; }


void JSONRPCRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JSONRPCRequest*>(&to_msg);
  auto& from = static_cast<const JSONRPCRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.JSONRPCRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_jsonrpc().empty()) {
    _this->_internal_set_jsonrpc(from._internal_jsonrpc());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (from._internal_has_params()) {
    _this->_internal_mutable_params()->::mcp::RequestParams::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JSONRPCRequest::CopyFrom(const JSONRPCRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.JSONRPCRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JSONRPCRequest::IsInitialized() const {
  return true;
}

void JSONRPCRequest::InternalSwap(JSONRPCRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jsonrpc_, lhs_arena,
      &other->_impl_.jsonrpc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JSONRPCRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[1]);
}

// ===================================================================

class JSONRPCNotification::_Internal {
 public:
  static const ::mcp::NotificationParams& params(const JSONRPCNotification* msg);
};

const ::mcp::NotificationParams&
JSONRPCNotification::_Internal::params(const JSONRPCNotification* msg) {
  return *msg->_impl_.params_;
}
JSONRPCNotification::JSONRPCNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.JSONRPCNotification)
}
JSONRPCNotification::JSONRPCNotification(const JSONRPCNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JSONRPCNotification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.jsonrpc_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.jsonrpc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jsonrpc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_jsonrpc().empty()) {
    _this->_impl_.jsonrpc_.Set(from._internal_jsonrpc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method().empty()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_params()) {
    _this->_impl_.params_ = new ::mcp::NotificationParams(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.JSONRPCNotification)
}

inline void JSONRPCNotification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.jsonrpc_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.jsonrpc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jsonrpc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JSONRPCNotification::~JSONRPCNotification() {
  // @@protoc_insertion_point(destructor:mcp.JSONRPCNotification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JSONRPCNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.jsonrpc_.Destroy();
  _impl_.method_.Destroy();
  if (this != internal_default_instance()) delete _impl_.params_;
}

void JSONRPCNotification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JSONRPCNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.JSONRPCNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.jsonrpc_.ClearToEmpty();
  _impl_.method_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JSONRPCNotification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string jsonrpc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_jsonrpc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.JSONRPCNotification.jsonrpc"));
        } else
          goto handle_unusual;
        continue;
      // string method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.JSONRPCNotification.method"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.NotificationParams params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JSONRPCNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.JSONRPCNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string jsonrpc = 1;
  if (!this->_internal_jsonrpc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jsonrpc().data(), static_cast<int>(this->_internal_jsonrpc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.JSONRPCNotification.jsonrpc");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_jsonrpc(), target);
  }

  // string method = 2;
  if (!this->_internal_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.JSONRPCNotification.method");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method(), target);
  }

  // .mcp.NotificationParams params = 3;
  if (this->_internal_has_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.JSONRPCNotification)
  return target;
}

size_t JSONRPCNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.JSONRPCNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string jsonrpc = 1;
  if (!this->_internal_jsonrpc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jsonrpc());
  }

  // string method = 2;
  if (!this->_internal_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // .mcp.NotificationParams params = 3;
  if (this->_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JSONRPCNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JSONRPCNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JSONRPCNotification::GetClassData() const { return &_class_data_; }


void JSONRPCNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JSONRPCNotification*>(&to_msg);
  auto& from = static_cast<const JSONRPCNotification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.JSONRPCNotification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_jsonrpc().empty()) {
    _this->_internal_set_jsonrpc(from._internal_jsonrpc());
  }
  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (from._internal_has_params()) {
    _this->_internal_mutable_params()->::mcp::NotificationParams::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JSONRPCNotification::CopyFrom(const JSONRPCNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.JSONRPCNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JSONRPCNotification::IsInitialized() const {
  return true;
}

void JSONRPCNotification::InternalSwap(JSONRPCNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jsonrpc_, lhs_arena,
      &other->_impl_.jsonrpc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JSONRPCNotification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[2]);
}

// ===================================================================

class JSONRPCResponse::_Internal {
 public:
  static const ::mcp::Result& result(const JSONRPCResponse* msg);
};

const ::mcp::Result&
JSONRPCResponse::_Internal::result(const JSONRPCResponse* msg) {
  return *msg->_impl_.result_;
}
JSONRPCResponse::JSONRPCResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.JSONRPCResponse)
}
JSONRPCResponse::JSONRPCResponse(const JSONRPCResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JSONRPCResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.jsonrpc_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.jsonrpc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jsonrpc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_jsonrpc().empty()) {
    _this->_impl_.jsonrpc_.Set(from._internal_jsonrpc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::mcp::Result(*from._impl_.result_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.JSONRPCResponse)
}

inline void JSONRPCResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.jsonrpc_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.jsonrpc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jsonrpc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JSONRPCResponse::~JSONRPCResponse() {
  // @@protoc_insertion_point(destructor:mcp.JSONRPCResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JSONRPCResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.jsonrpc_.Destroy();
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.result_;
}

void JSONRPCResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JSONRPCResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.JSONRPCResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.jsonrpc_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JSONRPCResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string jsonrpc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_jsonrpc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.JSONRPCResponse.jsonrpc"));
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.JSONRPCResponse.id"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.Result result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JSONRPCResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.JSONRPCResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string jsonrpc = 1;
  if (!this->_internal_jsonrpc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jsonrpc().data(), static_cast<int>(this->_internal_jsonrpc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.JSONRPCResponse.jsonrpc");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_jsonrpc(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.JSONRPCResponse.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // .mcp.Result result = 3;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.JSONRPCResponse)
  return target;
}

size_t JSONRPCResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.JSONRPCResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string jsonrpc = 1;
  if (!this->_internal_jsonrpc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jsonrpc());
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .mcp.Result result = 3;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JSONRPCResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JSONRPCResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JSONRPCResponse::GetClassData() const { return &_class_data_; }


void JSONRPCResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JSONRPCResponse*>(&to_msg);
  auto& from = static_cast<const JSONRPCResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.JSONRPCResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_jsonrpc().empty()) {
    _this->_internal_set_jsonrpc(from._internal_jsonrpc());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_result()) {
    _this->_internal_mutable_result()->::mcp::Result::MergeFrom(
        from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JSONRPCResponse::CopyFrom(const JSONRPCResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.JSONRPCResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JSONRPCResponse::IsInitialized() const {
  return true;
}

void JSONRPCResponse::InternalSwap(JSONRPCResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jsonrpc_, lhs_arena,
      &other->_impl_.jsonrpc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JSONRPCResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[3]);
}

// ===================================================================

class JSONRPCError::_Internal {
 public:
  static const ::mcp::Error& error(const JSONRPCError* msg);
};

const ::mcp::Error&
JSONRPCError::_Internal::error(const JSONRPCError* msg) {
  return *msg->_impl_.error_;
}
JSONRPCError::JSONRPCError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.JSONRPCError)
}
JSONRPCError::JSONRPCError(const JSONRPCError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JSONRPCError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.jsonrpc_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.jsonrpc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jsonrpc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_jsonrpc().empty()) {
    _this->_impl_.jsonrpc_.Set(from._internal_jsonrpc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::mcp::Error(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.JSONRPCError)
}

inline void JSONRPCError::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.jsonrpc_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.jsonrpc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jsonrpc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JSONRPCError::~JSONRPCError() {
  // @@protoc_insertion_point(destructor:mcp.JSONRPCError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JSONRPCError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.jsonrpc_.Destroy();
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.error_;
}

void JSONRPCError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JSONRPCError::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.JSONRPCError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.jsonrpc_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JSONRPCError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string jsonrpc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_jsonrpc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.JSONRPCError.jsonrpc"));
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.JSONRPCError.id"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.Error error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JSONRPCError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.JSONRPCError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string jsonrpc = 1;
  if (!this->_internal_jsonrpc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jsonrpc().data(), static_cast<int>(this->_internal_jsonrpc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.JSONRPCError.jsonrpc");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_jsonrpc(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.JSONRPCError.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // .mcp.Error error = 3;
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.JSONRPCError)
  return target;
}

size_t JSONRPCError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.JSONRPCError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string jsonrpc = 1;
  if (!this->_internal_jsonrpc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jsonrpc());
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .mcp.Error error = 3;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JSONRPCError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JSONRPCError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JSONRPCError::GetClassData() const { return &_class_data_; }


void JSONRPCError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JSONRPCError*>(&to_msg);
  auto& from = static_cast<const JSONRPCError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.JSONRPCError)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_jsonrpc().empty()) {
    _this->_internal_set_jsonrpc(from._internal_jsonrpc());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::mcp::Error::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JSONRPCError::CopyFrom(const JSONRPCError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.JSONRPCError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JSONRPCError::IsInitialized() const {
  return true;
}

void JSONRPCError::InternalSwap(JSONRPCError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jsonrpc_, lhs_arena,
      &other->_impl_.jsonrpc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JSONRPCError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[4]);
}

// ===================================================================

class JSONRPCBatchRequest::_Internal {
 public:
};

JSONRPCBatchRequest::JSONRPCBatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.JSONRPCBatchRequest)
}
JSONRPCBatchRequest::JSONRPCBatchRequest(const JSONRPCBatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JSONRPCBatchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.requests_){from._impl_.requests_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mcp.JSONRPCBatchRequest)
}

inline void JSONRPCBatchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.requests_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

JSONRPCBatchRequest::~JSONRPCBatchRequest() {
  // @@protoc_insertion_point(destructor:mcp.JSONRPCBatchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JSONRPCBatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.requests_.~RepeatedPtrField();
}

void JSONRPCBatchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JSONRPCBatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.JSONRPCBatchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.requests_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JSONRPCBatchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mcp.JSONRPCRequest requests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JSONRPCBatchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.JSONRPCBatchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mcp.JSONRPCRequest requests = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_requests_size()); i < n; i++) {
    const auto& repfield = this->_internal_requests(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.JSONRPCBatchRequest)
  return target;
}

size_t JSONRPCBatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.JSONRPCBatchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcp.JSONRPCRequest requests = 1;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->_impl_.requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JSONRPCBatchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JSONRPCBatchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JSONRPCBatchRequest::GetClassData() const { return &_class_data_; }


void JSONRPCBatchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JSONRPCBatchRequest*>(&to_msg);
  auto& from = static_cast<const JSONRPCBatchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.JSONRPCBatchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.requests_.MergeFrom(from._impl_.requests_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JSONRPCBatchRequest::CopyFrom(const JSONRPCBatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.JSONRPCBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JSONRPCBatchRequest::IsInitialized() const {
  return true;
}

void JSONRPCBatchRequest::InternalSwap(JSONRPCBatchRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.requests_.InternalSwap(&other->_impl_.requests_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JSONRPCBatchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[5]);
}

// ===================================================================

class JSONRPCBatchResponse::_Internal {
 public:
};

JSONRPCBatchResponse::JSONRPCBatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.JSONRPCBatchResponse)
}
JSONRPCBatchResponse::JSONRPCBatchResponse(const JSONRPCBatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JSONRPCBatchResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.responses_){from._impl_.responses_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mcp.JSONRPCBatchResponse)
}

inline void JSONRPCBatchResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.responses_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

JSONRPCBatchResponse::~JSONRPCBatchResponse() {
  // @@protoc_insertion_point(destructor:mcp.JSONRPCBatchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JSONRPCBatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.responses_.~RepeatedPtrField();
}

void JSONRPCBatchResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JSONRPCBatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.JSONRPCBatchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.responses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JSONRPCBatchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mcp.JSONRPCResponse responses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JSONRPCBatchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.JSONRPCBatchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mcp.JSONRPCResponse responses = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_responses_size()); i < n; i++) {
    const auto& repfield = this->_internal_responses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.JSONRPCBatchResponse)
  return target;
}

size_t JSONRPCBatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.JSONRPCBatchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcp.JSONRPCResponse responses = 1;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->_impl_.responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JSONRPCBatchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JSONRPCBatchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JSONRPCBatchResponse::GetClassData() const { return &_class_data_; }


void JSONRPCBatchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JSONRPCBatchResponse*>(&to_msg);
  auto& from = static_cast<const JSONRPCBatchResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.JSONRPCBatchResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.responses_.MergeFrom(from._impl_.responses_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JSONRPCBatchResponse::CopyFrom(const JSONRPCBatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.JSONRPCBatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JSONRPCBatchResponse::IsInitialized() const {
  return true;
}

void JSONRPCBatchResponse::InternalSwap(JSONRPCBatchResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.responses_.InternalSwap(&other->_impl_.responses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JSONRPCBatchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[6]);
}

// ===================================================================

RequestParams_AdditionalParamsEntry_DoNotUse::RequestParams_AdditionalParamsEntry_DoNotUse() {}
RequestParams_AdditionalParamsEntry_DoNotUse::RequestParams_AdditionalParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RequestParams_AdditionalParamsEntry_DoNotUse::MergeFrom(const RequestParams_AdditionalParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RequestParams_AdditionalParamsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[7]);
}

// ===================================================================

class RequestParams::_Internal {
 public:
  static const ::mcp::MetaParams& _meta(const RequestParams* msg);
};

const ::mcp::MetaParams&
RequestParams::_Internal::_meta(const RequestParams* msg) {
  return *msg->_impl_._meta_;
}
RequestParams::RequestParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &RequestParams::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:mcp.RequestParams)
}
RequestParams::RequestParams(const RequestParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.additional_params_)*/{}
    , decltype(_impl_._meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.additional_params_.MergeFrom(from._impl_.additional_params_);
  if (from._internal_has__meta()) {
    _this->_impl_._meta_ = new ::mcp::MetaParams(*from._impl_._meta_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.RequestParams)
}

inline void RequestParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.additional_params_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestParams::~RequestParams() {
  // @@protoc_insertion_point(destructor:mcp.RequestParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void RequestParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.additional_params_.Destruct();
  _impl_.additional_params_.~MapField();
  if (this != internal_default_instance()) delete _impl_._meta_;
}

void RequestParams::ArenaDtor(void* object) {
  RequestParams* _this = reinterpret_cast< RequestParams* >(object);
  _this->_impl_.additional_params_.Destruct();
}
void RequestParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestParams::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.RequestParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_params_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_._meta_ != nullptr) {
    delete _impl_._meta_;
  }
  _impl_._meta_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcp.MetaParams _meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable__meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> additional_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.additional_params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.RequestParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcp.MetaParams _meta = 1;
  if (this->_internal_has__meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::_meta(this),
        _Internal::_meta(this).GetCachedSize(), target, stream);
  }

  // map<string, bytes> additional_params = 2;
  if (!this->_internal_additional_params().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = RequestParams_AdditionalParamsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_additional_params();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "mcp.RequestParams.AdditionalParamsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.RequestParams)
  return target;
}

size_t RequestParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.RequestParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> additional_params = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_additional_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_additional_params().begin();
      it != this->_internal_additional_params().end(); ++it) {
    total_size += RequestParams_AdditionalParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .mcp.MetaParams _meta = 1;
  if (this->_internal_has__meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_._meta_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestParams::GetClassData() const { return &_class_data_; }


void RequestParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestParams*>(&to_msg);
  auto& from = static_cast<const RequestParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.RequestParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.additional_params_.MergeFrom(from._impl_.additional_params_);
  if (from._internal_has__meta()) {
    _this->_internal_mutable__meta()->::mcp::MetaParams::MergeFrom(
        from._internal__meta());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestParams::CopyFrom(const RequestParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.RequestParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestParams::IsInitialized() const {
  return true;
}

void RequestParams::InternalSwap(RequestParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.additional_params_.InternalSwap(&other->_impl_.additional_params_);
  swap(_impl_._meta_, other->_impl_._meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[8]);
}

// ===================================================================

NotificationParams_AdditionalParamsEntry_DoNotUse::NotificationParams_AdditionalParamsEntry_DoNotUse() {}
NotificationParams_AdditionalParamsEntry_DoNotUse::NotificationParams_AdditionalParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NotificationParams_AdditionalParamsEntry_DoNotUse::MergeFrom(const NotificationParams_AdditionalParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NotificationParams_AdditionalParamsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[9]);
}

// ===================================================================

class NotificationParams::_Internal {
 public:
  static const ::mcp::MetaParams& _meta(const NotificationParams* msg);
};

const ::mcp::MetaParams&
NotificationParams::_Internal::_meta(const NotificationParams* msg) {
  return *msg->_impl_._meta_;
}
NotificationParams::NotificationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &NotificationParams::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:mcp.NotificationParams)
}
NotificationParams::NotificationParams(const NotificationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotificationParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.additional_params_)*/{}
    , decltype(_impl_._meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.additional_params_.MergeFrom(from._impl_.additional_params_);
  if (from._internal_has__meta()) {
    _this->_impl_._meta_ = new ::mcp::MetaParams(*from._impl_._meta_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.NotificationParams)
}

inline void NotificationParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.additional_params_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NotificationParams::~NotificationParams() {
  // @@protoc_insertion_point(destructor:mcp.NotificationParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void NotificationParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.additional_params_.Destruct();
  _impl_.additional_params_.~MapField();
  if (this != internal_default_instance()) delete _impl_._meta_;
}

void NotificationParams::ArenaDtor(void* object) {
  NotificationParams* _this = reinterpret_cast< NotificationParams* >(object);
  _this->_impl_.additional_params_.Destruct();
}
void NotificationParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotificationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.NotificationParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_params_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_._meta_ != nullptr) {
    delete _impl_._meta_;
  }
  _impl_._meta_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotificationParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcp.MetaParams _meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable__meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> additional_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.additional_params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotificationParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.NotificationParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcp.MetaParams _meta = 1;
  if (this->_internal_has__meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::_meta(this),
        _Internal::_meta(this).GetCachedSize(), target, stream);
  }

  // map<string, bytes> additional_params = 2;
  if (!this->_internal_additional_params().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = NotificationParams_AdditionalParamsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_additional_params();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "mcp.NotificationParams.AdditionalParamsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.NotificationParams)
  return target;
}

size_t NotificationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.NotificationParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> additional_params = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_additional_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_additional_params().begin();
      it != this->_internal_additional_params().end(); ++it) {
    total_size += NotificationParams_AdditionalParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .mcp.MetaParams _meta = 1;
  if (this->_internal_has__meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_._meta_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotificationParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotificationParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotificationParams::GetClassData() const { return &_class_data_; }


void NotificationParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotificationParams*>(&to_msg);
  auto& from = static_cast<const NotificationParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.NotificationParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.additional_params_.MergeFrom(from._impl_.additional_params_);
  if (from._internal_has__meta()) {
    _this->_internal_mutable__meta()->::mcp::MetaParams::MergeFrom(
        from._internal__meta());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotificationParams::CopyFrom(const NotificationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.NotificationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationParams::IsInitialized() const {
  return true;
}

void NotificationParams::InternalSwap(NotificationParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.additional_params_.InternalSwap(&other->_impl_.additional_params_);
  swap(_impl_._meta_, other->_impl_._meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotificationParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[10]);
}

// ===================================================================

MetaParams_AdditionalMetaEntry_DoNotUse::MetaParams_AdditionalMetaEntry_DoNotUse() {}
MetaParams_AdditionalMetaEntry_DoNotUse::MetaParams_AdditionalMetaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MetaParams_AdditionalMetaEntry_DoNotUse::MergeFrom(const MetaParams_AdditionalMetaEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MetaParams_AdditionalMetaEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[11]);
}

// ===================================================================

class MetaParams::_Internal {
 public:
};

MetaParams::MetaParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &MetaParams::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:mcp.MetaParams)
}
MetaParams::MetaParams(const MetaParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetaParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.additional_meta_)*/{}
    , decltype(_impl_.progress_token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.additional_meta_.MergeFrom(from._impl_.additional_meta_);
  _impl_.progress_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.progress_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_progress_token().empty()) {
    _this->_impl_.progress_token_.Set(from._internal_progress_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcp.MetaParams)
}

inline void MetaParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.additional_meta_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.progress_token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.progress_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.progress_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MetaParams::~MetaParams() {
  // @@protoc_insertion_point(destructor:mcp.MetaParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void MetaParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.additional_meta_.Destruct();
  _impl_.additional_meta_.~MapField();
  _impl_.progress_token_.Destroy();
}

void MetaParams::ArenaDtor(void* object) {
  MetaParams* _this = reinterpret_cast< MetaParams* >(object);
  _this->_impl_.additional_meta_.Destruct();
}
void MetaParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetaParams::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.MetaParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_meta_.Clear();
  _impl_.progress_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetaParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string progress_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_progress_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.MetaParams.progress_token"));
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> additional_meta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.additional_meta_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetaParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.MetaParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string progress_token = 1;
  if (!this->_internal_progress_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_progress_token().data(), static_cast<int>(this->_internal_progress_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.MetaParams.progress_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_progress_token(), target);
  }

  // map<string, bytes> additional_meta = 2;
  if (!this->_internal_additional_meta().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = MetaParams_AdditionalMetaEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_additional_meta();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "mcp.MetaParams.AdditionalMetaEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.MetaParams)
  return target;
}

size_t MetaParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.MetaParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> additional_meta = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_additional_meta_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_additional_meta().begin();
      it != this->_internal_additional_meta().end(); ++it) {
    total_size += MetaParams_AdditionalMetaEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string progress_token = 1;
  if (!this->_internal_progress_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_progress_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetaParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetaParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetaParams::GetClassData() const { return &_class_data_; }


void MetaParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetaParams*>(&to_msg);
  auto& from = static_cast<const MetaParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.MetaParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.additional_meta_.MergeFrom(from._impl_.additional_meta_);
  if (!from._internal_progress_token().empty()) {
    _this->_internal_set_progress_token(from._internal_progress_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetaParams::CopyFrom(const MetaParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.MetaParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaParams::IsInitialized() const {
  return true;
}

void MetaParams::InternalSwap(MetaParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.additional_meta_.InternalSwap(&other->_impl_.additional_meta_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.progress_token_, lhs_arena,
      &other->_impl_.progress_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[12]);
}

// ===================================================================

Result_AdditionalResultEntry_DoNotUse::Result_AdditionalResultEntry_DoNotUse() {}
Result_AdditionalResultEntry_DoNotUse::Result_AdditionalResultEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Result_AdditionalResultEntry_DoNotUse::MergeFrom(const Result_AdditionalResultEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Result_AdditionalResultEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[13]);
}

// ===================================================================

class Result::_Internal {
 public:
  static const ::mcp::MetaResult& _meta(const Result* msg);
};

const ::mcp::MetaResult&
Result::_Internal::_meta(const Result* msg) {
  return *msg->_impl_._meta_;
}
Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Result::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:mcp.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Result* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.additional_result_)*/{}
    , decltype(_impl_._meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.additional_result_.MergeFrom(from._impl_.additional_result_);
  if (from._internal_has__meta()) {
    _this->_impl_._meta_ = new ::mcp::MetaResult(*from._impl_._meta_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.Result)
}

inline void Result::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.additional_result_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:mcp.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.additional_result_.Destruct();
  _impl_.additional_result_.~MapField();
  if (this != internal_default_instance()) delete _impl_._meta_;
}

void Result::ArenaDtor(void* object) {
  Result* _this = reinterpret_cast< Result* >(object);
  _this->_impl_.additional_result_.Destruct();
}
void Result::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_result_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_._meta_ != nullptr) {
    delete _impl_._meta_;
  }
  _impl_._meta_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcp.MetaResult _meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable__meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> additional_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.additional_result_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcp.MetaResult _meta = 1;
  if (this->_internal_has__meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::_meta(this),
        _Internal::_meta(this).GetCachedSize(), target, stream);
  }

  // map<string, bytes> additional_result = 2;
  if (!this->_internal_additional_result().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Result_AdditionalResultEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_additional_result();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "mcp.Result.AdditionalResultEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> additional_result = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_additional_result_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_additional_result().begin();
      it != this->_internal_additional_result().end(); ++it) {
    total_size += Result_AdditionalResultEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .mcp.MetaResult _meta = 1;
  if (this->_internal_has__meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_._meta_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Result::GetClassData() const { return &_class_data_; }


void Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Result*>(&to_msg);
  auto& from = static_cast<const Result&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.Result)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.additional_result_.MergeFrom(from._impl_.additional_result_);
  if (from._internal_has__meta()) {
    _this->_internal_mutable__meta()->::mcp::MetaResult::MergeFrom(
        from._internal__meta());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.additional_result_.InternalSwap(&other->_impl_.additional_result_);
  swap(_impl_._meta_, other->_impl_._meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[14]);
}

// ===================================================================

MetaResult_AdditionalMetaEntry_DoNotUse::MetaResult_AdditionalMetaEntry_DoNotUse() {}
MetaResult_AdditionalMetaEntry_DoNotUse::MetaResult_AdditionalMetaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MetaResult_AdditionalMetaEntry_DoNotUse::MergeFrom(const MetaResult_AdditionalMetaEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MetaResult_AdditionalMetaEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[15]);
}

// ===================================================================

class MetaResult::_Internal {
 public:
};

MetaResult::MetaResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &MetaResult::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:mcp.MetaResult)
}
MetaResult::MetaResult(const MetaResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetaResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.additional_meta_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.additional_meta_.MergeFrom(from._impl_.additional_meta_);
  // @@protoc_insertion_point(copy_constructor:mcp.MetaResult)
}

inline void MetaResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.additional_meta_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MetaResult::~MetaResult() {
  // @@protoc_insertion_point(destructor:mcp.MetaResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void MetaResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.additional_meta_.Destruct();
  _impl_.additional_meta_.~MapField();
}

void MetaResult::ArenaDtor(void* object) {
  MetaResult* _this = reinterpret_cast< MetaResult* >(object);
  _this->_impl_.additional_meta_.Destruct();
}
void MetaResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetaResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.MetaResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_meta_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetaResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, bytes> additional_meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.additional_meta_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetaResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.MetaResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bytes> additional_meta = 1;
  if (!this->_internal_additional_meta().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = MetaResult_AdditionalMetaEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_additional_meta();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "mcp.MetaResult.AdditionalMetaEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.MetaResult)
  return target;
}

size_t MetaResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.MetaResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> additional_meta = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_additional_meta_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_additional_meta().begin();
      it != this->_internal_additional_meta().end(); ++it) {
    total_size += MetaResult_AdditionalMetaEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetaResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetaResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetaResult::GetClassData() const { return &_class_data_; }


void MetaResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetaResult*>(&to_msg);
  auto& from = static_cast<const MetaResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.MetaResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.additional_meta_.MergeFrom(from._impl_.additional_meta_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetaResult::CopyFrom(const MetaResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.MetaResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaResult::IsInitialized() const {
  return true;
}

void MetaResult::InternalSwap(MetaResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.additional_meta_.InternalSwap(&other->_impl_.additional_meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[16]);
}

// ===================================================================

class Error::_Internal {
 public:
};

Error::Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Error* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:mcp.Error)
}

inline void Error::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:mcp.Error)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Error::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.data_.Destroy();
}

void Error::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.Error)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Error::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.Error.message"));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Error::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.Error)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.Error.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.Error)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Error::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Error::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Error::GetClassData() const { return &_class_data_; }


void Error::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Error*>(&to_msg);
  auto& from = static_cast<const Error&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.Error)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[17]);
}

// ===================================================================

class Implementation::_Internal {
 public:
};

Implementation::Implementation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.Implementation)
}
Implementation::Implementation(const Implementation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Implementation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcp.Implementation)
}

inline void Implementation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Implementation::~Implementation() {
  // @@protoc_insertion_point(destructor:mcp.Implementation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Implementation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
}

void Implementation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Implementation::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.Implementation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Implementation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.Implementation.name"));
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.Implementation.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Implementation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.Implementation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.Implementation.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.Implementation.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.Implementation)
  return target;
}

size_t Implementation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.Implementation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Implementation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Implementation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Implementation::GetClassData() const { return &_class_data_; }


void Implementation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Implementation*>(&to_msg);
  auto& from = static_cast<const Implementation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.Implementation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Implementation::CopyFrom(const Implementation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.Implementation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Implementation::IsInitialized() const {
  return true;
}

void Implementation::InternalSwap(Implementation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Implementation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[18]);
}

// ===================================================================

ClientCapabilities_ExperimentalEntry_DoNotUse::ClientCapabilities_ExperimentalEntry_DoNotUse() {}
ClientCapabilities_ExperimentalEntry_DoNotUse::ClientCapabilities_ExperimentalEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ClientCapabilities_ExperimentalEntry_DoNotUse::MergeFrom(const ClientCapabilities_ExperimentalEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ClientCapabilities_ExperimentalEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[19]);
}

// ===================================================================

class ClientCapabilities::_Internal {
 public:
  static const ::mcp::RootsCapability& roots(const ClientCapabilities* msg);
  static const ::mcp::SamplingCapability& sampling(const ClientCapabilities* msg);
};

const ::mcp::RootsCapability&
ClientCapabilities::_Internal::roots(const ClientCapabilities* msg) {
  return *msg->_impl_.roots_;
}
const ::mcp::SamplingCapability&
ClientCapabilities::_Internal::sampling(const ClientCapabilities* msg) {
  return *msg->_impl_.sampling_;
}
ClientCapabilities::ClientCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ClientCapabilities::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:mcp.ClientCapabilities)
}
ClientCapabilities::ClientCapabilities(const ClientCapabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientCapabilities* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.experimental_)*/{}
    , decltype(_impl_.roots_){nullptr}
    , decltype(_impl_.sampling_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.experimental_.MergeFrom(from._impl_.experimental_);
  if (from._internal_has_roots()) {
    _this->_impl_.roots_ = new ::mcp::RootsCapability(*from._impl_.roots_);
  }
  if (from._internal_has_sampling()) {
    _this->_impl_.sampling_ = new ::mcp::SamplingCapability(*from._impl_.sampling_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.ClientCapabilities)
}

inline void ClientCapabilities::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.experimental_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.roots_){nullptr}
    , decltype(_impl_.sampling_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClientCapabilities::~ClientCapabilities() {
  // @@protoc_insertion_point(destructor:mcp.ClientCapabilities)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ClientCapabilities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.experimental_.Destruct();
  _impl_.experimental_.~MapField();
  if (this != internal_default_instance()) delete _impl_.roots_;
  if (this != internal_default_instance()) delete _impl_.sampling_;
}

void ClientCapabilities::ArenaDtor(void* object) {
  ClientCapabilities* _this = reinterpret_cast< ClientCapabilities* >(object);
  _this->_impl_.experimental_.Destruct();
}
void ClientCapabilities::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientCapabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ClientCapabilities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.experimental_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.roots_ != nullptr) {
    delete _impl_.roots_;
  }
  _impl_.roots_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sampling_ != nullptr) {
    delete _impl_.sampling_;
  }
  _impl_.sampling_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientCapabilities::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, bytes> experimental = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.experimental_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .mcp.RootsCapability roots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roots(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mcp.SamplingCapability sampling = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sampling(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientCapabilities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ClientCapabilities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bytes> experimental = 1;
  if (!this->_internal_experimental().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ClientCapabilities_ExperimentalEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_experimental();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "mcp.ClientCapabilities.ExperimentalEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .mcp.RootsCapability roots = 2;
  if (this->_internal_has_roots()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::roots(this),
        _Internal::roots(this).GetCachedSize(), target, stream);
  }

  // .mcp.SamplingCapability sampling = 3;
  if (this->_internal_has_sampling()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sampling(this),
        _Internal::sampling(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ClientCapabilities)
  return target;
}

size_t ClientCapabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ClientCapabilities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> experimental = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_experimental_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_experimental().begin();
      it != this->_internal_experimental().end(); ++it) {
    total_size += ClientCapabilities_ExperimentalEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .mcp.RootsCapability roots = 2;
  if (this->_internal_has_roots()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.roots_);
  }

  // .mcp.SamplingCapability sampling = 3;
  if (this->_internal_has_sampling()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sampling_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientCapabilities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientCapabilities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientCapabilities::GetClassData() const { return &_class_data_; }


void ClientCapabilities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientCapabilities*>(&to_msg);
  auto& from = static_cast<const ClientCapabilities&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ClientCapabilities)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.experimental_.MergeFrom(from._impl_.experimental_);
  if (from._internal_has_roots()) {
    _this->_internal_mutable_roots()->::mcp::RootsCapability::MergeFrom(
        from._internal_roots());
  }
  if (from._internal_has_sampling()) {
    _this->_internal_mutable_sampling()->::mcp::SamplingCapability::MergeFrom(
        from._internal_sampling());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientCapabilities::CopyFrom(const ClientCapabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ClientCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCapabilities::IsInitialized() const {
  return true;
}

void ClientCapabilities::InternalSwap(ClientCapabilities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.experimental_.InternalSwap(&other->_impl_.experimental_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientCapabilities, _impl_.sampling_)
      + sizeof(ClientCapabilities::_impl_.sampling_)
      - PROTOBUF_FIELD_OFFSET(ClientCapabilities, _impl_.roots_)>(
          reinterpret_cast<char*>(&_impl_.roots_),
          reinterpret_cast<char*>(&other->_impl_.roots_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientCapabilities::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[20]);
}

// ===================================================================

ServerCapabilities_ExperimentalEntry_DoNotUse::ServerCapabilities_ExperimentalEntry_DoNotUse() {}
ServerCapabilities_ExperimentalEntry_DoNotUse::ServerCapabilities_ExperimentalEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ServerCapabilities_ExperimentalEntry_DoNotUse::MergeFrom(const ServerCapabilities_ExperimentalEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ServerCapabilities_ExperimentalEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[21]);
}

// ===================================================================

class ServerCapabilities::_Internal {
 public:
  static const ::mcp::LoggingCapability& logging(const ServerCapabilities* msg);
  static const ::mcp::CompletionsCapability& completions(const ServerCapabilities* msg);
  static const ::mcp::PromptsCapability& prompts(const ServerCapabilities* msg);
  static const ::mcp::ResourcesCapability& resources(const ServerCapabilities* msg);
  static const ::mcp::ToolsCapability& tools(const ServerCapabilities* msg);
};

const ::mcp::LoggingCapability&
ServerCapabilities::_Internal::logging(const ServerCapabilities* msg) {
  return *msg->_impl_.logging_;
}
const ::mcp::CompletionsCapability&
ServerCapabilities::_Internal::completions(const ServerCapabilities* msg) {
  return *msg->_impl_.completions_;
}
const ::mcp::PromptsCapability&
ServerCapabilities::_Internal::prompts(const ServerCapabilities* msg) {
  return *msg->_impl_.prompts_;
}
const ::mcp::ResourcesCapability&
ServerCapabilities::_Internal::resources(const ServerCapabilities* msg) {
  return *msg->_impl_.resources_;
}
const ::mcp::ToolsCapability&
ServerCapabilities::_Internal::tools(const ServerCapabilities* msg) {
  return *msg->_impl_.tools_;
}
ServerCapabilities::ServerCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ServerCapabilities::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:mcp.ServerCapabilities)
}
ServerCapabilities::ServerCapabilities(const ServerCapabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerCapabilities* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.experimental_)*/{}
    , decltype(_impl_.logging_){nullptr}
    , decltype(_impl_.completions_){nullptr}
    , decltype(_impl_.prompts_){nullptr}
    , decltype(_impl_.resources_){nullptr}
    , decltype(_impl_.tools_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.experimental_.MergeFrom(from._impl_.experimental_);
  if (from._internal_has_logging()) {
    _this->_impl_.logging_ = new ::mcp::LoggingCapability(*from._impl_.logging_);
  }
  if (from._internal_has_completions()) {
    _this->_impl_.completions_ = new ::mcp::CompletionsCapability(*from._impl_.completions_);
  }
  if (from._internal_has_prompts()) {
    _this->_impl_.prompts_ = new ::mcp::PromptsCapability(*from._impl_.prompts_);
  }
  if (from._internal_has_resources()) {
    _this->_impl_.resources_ = new ::mcp::ResourcesCapability(*from._impl_.resources_);
  }
  if (from._internal_has_tools()) {
    _this->_impl_.tools_ = new ::mcp::ToolsCapability(*from._impl_.tools_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.ServerCapabilities)
}

inline void ServerCapabilities::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.experimental_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.logging_){nullptr}
    , decltype(_impl_.completions_){nullptr}
    , decltype(_impl_.prompts_){nullptr}
    , decltype(_impl_.resources_){nullptr}
    , decltype(_impl_.tools_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerCapabilities::~ServerCapabilities() {
  // @@protoc_insertion_point(destructor:mcp.ServerCapabilities)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ServerCapabilities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.experimental_.Destruct();
  _impl_.experimental_.~MapField();
  if (this != internal_default_instance()) delete _impl_.logging_;
  if (this != internal_default_instance()) delete _impl_.completions_;
  if (this != internal_default_instance()) delete _impl_.prompts_;
  if (this != internal_default_instance()) delete _impl_.resources_;
  if (this != internal_default_instance()) delete _impl_.tools_;
}

void ServerCapabilities::ArenaDtor(void* object) {
  ServerCapabilities* _this = reinterpret_cast< ServerCapabilities* >(object);
  _this->_impl_.experimental_.Destruct();
}
void ServerCapabilities::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerCapabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ServerCapabilities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.experimental_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.logging_ != nullptr) {
    delete _impl_.logging_;
  }
  _impl_.logging_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.completions_ != nullptr) {
    delete _impl_.completions_;
  }
  _impl_.completions_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.prompts_ != nullptr) {
    delete _impl_.prompts_;
  }
  _impl_.prompts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.resources_ != nullptr) {
    delete _impl_.resources_;
  }
  _impl_.resources_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tools_ != nullptr) {
    delete _impl_.tools_;
  }
  _impl_.tools_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerCapabilities::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, bytes> experimental = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.experimental_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .mcp.LoggingCapability logging = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_logging(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mcp.CompletionsCapability completions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_completions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mcp.PromptsCapability prompts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_prompts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mcp.ResourcesCapability resources = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_resources(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mcp.ToolsCapability tools = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tools(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerCapabilities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ServerCapabilities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bytes> experimental = 1;
  if (!this->_internal_experimental().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ServerCapabilities_ExperimentalEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_experimental();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "mcp.ServerCapabilities.ExperimentalEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .mcp.LoggingCapability logging = 2;
  if (this->_internal_has_logging()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::logging(this),
        _Internal::logging(this).GetCachedSize(), target, stream);
  }

  // .mcp.CompletionsCapability completions = 3;
  if (this->_internal_has_completions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::completions(this),
        _Internal::completions(this).GetCachedSize(), target, stream);
  }

  // .mcp.PromptsCapability prompts = 4;
  if (this->_internal_has_prompts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::prompts(this),
        _Internal::prompts(this).GetCachedSize(), target, stream);
  }

  // .mcp.ResourcesCapability resources = 5;
  if (this->_internal_has_resources()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::resources(this),
        _Internal::resources(this).GetCachedSize(), target, stream);
  }

  // .mcp.ToolsCapability tools = 6;
  if (this->_internal_has_tools()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tools(this),
        _Internal::tools(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ServerCapabilities)
  return target;
}

size_t ServerCapabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ServerCapabilities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> experimental = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_experimental_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_experimental().begin();
      it != this->_internal_experimental().end(); ++it) {
    total_size += ServerCapabilities_ExperimentalEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .mcp.LoggingCapability logging = 2;
  if (this->_internal_has_logging()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.logging_);
  }

  // .mcp.CompletionsCapability completions = 3;
  if (this->_internal_has_completions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.completions_);
  }

  // .mcp.PromptsCapability prompts = 4;
  if (this->_internal_has_prompts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prompts_);
  }

  // .mcp.ResourcesCapability resources = 5;
  if (this->_internal_has_resources()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resources_);
  }

  // .mcp.ToolsCapability tools = 6;
  if (this->_internal_has_tools()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tools_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerCapabilities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerCapabilities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerCapabilities::GetClassData() const { return &_class_data_; }


void ServerCapabilities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerCapabilities*>(&to_msg);
  auto& from = static_cast<const ServerCapabilities&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ServerCapabilities)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.experimental_.MergeFrom(from._impl_.experimental_);
  if (from._internal_has_logging()) {
    _this->_internal_mutable_logging()->::mcp::LoggingCapability::MergeFrom(
        from._internal_logging());
  }
  if (from._internal_has_completions()) {
    _this->_internal_mutable_completions()->::mcp::CompletionsCapability::MergeFrom(
        from._internal_completions());
  }
  if (from._internal_has_prompts()) {
    _this->_internal_mutable_prompts()->::mcp::PromptsCapability::MergeFrom(
        from._internal_prompts());
  }
  if (from._internal_has_resources()) {
    _this->_internal_mutable_resources()->::mcp::ResourcesCapability::MergeFrom(
        from._internal_resources());
  }
  if (from._internal_has_tools()) {
    _this->_internal_mutable_tools()->::mcp::ToolsCapability::MergeFrom(
        from._internal_tools());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerCapabilities::CopyFrom(const ServerCapabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ServerCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerCapabilities::IsInitialized() const {
  return true;
}

void ServerCapabilities::InternalSwap(ServerCapabilities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.experimental_.InternalSwap(&other->_impl_.experimental_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerCapabilities, _impl_.tools_)
      + sizeof(ServerCapabilities::_impl_.tools_)
      - PROTOBUF_FIELD_OFFSET(ServerCapabilities, _impl_.logging_)>(
          reinterpret_cast<char*>(&_impl_.logging_),
          reinterpret_cast<char*>(&other->_impl_.logging_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerCapabilities::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[22]);
}

// ===================================================================

class RootsCapability::_Internal {
 public:
};

RootsCapability::RootsCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.RootsCapability)
}
RootsCapability::RootsCapability(const RootsCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RootsCapability* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_changed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.list_changed_ = from._impl_.list_changed_;
  // @@protoc_insertion_point(copy_constructor:mcp.RootsCapability)
}

inline void RootsCapability::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_changed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RootsCapability::~RootsCapability() {
  // @@protoc_insertion_point(destructor:mcp.RootsCapability)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RootsCapability::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RootsCapability::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RootsCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.RootsCapability)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_changed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RootsCapability::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool list_changed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.list_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RootsCapability::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.RootsCapability)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool list_changed = 1;
  if (this->_internal_list_changed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_list_changed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.RootsCapability)
  return target;
}

size_t RootsCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.RootsCapability)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool list_changed = 1;
  if (this->_internal_list_changed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RootsCapability::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RootsCapability::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RootsCapability::GetClassData() const { return &_class_data_; }


void RootsCapability::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RootsCapability*>(&to_msg);
  auto& from = static_cast<const RootsCapability&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.RootsCapability)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_list_changed() != 0) {
    _this->_internal_set_list_changed(from._internal_list_changed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RootsCapability::CopyFrom(const RootsCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.RootsCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RootsCapability::IsInitialized() const {
  return true;
}

void RootsCapability::InternalSwap(RootsCapability* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.list_changed_, other->_impl_.list_changed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RootsCapability::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[23]);
}

// ===================================================================

class SamplingCapability::_Internal {
 public:
};

SamplingCapability::SamplingCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mcp.SamplingCapability)
}
SamplingCapability::SamplingCapability(const SamplingCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SamplingCapability* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mcp.SamplingCapability)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SamplingCapability::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SamplingCapability::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SamplingCapability::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[24]);
}

// ===================================================================

class LoggingCapability::_Internal {
 public:
};

LoggingCapability::LoggingCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mcp.LoggingCapability)
}
LoggingCapability::LoggingCapability(const LoggingCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  LoggingCapability* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mcp.LoggingCapability)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoggingCapability::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoggingCapability::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata LoggingCapability::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[25]);
}

// ===================================================================

class CompletionsCapability::_Internal {
 public:
};

CompletionsCapability::CompletionsCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mcp.CompletionsCapability)
}
CompletionsCapability::CompletionsCapability(const CompletionsCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CompletionsCapability* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mcp.CompletionsCapability)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompletionsCapability::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompletionsCapability::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CompletionsCapability::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[26]);
}

// ===================================================================

class PromptsCapability::_Internal {
 public:
};

PromptsCapability::PromptsCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.PromptsCapability)
}
PromptsCapability::PromptsCapability(const PromptsCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PromptsCapability* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_changed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.list_changed_ = from._impl_.list_changed_;
  // @@protoc_insertion_point(copy_constructor:mcp.PromptsCapability)
}

inline void PromptsCapability::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_changed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PromptsCapability::~PromptsCapability() {
  // @@protoc_insertion_point(destructor:mcp.PromptsCapability)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PromptsCapability::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PromptsCapability::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PromptsCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.PromptsCapability)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_changed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PromptsCapability::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool list_changed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.list_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PromptsCapability::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.PromptsCapability)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool list_changed = 1;
  if (this->_internal_list_changed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_list_changed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.PromptsCapability)
  return target;
}

size_t PromptsCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.PromptsCapability)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool list_changed = 1;
  if (this->_internal_list_changed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PromptsCapability::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PromptsCapability::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PromptsCapability::GetClassData() const { return &_class_data_; }


void PromptsCapability::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PromptsCapability*>(&to_msg);
  auto& from = static_cast<const PromptsCapability&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.PromptsCapability)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_list_changed() != 0) {
    _this->_internal_set_list_changed(from._internal_list_changed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PromptsCapability::CopyFrom(const PromptsCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.PromptsCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PromptsCapability::IsInitialized() const {
  return true;
}

void PromptsCapability::InternalSwap(PromptsCapability* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.list_changed_, other->_impl_.list_changed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PromptsCapability::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[27]);
}

// ===================================================================

class ResourcesCapability::_Internal {
 public:
};

ResourcesCapability::ResourcesCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.ResourcesCapability)
}
ResourcesCapability::ResourcesCapability(const ResourcesCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResourcesCapability* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subscribe_){}
    , decltype(_impl_.list_changed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.subscribe_, &from._impl_.subscribe_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.list_changed_) -
    reinterpret_cast<char*>(&_impl_.subscribe_)) + sizeof(_impl_.list_changed_));
  // @@protoc_insertion_point(copy_constructor:mcp.ResourcesCapability)
}

inline void ResourcesCapability::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subscribe_){false}
    , decltype(_impl_.list_changed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResourcesCapability::~ResourcesCapability() {
  // @@protoc_insertion_point(destructor:mcp.ResourcesCapability)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourcesCapability::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResourcesCapability::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResourcesCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ResourcesCapability)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.subscribe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.list_changed_) -
      reinterpret_cast<char*>(&_impl_.subscribe_)) + sizeof(_impl_.list_changed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourcesCapability::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool subscribe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.subscribe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool list_changed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.list_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourcesCapability::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ResourcesCapability)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool subscribe = 1;
  if (this->_internal_subscribe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_subscribe(), target);
  }

  // bool list_changed = 2;
  if (this->_internal_list_changed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_list_changed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ResourcesCapability)
  return target;
}

size_t ResourcesCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ResourcesCapability)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool subscribe = 1;
  if (this->_internal_subscribe() != 0) {
    total_size += 1 + 1;
  }

  // bool list_changed = 2;
  if (this->_internal_list_changed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourcesCapability::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResourcesCapability::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourcesCapability::GetClassData() const { return &_class_data_; }


void ResourcesCapability::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResourcesCapability*>(&to_msg);
  auto& from = static_cast<const ResourcesCapability&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ResourcesCapability)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_subscribe() != 0) {
    _this->_internal_set_subscribe(from._internal_subscribe());
  }
  if (from._internal_list_changed() != 0) {
    _this->_internal_set_list_changed(from._internal_list_changed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourcesCapability::CopyFrom(const ResourcesCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ResourcesCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourcesCapability::IsInitialized() const {
  return true;
}

void ResourcesCapability::InternalSwap(ResourcesCapability* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourcesCapability, _impl_.list_changed_)
      + sizeof(ResourcesCapability::_impl_.list_changed_)
      - PROTOBUF_FIELD_OFFSET(ResourcesCapability, _impl_.subscribe_)>(
          reinterpret_cast<char*>(&_impl_.subscribe_),
          reinterpret_cast<char*>(&other->_impl_.subscribe_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourcesCapability::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[28]);
}

// ===================================================================

class ToolsCapability::_Internal {
 public:
};

ToolsCapability::ToolsCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.ToolsCapability)
}
ToolsCapability::ToolsCapability(const ToolsCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ToolsCapability* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_changed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.list_changed_ = from._impl_.list_changed_;
  // @@protoc_insertion_point(copy_constructor:mcp.ToolsCapability)
}

inline void ToolsCapability::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_changed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ToolsCapability::~ToolsCapability() {
  // @@protoc_insertion_point(destructor:mcp.ToolsCapability)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ToolsCapability::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ToolsCapability::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ToolsCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ToolsCapability)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_changed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolsCapability::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool list_changed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.list_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ToolsCapability::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ToolsCapability)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool list_changed = 1;
  if (this->_internal_list_changed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_list_changed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ToolsCapability)
  return target;
}

size_t ToolsCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ToolsCapability)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool list_changed = 1;
  if (this->_internal_list_changed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ToolsCapability::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ToolsCapability::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ToolsCapability::GetClassData() const { return &_class_data_; }


void ToolsCapability::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ToolsCapability*>(&to_msg);
  auto& from = static_cast<const ToolsCapability&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ToolsCapability)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_list_changed() != 0) {
    _this->_internal_set_list_changed(from._internal_list_changed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ToolsCapability::CopyFrom(const ToolsCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ToolsCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolsCapability::IsInitialized() const {
  return true;
}

void ToolsCapability::InternalSwap(ToolsCapability* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.list_changed_, other->_impl_.list_changed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolsCapability::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[29]);
}

// ===================================================================

class Resource::_Internal {
 public:
  static const ::mcp::Annotations& annotations(const Resource* msg);
};

const ::mcp::Annotations&
Resource::_Internal::annotations(const Resource* msg) {
  return *msg->_impl_.annotations_;
}
Resource::Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.Resource)
}
Resource::Resource(const Resource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Resource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.annotations_){nullptr}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_annotations()) {
    _this->_impl_.annotations_ = new ::mcp::Annotations(*from._impl_.annotations_);
  }
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:mcp.Resource)
}

inline void Resource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.annotations_){nullptr}
    , decltype(_impl_.size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Resource::~Resource() {
  // @@protoc_insertion_point(destructor:mcp.Resource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Resource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uri_.Destroy();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  _impl_.mime_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.annotations_;
}

void Resource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.Resource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.mime_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.annotations_ != nullptr) {
    delete _impl_.annotations_;
  }
  _impl_.annotations_ = nullptr;
  _impl_.size_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Resource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.Resource.uri"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.Resource.name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.Resource.description"));
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.Resource.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.Annotations annotations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Resource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.Resource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.Resource.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.Resource.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.Resource.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string mime_type = 4;
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.Resource.mime_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mime_type(), target);
  }

  // .mcp.Annotations annotations = 5;
  if (this->_internal_has_annotations()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::annotations(this),
        _Internal::annotations(this).GetCachedSize(), target, stream);
  }

  // int64 size = 6;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.Resource)
  return target;
}

size_t Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.Resource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string mime_type = 4;
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // .mcp.Annotations annotations = 5;
  if (this->_internal_has_annotations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.annotations_);
  }

  // int64 size = 6;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Resource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Resource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Resource::GetClassData() const { return &_class_data_; }


void Resource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Resource*>(&to_msg);
  auto& from = static_cast<const Resource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.Resource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_mime_type().empty()) {
    _this->_internal_set_mime_type(from._internal_mime_type());
  }
  if (from._internal_has_annotations()) {
    _this->_internal_mutable_annotations()->::mcp::Annotations::MergeFrom(
        from._internal_annotations());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Resource::CopyFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  return true;
}

void Resource::InternalSwap(Resource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Resource, _impl_.size_)
      + sizeof(Resource::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(Resource, _impl_.annotations_)>(
          reinterpret_cast<char*>(&_impl_.annotations_),
          reinterpret_cast<char*>(&other->_impl_.annotations_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Resource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[30]);
}

// ===================================================================

class ResourceTemplate::_Internal {
 public:
  static const ::mcp::Annotations& annotations(const ResourceTemplate* msg);
};

const ::mcp::Annotations&
ResourceTemplate::_Internal::annotations(const ResourceTemplate* msg) {
  return *msg->_impl_.annotations_;
}
ResourceTemplate::ResourceTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.ResourceTemplate)
}
ResourceTemplate::ResourceTemplate(const ResourceTemplate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResourceTemplate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_template_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.annotations_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_template_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_template_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri_template().empty()) {
    _this->_impl_.uri_template_.Set(from._internal_uri_template(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_annotations()) {
    _this->_impl_.annotations_ = new ::mcp::Annotations(*from._impl_.annotations_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.ResourceTemplate)
}

inline void ResourceTemplate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_template_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.annotations_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uri_template_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_template_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResourceTemplate::~ResourceTemplate() {
  // @@protoc_insertion_point(destructor:mcp.ResourceTemplate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourceTemplate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uri_template_.Destroy();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  _impl_.mime_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.annotations_;
}

void ResourceTemplate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResourceTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ResourceTemplate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_template_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.mime_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.annotations_ != nullptr) {
    delete _impl_.annotations_;
  }
  _impl_.annotations_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceTemplate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri_template = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri_template();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.ResourceTemplate.uri_template"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.ResourceTemplate.name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.ResourceTemplate.description"));
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.ResourceTemplate.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.Annotations annotations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourceTemplate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ResourceTemplate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri_template = 1;
  if (!this->_internal_uri_template().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri_template().data(), static_cast<int>(this->_internal_uri_template().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.ResourceTemplate.uri_template");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri_template(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.ResourceTemplate.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.ResourceTemplate.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string mime_type = 4;
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.ResourceTemplate.mime_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mime_type(), target);
  }

  // .mcp.Annotations annotations = 5;
  if (this->_internal_has_annotations()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::annotations(this),
        _Internal::annotations(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ResourceTemplate)
  return target;
}

size_t ResourceTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ResourceTemplate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri_template = 1;
  if (!this->_internal_uri_template().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri_template());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string mime_type = 4;
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // .mcp.Annotations annotations = 5;
  if (this->_internal_has_annotations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.annotations_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceTemplate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResourceTemplate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceTemplate::GetClassData() const { return &_class_data_; }


void ResourceTemplate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResourceTemplate*>(&to_msg);
  auto& from = static_cast<const ResourceTemplate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ResourceTemplate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri_template().empty()) {
    _this->_internal_set_uri_template(from._internal_uri_template());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_mime_type().empty()) {
    _this->_internal_set_mime_type(from._internal_mime_type());
  }
  if (from._internal_has_annotations()) {
    _this->_internal_mutable_annotations()->::mcp::Annotations::MergeFrom(
        from._internal_annotations());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceTemplate::CopyFrom(const ResourceTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ResourceTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceTemplate::IsInitialized() const {
  return true;
}

void ResourceTemplate::InternalSwap(ResourceTemplate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_template_, lhs_arena,
      &other->_impl_.uri_template_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
  swap(_impl_.annotations_, other->_impl_.annotations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceTemplate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[31]);
}

// ===================================================================

class ResourceContents::_Internal {
 public:
  static const ::mcp::TextResourceContents& text(const ResourceContents* msg);
  static const ::mcp::BlobResourceContents& blob(const ResourceContents* msg);
};

const ::mcp::TextResourceContents&
ResourceContents::_Internal::text(const ResourceContents* msg) {
  return *msg->_impl_.content_.text_;
}
const ::mcp::BlobResourceContents&
ResourceContents::_Internal::blob(const ResourceContents* msg) {
  return *msg->_impl_.content_.blob_;
}
void ResourceContents::set_allocated_text(::mcp::TextResourceContents* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(text);
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    set_has_text();
    _impl_.content_.text_ = text;
  }
  // @@protoc_insertion_point(field_set_allocated:mcp.ResourceContents.text)
}
void ResourceContents::set_allocated_blob(::mcp::BlobResourceContents* blob) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (blob) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(blob);
    if (message_arena != submessage_arena) {
      blob = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blob, submessage_arena);
    }
    set_has_blob();
    _impl_.content_.blob_ = blob;
  }
  // @@protoc_insertion_point(field_set_allocated:mcp.ResourceContents.blob)
}
ResourceContents::ResourceContents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.ResourceContents)
}
ResourceContents::ResourceContents(const ResourceContents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResourceContents* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  clear_has_content();
  switch (from.content_case()) {
    case kText: {
      _this->_internal_mutable_text()->::mcp::TextResourceContents::MergeFrom(
          from._internal_text());
      break;
    }
    case kBlob: {
      _this->_internal_mutable_blob()->::mcp::BlobResourceContents::MergeFrom(
          from._internal_blob());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mcp.ResourceContents)
}

inline void ResourceContents::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_content();
}

ResourceContents::~ResourceContents() {
  // @@protoc_insertion_point(destructor:mcp.ResourceContents)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourceContents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uri_.Destroy();
  _impl_.mime_type_.Destroy();
  if (has_content()) {
    clear_content();
  }
}

void ResourceContents::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResourceContents::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:mcp.ResourceContents)
  switch (content_case()) {
    case kText: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.text_;
      }
      break;
    }
    case kBlob: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.blob_;
      }
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CONTENT_NOT_SET;
}


void ResourceContents::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ResourceContents)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.ClearToEmpty();
  _impl_.mime_type_.ClearToEmpty();
  clear_content();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceContents::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.ResourceContents.uri"));
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.ResourceContents.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.TextResourceContents text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mcp.BlobResourceContents blob = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_blob(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourceContents::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ResourceContents)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.ResourceContents.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // string mime_type = 2;
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.ResourceContents.mime_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mime_type(), target);
  }

  // .mcp.TextResourceContents text = 3;
  if (_internal_has_text()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::text(this),
        _Internal::text(this).GetCachedSize(), target, stream);
  }

  // .mcp.BlobResourceContents blob = 4;
  if (_internal_has_blob()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::blob(this),
        _Internal::blob(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ResourceContents)
  return target;
}

size_t ResourceContents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ResourceContents)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // string mime_type = 2;
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  switch (content_case()) {
    // .mcp.TextResourceContents text = 3;
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.text_);
      break;
    }
    // .mcp.BlobResourceContents blob = 4;
    case kBlob: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.blob_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceContents::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResourceContents::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceContents::GetClassData() const { return &_class_data_; }


void ResourceContents::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResourceContents*>(&to_msg);
  auto& from = static_cast<const ResourceContents&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ResourceContents)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (!from._internal_mime_type().empty()) {
    _this->_internal_set_mime_type(from._internal_mime_type());
  }
  switch (from.content_case()) {
    case kText: {
      _this->_internal_mutable_text()->::mcp::TextResourceContents::MergeFrom(
          from._internal_text());
      break;
    }
    case kBlob: {
      _this->_internal_mutable_blob()->::mcp::BlobResourceContents::MergeFrom(
          from._internal_blob());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceContents::CopyFrom(const ResourceContents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ResourceContents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceContents::IsInitialized() const {
  return true;
}

void ResourceContents::InternalSwap(ResourceContents* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
  swap(_impl_.content_, other->_impl_.content_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceContents::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[32]);
}

// ===================================================================

class TextResourceContents::_Internal {
 public:
};

TextResourceContents::TextResourceContents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.TextResourceContents)
}
TextResourceContents::TextResourceContents(const TextResourceContents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TextResourceContents* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcp.TextResourceContents)
}

inline void TextResourceContents::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TextResourceContents::~TextResourceContents() {
  // @@protoc_insertion_point(destructor:mcp.TextResourceContents)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TextResourceContents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void TextResourceContents::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TextResourceContents::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.TextResourceContents)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextResourceContents::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.TextResourceContents.text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextResourceContents::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.TextResourceContents)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.TextResourceContents.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.TextResourceContents)
  return target;
}

size_t TextResourceContents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.TextResourceContents)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextResourceContents::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TextResourceContents::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextResourceContents::GetClassData() const { return &_class_data_; }


void TextResourceContents::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TextResourceContents*>(&to_msg);
  auto& from = static_cast<const TextResourceContents&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.TextResourceContents)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextResourceContents::CopyFrom(const TextResourceContents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.TextResourceContents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextResourceContents::IsInitialized() const {
  return true;
}

void TextResourceContents::InternalSwap(TextResourceContents* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TextResourceContents::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[33]);
}

// ===================================================================

class BlobResourceContents::_Internal {
 public:
};

BlobResourceContents::BlobResourceContents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.BlobResourceContents)
}
BlobResourceContents::BlobResourceContents(const BlobResourceContents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlobResourceContents* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blob_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.blob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blob().empty()) {
    _this->_impl_.blob_.Set(from._internal_blob(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcp.BlobResourceContents)
}

inline void BlobResourceContents::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blob_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.blob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlobResourceContents::~BlobResourceContents() {
  // @@protoc_insertion_point(destructor:mcp.BlobResourceContents)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlobResourceContents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blob_.Destroy();
}

void BlobResourceContents::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlobResourceContents::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.BlobResourceContents)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blob_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlobResourceContents::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes blob = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlobResourceContents::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.BlobResourceContents)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1;
  if (!this->_internal_blob().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.BlobResourceContents)
  return target;
}

size_t BlobResourceContents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.BlobResourceContents)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1;
  if (!this->_internal_blob().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlobResourceContents::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlobResourceContents::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlobResourceContents::GetClassData() const { return &_class_data_; }


void BlobResourceContents::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlobResourceContents*>(&to_msg);
  auto& from = static_cast<const BlobResourceContents&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.BlobResourceContents)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_blob().empty()) {
    _this->_internal_set_blob(from._internal_blob());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlobResourceContents::CopyFrom(const BlobResourceContents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.BlobResourceContents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobResourceContents::IsInitialized() const {
  return true;
}

void BlobResourceContents::InternalSwap(BlobResourceContents* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.blob_, lhs_arena,
      &other->_impl_.blob_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BlobResourceContents::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[34]);
}

// ===================================================================

class Tool::_Internal {
 public:
  static const ::mcp::InputSchema& input_schema(const Tool* msg);
  static const ::mcp::ToolAnnotations& annotations(const Tool* msg);
};

const ::mcp::InputSchema&
Tool::_Internal::input_schema(const Tool* msg) {
  return *msg->_impl_.input_schema_;
}
const ::mcp::ToolAnnotations&
Tool::_Internal::annotations(const Tool* msg) {
  return *msg->_impl_.annotations_;
}
Tool::Tool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.Tool)
}
Tool::Tool(const Tool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tool* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.input_schema_){nullptr}
    , decltype(_impl_.annotations_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_input_schema()) {
    _this->_impl_.input_schema_ = new ::mcp::InputSchema(*from._impl_.input_schema_);
  }
  if (from._internal_has_annotations()) {
    _this->_impl_.annotations_ = new ::mcp::ToolAnnotations(*from._impl_.annotations_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.Tool)
}

inline void Tool::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.input_schema_){nullptr}
    , decltype(_impl_.annotations_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Tool::~Tool() {
  // @@protoc_insertion_point(destructor:mcp.Tool)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tool::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.input_schema_;
  if (this != internal_default_instance()) delete _impl_.annotations_;
}

void Tool::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tool::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.Tool)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.input_schema_ != nullptr) {
    delete _impl_.input_schema_;
  }
  _impl_.input_schema_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.annotations_ != nullptr) {
    delete _impl_.annotations_;
  }
  _impl_.annotations_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tool::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.Tool.name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.Tool.description"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.InputSchema input_schema = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_schema(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mcp.ToolAnnotations annotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tool::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.Tool)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.Tool.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.Tool.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .mcp.InputSchema input_schema = 3;
  if (this->_internal_has_input_schema()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::input_schema(this),
        _Internal::input_schema(this).GetCachedSize(), target, stream);
  }

  // .mcp.ToolAnnotations annotations = 4;
  if (this->_internal_has_annotations()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::annotations(this),
        _Internal::annotations(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.Tool)
  return target;
}

size_t Tool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.Tool)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .mcp.InputSchema input_schema = 3;
  if (this->_internal_has_input_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_schema_);
  }

  // .mcp.ToolAnnotations annotations = 4;
  if (this->_internal_has_annotations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.annotations_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tool::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tool::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tool::GetClassData() const { return &_class_data_; }


void Tool::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tool*>(&to_msg);
  auto& from = static_cast<const Tool&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.Tool)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_input_schema()) {
    _this->_internal_mutable_input_schema()->::mcp::InputSchema::MergeFrom(
        from._internal_input_schema());
  }
  if (from._internal_has_annotations()) {
    _this->_internal_mutable_annotations()->::mcp::ToolAnnotations::MergeFrom(
        from._internal_annotations());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tool::CopyFrom(const Tool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.Tool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tool::IsInitialized() const {
  return true;
}

void Tool::InternalSwap(Tool* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tool, _impl_.annotations_)
      + sizeof(Tool::_impl_.annotations_)
      - PROTOBUF_FIELD_OFFSET(Tool, _impl_.input_schema_)>(
          reinterpret_cast<char*>(&_impl_.input_schema_),
          reinterpret_cast<char*>(&other->_impl_.input_schema_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tool::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[35]);
}

// ===================================================================

InputSchema_PropertiesEntry_DoNotUse::InputSchema_PropertiesEntry_DoNotUse() {}
InputSchema_PropertiesEntry_DoNotUse::InputSchema_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InputSchema_PropertiesEntry_DoNotUse::MergeFrom(const InputSchema_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InputSchema_PropertiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[36]);
}

// ===================================================================

class InputSchema::_Internal {
 public:
};

InputSchema::InputSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &InputSchema::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:mcp.InputSchema)
}
InputSchema::InputSchema(const InputSchema& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InputSchema* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.properties_)*/{}
    , decltype(_impl_.required_){from._impl_.required_}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcp.InputSchema)
}

inline void InputSchema::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.properties_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.required_){arena}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InputSchema::~InputSchema() {
  // @@protoc_insertion_point(destructor:mcp.InputSchema)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void InputSchema::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.properties_.Destruct();
  _impl_.properties_.~MapField();
  _impl_.required_.~RepeatedPtrField();
  _impl_.type_.Destroy();
}

void InputSchema::ArenaDtor(void* object) {
  InputSchema* _this = reinterpret_cast< InputSchema* >(object);
  _this->_impl_.properties_.Destruct();
}
void InputSchema::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputSchema::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.InputSchema)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  _impl_.required_.Clear();
  _impl_.type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputSchema::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.InputSchema.type"));
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string required = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_required();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "mcp.InputSchema.required"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputSchema::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.InputSchema)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.InputSchema.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // map<string, bytes> properties = 2;
  if (!this->_internal_properties().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = InputSchema_PropertiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_properties();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "mcp.InputSchema.PropertiesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated string required = 3;
  for (int i = 0, n = this->_internal_required_size(); i < n; i++) {
    const auto& s = this->_internal_required(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.InputSchema.required");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.InputSchema)
  return target;
}

size_t InputSchema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.InputSchema)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> properties = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += InputSchema_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string required = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.required_.size());
  for (int i = 0, n = _impl_.required_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.required_.Get(i));
  }

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputSchema::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InputSchema::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputSchema::GetClassData() const { return &_class_data_; }


void InputSchema::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InputSchema*>(&to_msg);
  auto& from = static_cast<const InputSchema&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.InputSchema)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _this->_impl_.required_.MergeFrom(from._impl_.required_);
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputSchema::CopyFrom(const InputSchema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.InputSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputSchema::IsInitialized() const {
  return true;
}

void InputSchema::InternalSwap(InputSchema* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  _impl_.required_.InternalSwap(&other->_impl_.required_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InputSchema::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[37]);
}

// ===================================================================

class ToolAnnotations::_Internal {
 public:
};

ToolAnnotations::ToolAnnotations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.ToolAnnotations)
}
ToolAnnotations::ToolAnnotations(const ToolAnnotations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ToolAnnotations* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.read_only_hint_){}
    , decltype(_impl_.destructive_hint_){}
    , decltype(_impl_.idempotent_hint_){}
    , decltype(_impl_.open_world_hint_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.read_only_hint_, &from._impl_.read_only_hint_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.open_world_hint_) -
    reinterpret_cast<char*>(&_impl_.read_only_hint_)) + sizeof(_impl_.open_world_hint_));
  // @@protoc_insertion_point(copy_constructor:mcp.ToolAnnotations)
}

inline void ToolAnnotations::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.read_only_hint_){false}
    , decltype(_impl_.destructive_hint_){false}
    , decltype(_impl_.idempotent_hint_){false}
    , decltype(_impl_.open_world_hint_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ToolAnnotations::~ToolAnnotations() {
  // @@protoc_insertion_point(destructor:mcp.ToolAnnotations)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ToolAnnotations::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
}

void ToolAnnotations::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ToolAnnotations::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ToolAnnotations)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  ::memset(&_impl_.read_only_hint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.open_world_hint_) -
      reinterpret_cast<char*>(&_impl_.read_only_hint_)) + sizeof(_impl_.open_world_hint_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolAnnotations::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.ToolAnnotations.title"));
        } else
          goto handle_unusual;
        continue;
      // bool read_only_hint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.read_only_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool destructive_hint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.destructive_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool idempotent_hint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.idempotent_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool open_world_hint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.open_world_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ToolAnnotations::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ToolAnnotations)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.ToolAnnotations.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // bool read_only_hint = 2;
  if (this->_internal_read_only_hint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_read_only_hint(), target);
  }

  // bool destructive_hint = 3;
  if (this->_internal_destructive_hint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_destructive_hint(), target);
  }

  // bool idempotent_hint = 4;
  if (this->_internal_idempotent_hint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_idempotent_hint(), target);
  }

  // bool open_world_hint = 5;
  if (this->_internal_open_world_hint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_open_world_hint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ToolAnnotations)
  return target;
}

size_t ToolAnnotations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ToolAnnotations)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // bool read_only_hint = 2;
  if (this->_internal_read_only_hint() != 0) {
    total_size += 1 + 1;
  }

  // bool destructive_hint = 3;
  if (this->_internal_destructive_hint() != 0) {
    total_size += 1 + 1;
  }

  // bool idempotent_hint = 4;
  if (this->_internal_idempotent_hint() != 0) {
    total_size += 1 + 1;
  }

  // bool open_world_hint = 5;
  if (this->_internal_open_world_hint() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ToolAnnotations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ToolAnnotations::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ToolAnnotations::GetClassData() const { return &_class_data_; }


void ToolAnnotations::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ToolAnnotations*>(&to_msg);
  auto& from = static_cast<const ToolAnnotations&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ToolAnnotations)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (from._internal_read_only_hint() != 0) {
    _this->_internal_set_read_only_hint(from._internal_read_only_hint());
  }
  if (from._internal_destructive_hint() != 0) {
    _this->_internal_set_destructive_hint(from._internal_destructive_hint());
  }
  if (from._internal_idempotent_hint() != 0) {
    _this->_internal_set_idempotent_hint(from._internal_idempotent_hint());
  }
  if (from._internal_open_world_hint() != 0) {
    _this->_internal_set_open_world_hint(from._internal_open_world_hint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ToolAnnotations::CopyFrom(const ToolAnnotations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ToolAnnotations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolAnnotations::IsInitialized() const {
  return true;
}

void ToolAnnotations::InternalSwap(ToolAnnotations* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ToolAnnotations, _impl_.open_world_hint_)
      + sizeof(ToolAnnotations::_impl_.open_world_hint_)
      - PROTOBUF_FIELD_OFFSET(ToolAnnotations, _impl_.read_only_hint_)>(
          reinterpret_cast<char*>(&_impl_.read_only_hint_),
          reinterpret_cast<char*>(&other->_impl_.read_only_hint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolAnnotations::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[38]);
}

// ===================================================================

class Annotations::_Internal {
 public:
};

Annotations::Annotations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.Annotations)
}
Annotations::Annotations(const Annotations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Annotations* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.audience_){from._impl_.audience_}
    , /*decltype(_impl_._audience_cached_byte_size_)*/{0}
    , decltype(_impl_.priority_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.priority_ = from._impl_.priority_;
  // @@protoc_insertion_point(copy_constructor:mcp.Annotations)
}

inline void Annotations::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.audience_){arena}
    , /*decltype(_impl_._audience_cached_byte_size_)*/{0}
    , decltype(_impl_.priority_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Annotations::~Annotations() {
  // @@protoc_insertion_point(destructor:mcp.Annotations)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Annotations::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.audience_.~RepeatedField();
}

void Annotations::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Annotations::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.Annotations)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.audience_.Clear();
  _impl_.priority_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Annotations::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mcp.Role audience = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_audience(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_audience(static_cast<::mcp::Role>(val));
        } else
          goto handle_unusual;
        continue;
      // float priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Annotations::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.Annotations)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mcp.Role audience = 1;
  {
    int byte_size = _impl_._audience_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, _impl_.audience_, byte_size, target);
    }
  }

  // float priority = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_priority = this->_internal_priority();
  uint32_t raw_priority;
  memcpy(&raw_priority, &tmp_priority, sizeof(tmp_priority));
  if (raw_priority != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.Annotations)
  return target;
}

size_t Annotations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.Annotations)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcp.Role audience = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_audience_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_audience(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._audience_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float priority = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_priority = this->_internal_priority();
  uint32_t raw_priority;
  memcpy(&raw_priority, &tmp_priority, sizeof(tmp_priority));
  if (raw_priority != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Annotations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Annotations::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Annotations::GetClassData() const { return &_class_data_; }


void Annotations::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Annotations*>(&to_msg);
  auto& from = static_cast<const Annotations&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.Annotations)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.audience_.MergeFrom(from._impl_.audience_);
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_priority = from._internal_priority();
  uint32_t raw_priority;
  memcpy(&raw_priority, &tmp_priority, sizeof(tmp_priority));
  if (raw_priority != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Annotations::CopyFrom(const Annotations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.Annotations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotations::IsInitialized() const {
  return true;
}

void Annotations::InternalSwap(Annotations* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.audience_.InternalSwap(&other->_impl_.audience_);
  swap(_impl_.priority_, other->_impl_.priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Annotations::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[39]);
}

// ===================================================================

class TextContent::_Internal {
 public:
  static const ::mcp::Annotations& annotations(const TextContent* msg);
};

const ::mcp::Annotations&
TextContent::_Internal::annotations(const TextContent* msg) {
  return *msg->_impl_.annotations_;
}
TextContent::TextContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.TextContent)
}
TextContent::TextContent(const TextContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TextContent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.annotations_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_annotations()) {
    _this->_impl_.annotations_ = new ::mcp::Annotations(*from._impl_.annotations_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.TextContent)
}

inline void TextContent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.annotations_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TextContent::~TextContent() {
  // @@protoc_insertion_point(destructor:mcp.TextContent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TextContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.annotations_;
}

void TextContent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TextContent::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.TextContent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.annotations_ != nullptr) {
    delete _impl_.annotations_;
  }
  _impl_.annotations_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextContent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.TextContent.type"));
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.TextContent.text"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.Annotations annotations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextContent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.TextContent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.TextContent.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.TextContent.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // .mcp.Annotations annotations = 3;
  if (this->_internal_has_annotations()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::annotations(this),
        _Internal::annotations(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.TextContent)
  return target;
}

size_t TextContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.TextContent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .mcp.Annotations annotations = 3;
  if (this->_internal_has_annotations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.annotations_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextContent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TextContent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextContent::GetClassData() const { return &_class_data_; }


void TextContent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TextContent*>(&to_msg);
  auto& from = static_cast<const TextContent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.TextContent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_has_annotations()) {
    _this->_internal_mutable_annotations()->::mcp::Annotations::MergeFrom(
        from._internal_annotations());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextContent::CopyFrom(const TextContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.TextContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextContent::IsInitialized() const {
  return true;
}

void TextContent::InternalSwap(TextContent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  swap(_impl_.annotations_, other->_impl_.annotations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextContent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[40]);
}

// ===================================================================

class ImageContent::_Internal {
 public:
  static const ::mcp::Annotations& annotations(const ImageContent* msg);
};

const ::mcp::Annotations&
ImageContent::_Internal::annotations(const ImageContent* msg) {
  return *msg->_impl_.annotations_;
}
ImageContent::ImageContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.ImageContent)
}
ImageContent::ImageContent(const ImageContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageContent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.annotations_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_annotations()) {
    _this->_impl_.annotations_ = new ::mcp::Annotations(*from._impl_.annotations_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.ImageContent)
}

inline void ImageContent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.annotations_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImageContent::~ImageContent() {
  // @@protoc_insertion_point(destructor:mcp.ImageContent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.data_.Destroy();
  _impl_.mime_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.annotations_;
}

void ImageContent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageContent::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ImageContent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.mime_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.annotations_ != nullptr) {
    delete _impl_.annotations_;
  }
  _impl_.annotations_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageContent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.ImageContent.type"));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.ImageContent.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.Annotations annotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageContent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ImageContent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.ImageContent.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // string mime_type = 3;
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.ImageContent.mime_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mime_type(), target);
  }

  // .mcp.Annotations annotations = 4;
  if (this->_internal_has_annotations()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::annotations(this),
        _Internal::annotations(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ImageContent)
  return target;
}

size_t ImageContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ImageContent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string mime_type = 3;
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // .mcp.Annotations annotations = 4;
  if (this->_internal_has_annotations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.annotations_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageContent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageContent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageContent::GetClassData() const { return &_class_data_; }


void ImageContent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageContent*>(&to_msg);
  auto& from = static_cast<const ImageContent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ImageContent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_mime_type().empty()) {
    _this->_internal_set_mime_type(from._internal_mime_type());
  }
  if (from._internal_has_annotations()) {
    _this->_internal_mutable_annotations()->::mcp::Annotations::MergeFrom(
        from._internal_annotations());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageContent::CopyFrom(const ImageContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ImageContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageContent::IsInitialized() const {
  return true;
}

void ImageContent::InternalSwap(ImageContent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
  swap(_impl_.annotations_, other->_impl_.annotations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageContent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[41]);
}

// ===================================================================

class AudioContent::_Internal {
 public:
  static const ::mcp::Annotations& annotations(const AudioContent* msg);
};

const ::mcp::Annotations&
AudioContent::_Internal::annotations(const AudioContent* msg) {
  return *msg->_impl_.annotations_;
}
AudioContent::AudioContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.AudioContent)
}
AudioContent::AudioContent(const AudioContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AudioContent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.annotations_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_annotations()) {
    _this->_impl_.annotations_ = new ::mcp::Annotations(*from._impl_.annotations_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.AudioContent)
}

inline void AudioContent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.annotations_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AudioContent::~AudioContent() {
  // @@protoc_insertion_point(destructor:mcp.AudioContent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.data_.Destroy();
  _impl_.mime_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.annotations_;
}

void AudioContent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioContent::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.AudioContent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.mime_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.annotations_ != nullptr) {
    delete _impl_.annotations_;
  }
  _impl_.annotations_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioContent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.AudioContent.type"));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.AudioContent.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.Annotations annotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioContent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.AudioContent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.AudioContent.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // string mime_type = 3;
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.AudioContent.mime_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mime_type(), target);
  }

  // .mcp.Annotations annotations = 4;
  if (this->_internal_has_annotations()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::annotations(this),
        _Internal::annotations(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.AudioContent)
  return target;
}

size_t AudioContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.AudioContent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string mime_type = 3;
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // .mcp.Annotations annotations = 4;
  if (this->_internal_has_annotations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.annotations_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioContent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AudioContent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioContent::GetClassData() const { return &_class_data_; }


void AudioContent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AudioContent*>(&to_msg);
  auto& from = static_cast<const AudioContent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.AudioContent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_mime_type().empty()) {
    _this->_internal_set_mime_type(from._internal_mime_type());
  }
  if (from._internal_has_annotations()) {
    _this->_internal_mutable_annotations()->::mcp::Annotations::MergeFrom(
        from._internal_annotations());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioContent::CopyFrom(const AudioContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.AudioContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioContent::IsInitialized() const {
  return true;
}

void AudioContent::InternalSwap(AudioContent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
  swap(_impl_.annotations_, other->_impl_.annotations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioContent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[42]);
}

// ===================================================================

class ModelPreferences::_Internal {
 public:
};

ModelPreferences::ModelPreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.ModelPreferences)
}
ModelPreferences::ModelPreferences(const ModelPreferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelPreferences* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hints_){from._impl_.hints_}
    , decltype(_impl_.cost_priority_){}
    , decltype(_impl_.speed_priority_){}
    , decltype(_impl_.intelligence_priority_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cost_priority_, &from._impl_.cost_priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.intelligence_priority_) -
    reinterpret_cast<char*>(&_impl_.cost_priority_)) + sizeof(_impl_.intelligence_priority_));
  // @@protoc_insertion_point(copy_constructor:mcp.ModelPreferences)
}

inline void ModelPreferences::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hints_){arena}
    , decltype(_impl_.cost_priority_){0}
    , decltype(_impl_.speed_priority_){0}
    , decltype(_impl_.intelligence_priority_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ModelPreferences::~ModelPreferences() {
  // @@protoc_insertion_point(destructor:mcp.ModelPreferences)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelPreferences::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hints_.~RepeatedPtrField();
}

void ModelPreferences::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ModelPreferences)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hints_.Clear();
  ::memset(&_impl_.cost_priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.intelligence_priority_) -
      reinterpret_cast<char*>(&_impl_.cost_priority_)) + sizeof(_impl_.intelligence_priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelPreferences::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mcp.ModelHint hints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // float cost_priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.cost_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float speed_priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.speed_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float intelligence_priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.intelligence_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelPreferences::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ModelPreferences)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mcp.ModelHint hints = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hints_size()); i < n; i++) {
    const auto& repfield = this->_internal_hints(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // float cost_priority = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cost_priority = this->_internal_cost_priority();
  uint32_t raw_cost_priority;
  memcpy(&raw_cost_priority, &tmp_cost_priority, sizeof(tmp_cost_priority));
  if (raw_cost_priority != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_cost_priority(), target);
  }

  // float speed_priority = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed_priority = this->_internal_speed_priority();
  uint32_t raw_speed_priority;
  memcpy(&raw_speed_priority, &tmp_speed_priority, sizeof(tmp_speed_priority));
  if (raw_speed_priority != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_speed_priority(), target);
  }

  // float intelligence_priority = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_intelligence_priority = this->_internal_intelligence_priority();
  uint32_t raw_intelligence_priority;
  memcpy(&raw_intelligence_priority, &tmp_intelligence_priority, sizeof(tmp_intelligence_priority));
  if (raw_intelligence_priority != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_intelligence_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ModelPreferences)
  return target;
}

size_t ModelPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ModelPreferences)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcp.ModelHint hints = 1;
  total_size += 1UL * this->_internal_hints_size();
  for (const auto& msg : this->_impl_.hints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float cost_priority = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cost_priority = this->_internal_cost_priority();
  uint32_t raw_cost_priority;
  memcpy(&raw_cost_priority, &tmp_cost_priority, sizeof(tmp_cost_priority));
  if (raw_cost_priority != 0) {
    total_size += 1 + 4;
  }

  // float speed_priority = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed_priority = this->_internal_speed_priority();
  uint32_t raw_speed_priority;
  memcpy(&raw_speed_priority, &tmp_speed_priority, sizeof(tmp_speed_priority));
  if (raw_speed_priority != 0) {
    total_size += 1 + 4;
  }

  // float intelligence_priority = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_intelligence_priority = this->_internal_intelligence_priority();
  uint32_t raw_intelligence_priority;
  memcpy(&raw_intelligence_priority, &tmp_intelligence_priority, sizeof(tmp_intelligence_priority));
  if (raw_intelligence_priority != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelPreferences::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelPreferences::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelPreferences::GetClassData() const { return &_class_data_; }


void ModelPreferences::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelPreferences*>(&to_msg);
  auto& from = static_cast<const ModelPreferences&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ModelPreferences)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hints_.MergeFrom(from._impl_.hints_);
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cost_priority = from._internal_cost_priority();
  uint32_t raw_cost_priority;
  memcpy(&raw_cost_priority, &tmp_cost_priority, sizeof(tmp_cost_priority));
  if (raw_cost_priority != 0) {
    _this->_internal_set_cost_priority(from._internal_cost_priority());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed_priority = from._internal_speed_priority();
  uint32_t raw_speed_priority;
  memcpy(&raw_speed_priority, &tmp_speed_priority, sizeof(tmp_speed_priority));
  if (raw_speed_priority != 0) {
    _this->_internal_set_speed_priority(from._internal_speed_priority());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_intelligence_priority = from._internal_intelligence_priority();
  uint32_t raw_intelligence_priority;
  memcpy(&raw_intelligence_priority, &tmp_intelligence_priority, sizeof(tmp_intelligence_priority));
  if (raw_intelligence_priority != 0) {
    _this->_internal_set_intelligence_priority(from._internal_intelligence_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelPreferences::CopyFrom(const ModelPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ModelPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelPreferences::IsInitialized() const {
  return true;
}

void ModelPreferences::InternalSwap(ModelPreferences* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hints_.InternalSwap(&other->_impl_.hints_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelPreferences, _impl_.intelligence_priority_)
      + sizeof(ModelPreferences::_impl_.intelligence_priority_)
      - PROTOBUF_FIELD_OFFSET(ModelPreferences, _impl_.cost_priority_)>(
          reinterpret_cast<char*>(&_impl_.cost_priority_),
          reinterpret_cast<char*>(&other->_impl_.cost_priority_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelPreferences::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[43]);
}

// ===================================================================

class ModelHint::_Internal {
 public:
};

ModelHint::ModelHint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.ModelHint)
}
ModelHint::ModelHint(const ModelHint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelHint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcp.ModelHint)
}

inline void ModelHint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelHint::~ModelHint() {
  // @@protoc_insertion_point(destructor:mcp.ModelHint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelHint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ModelHint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelHint::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ModelHint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelHint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.ModelHint.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelHint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ModelHint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.ModelHint.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ModelHint)
  return target;
}

size_t ModelHint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ModelHint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelHint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelHint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelHint::GetClassData() const { return &_class_data_; }


void ModelHint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelHint*>(&to_msg);
  auto& from = static_cast<const ModelHint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ModelHint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelHint::CopyFrom(const ModelHint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ModelHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelHint::IsInitialized() const {
  return true;
}

void ModelHint::InternalSwap(ModelHint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelHint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[44]);
}

// ===================================================================

class ResourceReference::_Internal {
 public:
};

ResourceReference::ResourceReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.ResourceReference)
}
ResourceReference::ResourceReference(const ResourceReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResourceReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.uri_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcp.ResourceReference)
}

inline void ResourceReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.uri_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResourceReference::~ResourceReference() {
  // @@protoc_insertion_point(destructor:mcp.ResourceReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourceReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.uri_.Destroy();
}

void ResourceReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResourceReference::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ResourceReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.uri_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.ResourceReference.type"));
        } else
          goto handle_unusual;
        continue;
      // string uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.ResourceReference.uri"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourceReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ResourceReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.ResourceReference.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string uri = 2;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.ResourceReference.uri");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ResourceReference)
  return target;
}

size_t ResourceReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ResourceReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string uri = 2;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResourceReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceReference::GetClassData() const { return &_class_data_; }


void ResourceReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResourceReference*>(&to_msg);
  auto& from = static_cast<const ResourceReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ResourceReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceReference::CopyFrom(const ResourceReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ResourceReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceReference::IsInitialized() const {
  return true;
}

void ResourceReference::InternalSwap(ResourceReference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[45]);
}

// ===================================================================

class PromptReference::_Internal {
 public:
};

PromptReference::PromptReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.PromptReference)
}
PromptReference::PromptReference(const PromptReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PromptReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcp.PromptReference)
}

inline void PromptReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PromptReference::~PromptReference() {
  // @@protoc_insertion_point(destructor:mcp.PromptReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PromptReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.name_.Destroy();
}

void PromptReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PromptReference::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.PromptReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PromptReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.PromptReference.type"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.PromptReference.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PromptReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.PromptReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.PromptReference.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.PromptReference.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.PromptReference)
  return target;
}

size_t PromptReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.PromptReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PromptReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PromptReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PromptReference::GetClassData() const { return &_class_data_; }


void PromptReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PromptReference*>(&to_msg);
  auto& from = static_cast<const PromptReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.PromptReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PromptReference::CopyFrom(const PromptReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.PromptReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PromptReference::IsInitialized() const {
  return true;
}

void PromptReference::InternalSwap(PromptReference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PromptReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[46]);
}

// ===================================================================

class Root::_Internal {
 public:
};

Root::Root(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.Root)
}
Root::Root(const Root& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Root* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcp.Root)
}

inline void Root::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Root::~Root() {
  // @@protoc_insertion_point(destructor:mcp.Root)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Root::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uri_.Destroy();
  _impl_.name_.Destroy();
}

void Root::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Root::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.Root)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Root::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.Root.uri"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.Root.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Root::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.Root)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.Root.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.Root.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.Root)
  return target;
}

size_t Root::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.Root)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Root::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Root::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Root::GetClassData() const { return &_class_data_; }


void Root::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Root*>(&to_msg);
  auto& from = static_cast<const Root&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.Root)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Root::CopyFrom(const Root& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.Root)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Root::IsInitialized() const {
  return true;
}

void Root::InternalSwap(Root* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Root::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[47]);
}

// ===================================================================

class InitializeRequest::_Internal {
 public:
  static const ::mcp::InitializeParams& params(const InitializeRequest* msg);
};

const ::mcp::InitializeParams&
InitializeRequest::_Internal::params(const InitializeRequest* msg) {
  return *msg->_impl_.params_;
}
InitializeRequest::InitializeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.InitializeRequest)
}
InitializeRequest::InitializeRequest(const InitializeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InitializeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.method_){}
    , decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method().empty()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_params()) {
    _this->_impl_.params_ = new ::mcp::InitializeParams(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.InitializeRequest)
}

inline void InitializeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.method_){}
    , decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InitializeRequest::~InitializeRequest() {
  // @@protoc_insertion_point(destructor:mcp.InitializeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitializeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.method_.Destroy();
  if (this != internal_default_instance()) delete _impl_.params_;
}

void InitializeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InitializeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.InitializeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.method_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitializeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.InitializeRequest.method"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.InitializeParams params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitializeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.InitializeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string method = 1;
  if (!this->_internal_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.InitializeRequest.method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method(), target);
  }

  // .mcp.InitializeParams params = 2;
  if (this->_internal_has_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.InitializeRequest)
  return target;
}

size_t InitializeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.InitializeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string method = 1;
  if (!this->_internal_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // .mcp.InitializeParams params = 2;
  if (this->_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitializeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InitializeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitializeRequest::GetClassData() const { return &_class_data_; }


void InitializeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InitializeRequest*>(&to_msg);
  auto& from = static_cast<const InitializeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.InitializeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (from._internal_has_params()) {
    _this->_internal_mutable_params()->::mcp::InitializeParams::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitializeRequest::CopyFrom(const InitializeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.InitializeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeRequest::IsInitialized() const {
  return true;
}

void InitializeRequest::InternalSwap(InitializeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitializeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[48]);
}

// ===================================================================

class InitializeParams::_Internal {
 public:
  static const ::mcp::ClientCapabilities& capabilities(const InitializeParams* msg);
  static const ::mcp::Implementation& client_info(const InitializeParams* msg);
};

const ::mcp::ClientCapabilities&
InitializeParams::_Internal::capabilities(const InitializeParams* msg) {
  return *msg->_impl_.capabilities_;
}
const ::mcp::Implementation&
InitializeParams::_Internal::client_info(const InitializeParams* msg) {
  return *msg->_impl_.client_info_;
}
InitializeParams::InitializeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.InitializeParams)
}
InitializeParams::InitializeParams(const InitializeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InitializeParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.protocol_version_){}
    , decltype(_impl_.capabilities_){nullptr}
    , decltype(_impl_.client_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.protocol_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocol_version().empty()) {
    _this->_impl_.protocol_version_.Set(from._internal_protocol_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_capabilities()) {
    _this->_impl_.capabilities_ = new ::mcp::ClientCapabilities(*from._impl_.capabilities_);
  }
  if (from._internal_has_client_info()) {
    _this->_impl_.client_info_ = new ::mcp::Implementation(*from._impl_.client_info_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.InitializeParams)
}

inline void InitializeParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.protocol_version_){}
    , decltype(_impl_.capabilities_){nullptr}
    , decltype(_impl_.client_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.protocol_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InitializeParams::~InitializeParams() {
  // @@protoc_insertion_point(destructor:mcp.InitializeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitializeParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.protocol_version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.capabilities_;
  if (this != internal_default_instance()) delete _impl_.client_info_;
}

void InitializeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InitializeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.InitializeParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.protocol_version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.capabilities_ != nullptr) {
    delete _impl_.capabilities_;
  }
  _impl_.capabilities_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.client_info_ != nullptr) {
    delete _impl_.client_info_;
  }
  _impl_.client_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitializeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_protocol_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.InitializeParams.protocol_version"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.ClientCapabilities capabilities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_capabilities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mcp.Implementation client_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitializeParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.InitializeParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string protocol_version = 1;
  if (!this->_internal_protocol_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol_version().data(), static_cast<int>(this->_internal_protocol_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.InitializeParams.protocol_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocol_version(), target);
  }

  // .mcp.ClientCapabilities capabilities = 2;
  if (this->_internal_has_capabilities()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::capabilities(this),
        _Internal::capabilities(this).GetCachedSize(), target, stream);
  }

  // .mcp.Implementation client_info = 3;
  if (this->_internal_has_client_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::client_info(this),
        _Internal::client_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.InitializeParams)
  return target;
}

size_t InitializeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.InitializeParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol_version = 1;
  if (!this->_internal_protocol_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol_version());
  }

  // .mcp.ClientCapabilities capabilities = 2;
  if (this->_internal_has_capabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.capabilities_);
  }

  // .mcp.Implementation client_info = 3;
  if (this->_internal_has_client_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.client_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitializeParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InitializeParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitializeParams::GetClassData() const { return &_class_data_; }


void InitializeParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InitializeParams*>(&to_msg);
  auto& from = static_cast<const InitializeParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.InitializeParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_protocol_version().empty()) {
    _this->_internal_set_protocol_version(from._internal_protocol_version());
  }
  if (from._internal_has_capabilities()) {
    _this->_internal_mutable_capabilities()->::mcp::ClientCapabilities::MergeFrom(
        from._internal_capabilities());
  }
  if (from._internal_has_client_info()) {
    _this->_internal_mutable_client_info()->::mcp::Implementation::MergeFrom(
        from._internal_client_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitializeParams::CopyFrom(const InitializeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.InitializeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeParams::IsInitialized() const {
  return true;
}

void InitializeParams::InternalSwap(InitializeParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.protocol_version_, lhs_arena,
      &other->_impl_.protocol_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitializeParams, _impl_.client_info_)
      + sizeof(InitializeParams::_impl_.client_info_)
      - PROTOBUF_FIELD_OFFSET(InitializeParams, _impl_.capabilities_)>(
          reinterpret_cast<char*>(&_impl_.capabilities_),
          reinterpret_cast<char*>(&other->_impl_.capabilities_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitializeParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[49]);
}

// ===================================================================

class InitializeResult::_Internal {
 public:
  static const ::mcp::ServerCapabilities& capabilities(const InitializeResult* msg);
  static const ::mcp::Implementation& server_info(const InitializeResult* msg);
};

const ::mcp::ServerCapabilities&
InitializeResult::_Internal::capabilities(const InitializeResult* msg) {
  return *msg->_impl_.capabilities_;
}
const ::mcp::Implementation&
InitializeResult::_Internal::server_info(const InitializeResult* msg) {
  return *msg->_impl_.server_info_;
}
InitializeResult::InitializeResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.InitializeResult)
}
InitializeResult::InitializeResult(const InitializeResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InitializeResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.protocol_version_){}
    , decltype(_impl_.instructions_){}
    , decltype(_impl_.capabilities_){nullptr}
    , decltype(_impl_.server_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.protocol_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocol_version().empty()) {
    _this->_impl_.protocol_version_.Set(from._internal_protocol_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instructions_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instructions_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instructions().empty()) {
    _this->_impl_.instructions_.Set(from._internal_instructions(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_capabilities()) {
    _this->_impl_.capabilities_ = new ::mcp::ServerCapabilities(*from._impl_.capabilities_);
  }
  if (from._internal_has_server_info()) {
    _this->_impl_.server_info_ = new ::mcp::Implementation(*from._impl_.server_info_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.InitializeResult)
}

inline void InitializeResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.protocol_version_){}
    , decltype(_impl_.instructions_){}
    , decltype(_impl_.capabilities_){nullptr}
    , decltype(_impl_.server_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.protocol_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instructions_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instructions_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InitializeResult::~InitializeResult() {
  // @@protoc_insertion_point(destructor:mcp.InitializeResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitializeResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.protocol_version_.Destroy();
  _impl_.instructions_.Destroy();
  if (this != internal_default_instance()) delete _impl_.capabilities_;
  if (this != internal_default_instance()) delete _impl_.server_info_;
}

void InitializeResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InitializeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.InitializeResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.protocol_version_.ClearToEmpty();
  _impl_.instructions_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.capabilities_ != nullptr) {
    delete _impl_.capabilities_;
  }
  _impl_.capabilities_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.server_info_ != nullptr) {
    delete _impl_.server_info_;
  }
  _impl_.server_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitializeResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_protocol_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.InitializeResult.protocol_version"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.ServerCapabilities capabilities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_capabilities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mcp.Implementation server_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instructions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_instructions();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.InitializeResult.instructions"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitializeResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.InitializeResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string protocol_version = 1;
  if (!this->_internal_protocol_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol_version().data(), static_cast<int>(this->_internal_protocol_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.InitializeResult.protocol_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocol_version(), target);
  }

  // .mcp.ServerCapabilities capabilities = 2;
  if (this->_internal_has_capabilities()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::capabilities(this),
        _Internal::capabilities(this).GetCachedSize(), target, stream);
  }

  // .mcp.Implementation server_info = 3;
  if (this->_internal_has_server_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::server_info(this),
        _Internal::server_info(this).GetCachedSize(), target, stream);
  }

  // string instructions = 4;
  if (!this->_internal_instructions().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instructions().data(), static_cast<int>(this->_internal_instructions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.InitializeResult.instructions");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_instructions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.InitializeResult)
  return target;
}

size_t InitializeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.InitializeResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol_version = 1;
  if (!this->_internal_protocol_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol_version());
  }

  // string instructions = 4;
  if (!this->_internal_instructions().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instructions());
  }

  // .mcp.ServerCapabilities capabilities = 2;
  if (this->_internal_has_capabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.capabilities_);
  }

  // .mcp.Implementation server_info = 3;
  if (this->_internal_has_server_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.server_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitializeResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InitializeResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitializeResult::GetClassData() const { return &_class_data_; }


void InitializeResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InitializeResult*>(&to_msg);
  auto& from = static_cast<const InitializeResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.InitializeResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_protocol_version().empty()) {
    _this->_internal_set_protocol_version(from._internal_protocol_version());
  }
  if (!from._internal_instructions().empty()) {
    _this->_internal_set_instructions(from._internal_instructions());
  }
  if (from._internal_has_capabilities()) {
    _this->_internal_mutable_capabilities()->::mcp::ServerCapabilities::MergeFrom(
        from._internal_capabilities());
  }
  if (from._internal_has_server_info()) {
    _this->_internal_mutable_server_info()->::mcp::Implementation::MergeFrom(
        from._internal_server_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitializeResult::CopyFrom(const InitializeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.InitializeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeResult::IsInitialized() const {
  return true;
}

void InitializeResult::InternalSwap(InitializeResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.protocol_version_, lhs_arena,
      &other->_impl_.protocol_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instructions_, lhs_arena,
      &other->_impl_.instructions_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitializeResult, _impl_.server_info_)
      + sizeof(InitializeResult::_impl_.server_info_)
      - PROTOBUF_FIELD_OFFSET(InitializeResult, _impl_.capabilities_)>(
          reinterpret_cast<char*>(&_impl_.capabilities_),
          reinterpret_cast<char*>(&other->_impl_.capabilities_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitializeResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[50]);
}

// ===================================================================

class ListResourcesRequest::_Internal {
 public:
  static const ::mcp::PaginatedParams& params(const ListResourcesRequest* msg);
};

const ::mcp::PaginatedParams&
ListResourcesRequest::_Internal::params(const ListResourcesRequest* msg) {
  return *msg->_impl_.params_;
}
ListResourcesRequest::ListResourcesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.ListResourcesRequest)
}
ListResourcesRequest::ListResourcesRequest(const ListResourcesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListResourcesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.method_){}
    , decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method().empty()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_params()) {
    _this->_impl_.params_ = new ::mcp::PaginatedParams(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.ListResourcesRequest)
}

inline void ListResourcesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.method_){}
    , decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListResourcesRequest::~ListResourcesRequest() {
  // @@protoc_insertion_point(destructor:mcp.ListResourcesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListResourcesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.method_.Destroy();
  if (this != internal_default_instance()) delete _impl_.params_;
}

void ListResourcesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListResourcesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ListResourcesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.method_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListResourcesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.ListResourcesRequest.method"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.PaginatedParams params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListResourcesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ListResourcesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string method = 1;
  if (!this->_internal_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.ListResourcesRequest.method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method(), target);
  }

  // .mcp.PaginatedParams params = 2;
  if (this->_internal_has_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ListResourcesRequest)
  return target;
}

size_t ListResourcesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ListResourcesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string method = 1;
  if (!this->_internal_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // .mcp.PaginatedParams params = 2;
  if (this->_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListResourcesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListResourcesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListResourcesRequest::GetClassData() const { return &_class_data_; }


void ListResourcesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListResourcesRequest*>(&to_msg);
  auto& from = static_cast<const ListResourcesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ListResourcesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (from._internal_has_params()) {
    _this->_internal_mutable_params()->::mcp::PaginatedParams::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListResourcesRequest::CopyFrom(const ListResourcesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ListResourcesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListResourcesRequest::IsInitialized() const {
  return true;
}

void ListResourcesRequest::InternalSwap(ListResourcesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListResourcesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[51]);
}

// ===================================================================

class ListResourcesResult::_Internal {
 public:
};

ListResourcesResult::ListResourcesResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.ListResourcesResult)
}
ListResourcesResult::ListResourcesResult(const ListResourcesResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListResourcesResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resources_){from._impl_.resources_}
    , decltype(_impl_.next_cursor_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_cursor().empty()) {
    _this->_impl_.next_cursor_.Set(from._internal_next_cursor(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcp.ListResourcesResult)
}

inline void ListResourcesResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resources_){arena}
    , decltype(_impl_.next_cursor_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListResourcesResult::~ListResourcesResult() {
  // @@protoc_insertion_point(destructor:mcp.ListResourcesResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListResourcesResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resources_.~RepeatedPtrField();
  _impl_.next_cursor_.Destroy();
}

void ListResourcesResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListResourcesResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ListResourcesResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resources_.Clear();
  _impl_.next_cursor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListResourcesResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mcp.Resource resources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.ListResourcesResult.next_cursor"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListResourcesResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ListResourcesResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mcp.Resource resources = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_resources_size()); i < n; i++) {
    const auto& repfield = this->_internal_resources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string next_cursor = 2;
  if (!this->_internal_next_cursor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_cursor().data(), static_cast<int>(this->_internal_next_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.ListResourcesResult.next_cursor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ListResourcesResult)
  return target;
}

size_t ListResourcesResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ListResourcesResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcp.Resource resources = 1;
  total_size += 1UL * this->_internal_resources_size();
  for (const auto& msg : this->_impl_.resources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_cursor = 2;
  if (!this->_internal_next_cursor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_cursor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListResourcesResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListResourcesResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListResourcesResult::GetClassData() const { return &_class_data_; }


void ListResourcesResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListResourcesResult*>(&to_msg);
  auto& from = static_cast<const ListResourcesResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ListResourcesResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.resources_.MergeFrom(from._impl_.resources_);
  if (!from._internal_next_cursor().empty()) {
    _this->_internal_set_next_cursor(from._internal_next_cursor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListResourcesResult::CopyFrom(const ListResourcesResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ListResourcesResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListResourcesResult::IsInitialized() const {
  return true;
}

void ListResourcesResult::InternalSwap(ListResourcesResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.resources_.InternalSwap(&other->_impl_.resources_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_cursor_, lhs_arena,
      &other->_impl_.next_cursor_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListResourcesResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[52]);
}

// ===================================================================

class ReadResourceRequest::_Internal {
 public:
  static const ::mcp::ReadResourceParams& params(const ReadResourceRequest* msg);
};

const ::mcp::ReadResourceParams&
ReadResourceRequest::_Internal::params(const ReadResourceRequest* msg) {
  return *msg->_impl_.params_;
}
ReadResourceRequest::ReadResourceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.ReadResourceRequest)
}
ReadResourceRequest::ReadResourceRequest(const ReadResourceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadResourceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.method_){}
    , decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method().empty()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_params()) {
    _this->_impl_.params_ = new ::mcp::ReadResourceParams(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:mcp.ReadResourceRequest)
}

inline void ReadResourceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.method_){}
    , decltype(_impl_.params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReadResourceRequest::~ReadResourceRequest() {
  // @@protoc_insertion_point(destructor:mcp.ReadResourceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadResourceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.method_.Destroy();
  if (this != internal_default_instance()) delete _impl_.params_;
}

void ReadResourceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadResourceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ReadResourceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.method_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadResourceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.ReadResourceRequest.method"));
        } else
          goto handle_unusual;
        continue;
      // .mcp.ReadResourceParams params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadResourceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ReadResourceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string method = 1;
  if (!this->_internal_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.ReadResourceRequest.method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method(), target);
  }

  // .mcp.ReadResourceParams params = 2;
  if (this->_internal_has_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ReadResourceRequest)
  return target;
}

size_t ReadResourceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ReadResourceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string method = 1;
  if (!this->_internal_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // .mcp.ReadResourceParams params = 2;
  if (this->_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadResourceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadResourceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadResourceRequest::GetClassData() const { return &_class_data_; }


void ReadResourceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadResourceRequest*>(&to_msg);
  auto& from = static_cast<const ReadResourceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ReadResourceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (from._internal_has_params()) {
    _this->_internal_mutable_params()->::mcp::ReadResourceParams::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadResourceRequest::CopyFrom(const ReadResourceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ReadResourceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResourceRequest::IsInitialized() const {
  return true;
}

void ReadResourceRequest::InternalSwap(ReadResourceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadResourceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[53]);
}

// ===================================================================

class ReadResourceParams::_Internal {
 public:
};

ReadResourceParams::ReadResourceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.ReadResourceParams)
}
ReadResourceParams::ReadResourceParams(const ReadResourceParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadResourceParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcp.ReadResourceParams)
}

inline void ReadResourceParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReadResourceParams::~ReadResourceParams() {
  // @@protoc_insertion_point(destructor:mcp.ReadResourceParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadResourceParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uri_.Destroy();
}

void ReadResourceParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadResourceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ReadResourceParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadResourceParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.ReadResourceParams.uri"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadResourceParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ReadResourceParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.ReadResourceParams.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ReadResourceParams)
  return target;
}

size_t ReadResourceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ReadResourceParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadResourceParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadResourceParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadResourceParams::GetClassData() const { return &_class_data_; }


void ReadResourceParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadResourceParams*>(&to_msg);
  auto& from = static_cast<const ReadResourceParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ReadResourceParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadResourceParams::CopyFrom(const ReadResourceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ReadResourceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResourceParams::IsInitialized() const {
  return true;
}

void ReadResourceParams::InternalSwap(ReadResourceParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadResourceParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[54]);
}

// ===================================================================

class ReadResourceResult::_Internal {
 public:
};

ReadResourceResult::ReadResourceResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.ReadResourceResult)
}
ReadResourceResult::ReadResourceResult(const ReadResourceResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadResourceResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contents_){from._impl_.contents_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mcp.ReadResourceResult)
}

inline void ReadResourceResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.contents_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReadResourceResult::~ReadResourceResult() {
  // @@protoc_insertion_point(destructor:mcp.ReadResourceResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadResourceResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contents_.~RepeatedPtrField();
}

void ReadResourceResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadResourceResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.ReadResourceResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contents_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadResourceResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mcp.ResourceContents contents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadResourceResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.ReadResourceResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mcp.ResourceContents contents = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contents_size()); i < n; i++) {
    const auto& repfield = this->_internal_contents(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.ReadResourceResult)
  return target;
}

size_t ReadResourceResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.ReadResourceResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcp.ResourceContents contents = 1;
  total_size += 1UL * this->_internal_contents_size();
  for (const auto& msg : this->_impl_.contents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadResourceResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadResourceResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadResourceResult::GetClassData() const { return &_class_data_; }


void ReadResourceResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadResourceResult*>(&to_msg);
  auto& from = static_cast<const ReadResourceResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.ReadResourceResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.contents_.MergeFrom(from._impl_.contents_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadResourceResult::CopyFrom(const ReadResourceResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.ReadResourceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResourceResult::IsInitialized() const {
  return true;
}

void ReadResourceResult::InternalSwap(ReadResourceResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.contents_.InternalSwap(&other->_impl_.contents_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadResourceResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[55]);
}

// ===================================================================

class PaginatedParams::_Internal {
 public:
};

PaginatedParams::PaginatedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcp.PaginatedParams)
}
PaginatedParams::PaginatedParams(const PaginatedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PaginatedParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cursor_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cursor().empty()) {
    _this->_impl_.cursor_.Set(from._internal_cursor(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcp.PaginatedParams)
}

inline void PaginatedParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cursor_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PaginatedParams::~PaginatedParams() {
  // @@protoc_insertion_point(destructor:mcp.PaginatedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaginatedParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cursor_.Destroy();
}

void PaginatedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PaginatedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:mcp.PaginatedParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cursor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaginatedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cursor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mcp.PaginatedParams.cursor"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaginatedParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcp.PaginatedParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cursor = 1;
  if (!this->_internal_cursor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcp.PaginatedParams.cursor");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcp.PaginatedParams)
  return target;
}

size_t PaginatedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcp.PaginatedParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cursor = 1;
  if (!this->_internal_cursor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaginatedParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PaginatedParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaginatedParams::GetClassData() const { return &_class_data_; }


void PaginatedParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PaginatedParams*>(&to_msg);
  auto& from = static_cast<const PaginatedParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcp.PaginatedParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cursor().empty()) {
    _this->_internal_set_cursor(from._internal_cursor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaginatedParams::CopyFrom(const PaginatedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcp.PaginatedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaginatedParams::IsInitialized() const {
  return true;
}

void PaginatedParams::InternalSwap(PaginatedParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cursor_, lhs_arena,
      &other->_impl_.cursor_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PaginatedParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mcp_2eproto_getter, &descriptor_table_mcp_2eproto_once,
      file_level_metadata_mcp_2eproto[56]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mcp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mcp::JSONRPCMessage*
Arena::CreateMaybeMessage< ::mcp::JSONRPCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::JSONRPCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::JSONRPCRequest*
Arena::CreateMaybeMessage< ::mcp::JSONRPCRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::JSONRPCRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::JSONRPCNotification*
Arena::CreateMaybeMessage< ::mcp::JSONRPCNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::JSONRPCNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::JSONRPCResponse*
Arena::CreateMaybeMessage< ::mcp::JSONRPCResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::JSONRPCResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::JSONRPCError*
Arena::CreateMaybeMessage< ::mcp::JSONRPCError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::JSONRPCError >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::JSONRPCBatchRequest*
Arena::CreateMaybeMessage< ::mcp::JSONRPCBatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::JSONRPCBatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::JSONRPCBatchResponse*
Arena::CreateMaybeMessage< ::mcp::JSONRPCBatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::JSONRPCBatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::RequestParams_AdditionalParamsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::mcp::RequestParams_AdditionalParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::RequestParams_AdditionalParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::RequestParams*
Arena::CreateMaybeMessage< ::mcp::RequestParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::RequestParams >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::NotificationParams_AdditionalParamsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::mcp::NotificationParams_AdditionalParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::NotificationParams_AdditionalParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::NotificationParams*
Arena::CreateMaybeMessage< ::mcp::NotificationParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::NotificationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::MetaParams_AdditionalMetaEntry_DoNotUse*
Arena::CreateMaybeMessage< ::mcp::MetaParams_AdditionalMetaEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::MetaParams_AdditionalMetaEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::MetaParams*
Arena::CreateMaybeMessage< ::mcp::MetaParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::MetaParams >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::Result_AdditionalResultEntry_DoNotUse*
Arena::CreateMaybeMessage< ::mcp::Result_AdditionalResultEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::Result_AdditionalResultEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::Result*
Arena::CreateMaybeMessage< ::mcp::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::MetaResult_AdditionalMetaEntry_DoNotUse*
Arena::CreateMaybeMessage< ::mcp::MetaResult_AdditionalMetaEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::MetaResult_AdditionalMetaEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::MetaResult*
Arena::CreateMaybeMessage< ::mcp::MetaResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::MetaResult >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::Error*
Arena::CreateMaybeMessage< ::mcp::Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::Error >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::Implementation*
Arena::CreateMaybeMessage< ::mcp::Implementation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::Implementation >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ClientCapabilities_ExperimentalEntry_DoNotUse*
Arena::CreateMaybeMessage< ::mcp::ClientCapabilities_ExperimentalEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ClientCapabilities_ExperimentalEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ClientCapabilities*
Arena::CreateMaybeMessage< ::mcp::ClientCapabilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ClientCapabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ServerCapabilities_ExperimentalEntry_DoNotUse*
Arena::CreateMaybeMessage< ::mcp::ServerCapabilities_ExperimentalEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ServerCapabilities_ExperimentalEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ServerCapabilities*
Arena::CreateMaybeMessage< ::mcp::ServerCapabilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ServerCapabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::RootsCapability*
Arena::CreateMaybeMessage< ::mcp::RootsCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::RootsCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::SamplingCapability*
Arena::CreateMaybeMessage< ::mcp::SamplingCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::SamplingCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::LoggingCapability*
Arena::CreateMaybeMessage< ::mcp::LoggingCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::LoggingCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::CompletionsCapability*
Arena::CreateMaybeMessage< ::mcp::CompletionsCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::CompletionsCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::PromptsCapability*
Arena::CreateMaybeMessage< ::mcp::PromptsCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::PromptsCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ResourcesCapability*
Arena::CreateMaybeMessage< ::mcp::ResourcesCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ResourcesCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ToolsCapability*
Arena::CreateMaybeMessage< ::mcp::ToolsCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ToolsCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::Resource*
Arena::CreateMaybeMessage< ::mcp::Resource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::Resource >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ResourceTemplate*
Arena::CreateMaybeMessage< ::mcp::ResourceTemplate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ResourceTemplate >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ResourceContents*
Arena::CreateMaybeMessage< ::mcp::ResourceContents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ResourceContents >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::TextResourceContents*
Arena::CreateMaybeMessage< ::mcp::TextResourceContents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::TextResourceContents >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::BlobResourceContents*
Arena::CreateMaybeMessage< ::mcp::BlobResourceContents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::BlobResourceContents >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::Tool*
Arena::CreateMaybeMessage< ::mcp::Tool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::Tool >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::InputSchema_PropertiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::mcp::InputSchema_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::InputSchema_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::InputSchema*
Arena::CreateMaybeMessage< ::mcp::InputSchema >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::InputSchema >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ToolAnnotations*
Arena::CreateMaybeMessage< ::mcp::ToolAnnotations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ToolAnnotations >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::Annotations*
Arena::CreateMaybeMessage< ::mcp::Annotations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::Annotations >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::TextContent*
Arena::CreateMaybeMessage< ::mcp::TextContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::TextContent >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ImageContent*
Arena::CreateMaybeMessage< ::mcp::ImageContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ImageContent >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::AudioContent*
Arena::CreateMaybeMessage< ::mcp::AudioContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::AudioContent >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ModelPreferences*
Arena::CreateMaybeMessage< ::mcp::ModelPreferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ModelPreferences >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ModelHint*
Arena::CreateMaybeMessage< ::mcp::ModelHint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ModelHint >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ResourceReference*
Arena::CreateMaybeMessage< ::mcp::ResourceReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ResourceReference >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::PromptReference*
Arena::CreateMaybeMessage< ::mcp::PromptReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::PromptReference >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::Root*
Arena::CreateMaybeMessage< ::mcp::Root >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::Root >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::InitializeRequest*
Arena::CreateMaybeMessage< ::mcp::InitializeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::InitializeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::InitializeParams*
Arena::CreateMaybeMessage< ::mcp::InitializeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::InitializeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::InitializeResult*
Arena::CreateMaybeMessage< ::mcp::InitializeResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::InitializeResult >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ListResourcesRequest*
Arena::CreateMaybeMessage< ::mcp::ListResourcesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ListResourcesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ListResourcesResult*
Arena::CreateMaybeMessage< ::mcp::ListResourcesResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ListResourcesResult >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ReadResourceRequest*
Arena::CreateMaybeMessage< ::mcp::ReadResourceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ReadResourceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ReadResourceParams*
Arena::CreateMaybeMessage< ::mcp::ReadResourceParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ReadResourceParams >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::ReadResourceResult*
Arena::CreateMaybeMessage< ::mcp::ReadResourceResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::ReadResourceResult >(arena);
}
template<> PROTOBUF_NOINLINE ::mcp::PaginatedParams*
Arena::CreateMaybeMessage< ::mcp::PaginatedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcp::PaginatedParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
