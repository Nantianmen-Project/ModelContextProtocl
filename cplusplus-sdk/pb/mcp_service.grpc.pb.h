// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mcp_service.proto
#ifndef GRPC_mcp_5fservice_2eproto__INCLUDED
#define GRPC_mcp_5fservice_2eproto__INCLUDED

#include "mcp_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace mcp {

// Service definition for MCP core functionality
class MCPService final {
 public:
  static constexpr char const* service_full_name() {
    return "mcp.MCPService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Registration and initialization
    virtual ::grpc::Status Register(::grpc::ClientContext* context, const ::mcp::RegisterRequest& request, ::mcp::RegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterResponse>> AsyncRegister(::grpc::ClientContext* context, const ::mcp::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::mcp::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status Initialize(::grpc::ClientContext* context, const ::mcp::InitializeRequest& request, ::mcp::InitializeResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::InitializeResult>> AsyncInitialize(::grpc::ClientContext* context, const ::mcp::InitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::InitializeResult>>(AsyncInitializeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::InitializeResult>> PrepareAsyncInitialize(::grpc::ClientContext* context, const ::mcp::InitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::InitializeResult>>(PrepareAsyncInitializeRaw(context, request, cq));
    }
    // Message handling
    virtual ::grpc::Status HandleRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCRequest& request, ::mcp::JSONRPCResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::JSONRPCResponse>> AsyncHandleRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::JSONRPCResponse>>(AsyncHandleRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::JSONRPCResponse>> PrepareAsyncHandleRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::JSONRPCResponse>>(PrepareAsyncHandleRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status HandleNotification(::grpc::ClientContext* context, const ::mcp::JSONRPCNotification& request, ::mcp::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::Empty>> AsyncHandleNotification(::grpc::ClientContext* context, const ::mcp::JSONRPCNotification& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::Empty>>(AsyncHandleNotificationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::Empty>> PrepareAsyncHandleNotification(::grpc::ClientContext* context, const ::mcp::JSONRPCNotification& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::Empty>>(PrepareAsyncHandleNotificationRaw(context, request, cq));
    }
    virtual ::grpc::Status HandleBatchRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCBatchRequest& request, ::mcp::JSONRPCBatchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::JSONRPCBatchResponse>> AsyncHandleBatchRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCBatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::JSONRPCBatchResponse>>(AsyncHandleBatchRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::JSONRPCBatchResponse>> PrepareAsyncHandleBatchRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCBatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::JSONRPCBatchResponse>>(PrepareAsyncHandleBatchRequestRaw(context, request, cq));
    }
    // Schema management
    virtual ::grpc::Status RegisterInputSchema(::grpc::ClientContext* context, const ::mcp::RegisterInputSchemaRequest& request, ::mcp::RegisterInputSchemaResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterInputSchemaResponse>> AsyncRegisterInputSchema(::grpc::ClientContext* context, const ::mcp::RegisterInputSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterInputSchemaResponse>>(AsyncRegisterInputSchemaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterInputSchemaResponse>> PrepareAsyncRegisterInputSchema(::grpc::ClientContext* context, const ::mcp::RegisterInputSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterInputSchemaResponse>>(PrepareAsyncRegisterInputSchemaRaw(context, request, cq));
    }
    virtual ::grpc::Status GetInputSchema(::grpc::ClientContext* context, const ::mcp::GetInputSchemaRequest& request, ::mcp::InputSchema* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::InputSchema>> AsyncGetInputSchema(::grpc::ClientContext* context, const ::mcp::GetInputSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::InputSchema>>(AsyncGetInputSchemaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::InputSchema>> PrepareAsyncGetInputSchema(::grpc::ClientContext* context, const ::mcp::GetInputSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::InputSchema>>(PrepareAsyncGetInputSchemaRaw(context, request, cq));
    }
    // Resource management
    virtual ::grpc::Status ListResources(::grpc::ClientContext* context, const ::mcp::ListResourcesRequest& request, ::mcp::ListResourcesResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ListResourcesResult>> AsyncListResources(::grpc::ClientContext* context, const ::mcp::ListResourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ListResourcesResult>>(AsyncListResourcesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ListResourcesResult>> PrepareAsyncListResources(::grpc::ClientContext* context, const ::mcp::ListResourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ListResourcesResult>>(PrepareAsyncListResourcesRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadResource(::grpc::ClientContext* context, const ::mcp::ReadResourceRequest& request, ::mcp::ReadResourceResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ReadResourceResult>> AsyncReadResource(::grpc::ClientContext* context, const ::mcp::ReadResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ReadResourceResult>>(AsyncReadResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ReadResourceResult>> PrepareAsyncReadResource(::grpc::ClientContext* context, const ::mcp::ReadResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ReadResourceResult>>(PrepareAsyncReadResourceRaw(context, request, cq));
    }
    // Tool management
    virtual ::grpc::Status RegisterTool(::grpc::ClientContext* context, const ::mcp::RegisterToolRequest& request, ::mcp::RegisterToolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterToolResponse>> AsyncRegisterTool(::grpc::ClientContext* context, const ::mcp::RegisterToolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterToolResponse>>(AsyncRegisterToolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterToolResponse>> PrepareAsyncRegisterTool(::grpc::ClientContext* context, const ::mcp::RegisterToolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterToolResponse>>(PrepareAsyncRegisterToolRaw(context, request, cq));
    }
    virtual ::grpc::Status ListTools(::grpc::ClientContext* context, const ::mcp::ListToolsRequest& request, ::mcp::ListToolsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ListToolsResponse>> AsyncListTools(::grpc::ClientContext* context, const ::mcp::ListToolsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ListToolsResponse>>(AsyncListToolsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ListToolsResponse>> PrepareAsyncListTools(::grpc::ClientContext* context, const ::mcp::ListToolsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ListToolsResponse>>(PrepareAsyncListToolsRaw(context, request, cq));
    }
    // Prompt management
    virtual ::grpc::Status RegisterPrompt(::grpc::ClientContext* context, const ::mcp::RegisterPromptRequest& request, ::mcp::RegisterPromptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterPromptResponse>> AsyncRegisterPrompt(::grpc::ClientContext* context, const ::mcp::RegisterPromptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterPromptResponse>>(AsyncRegisterPromptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterPromptResponse>> PrepareAsyncRegisterPrompt(::grpc::ClientContext* context, const ::mcp::RegisterPromptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterPromptResponse>>(PrepareAsyncRegisterPromptRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPrompt(::grpc::ClientContext* context, const ::mcp::GetPromptRequest& request, ::mcp::Prompt* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::Prompt>> AsyncGetPrompt(::grpc::ClientContext* context, const ::mcp::GetPromptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::Prompt>>(AsyncGetPromptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::Prompt>> PrepareAsyncGetPrompt(::grpc::ClientContext* context, const ::mcp::GetPromptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::Prompt>>(PrepareAsyncGetPromptRaw(context, request, cq));
    }
    virtual ::grpc::Status ListPrompts(::grpc::ClientContext* context, const ::mcp::ListPromptsRequest& request, ::mcp::ListPromptsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ListPromptsResponse>> AsyncListPrompts(::grpc::ClientContext* context, const ::mcp::ListPromptsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ListPromptsResponse>>(AsyncListPromptsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ListPromptsResponse>> PrepareAsyncListPrompts(::grpc::ClientContext* context, const ::mcp::ListPromptsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ListPromptsResponse>>(PrepareAsyncListPromptsRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdatePrompt(::grpc::ClientContext* context, const ::mcp::UpdatePromptRequest& request, ::mcp::UpdatePromptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::UpdatePromptResponse>> AsyncUpdatePrompt(::grpc::ClientContext* context, const ::mcp::UpdatePromptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::UpdatePromptResponse>>(AsyncUpdatePromptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::UpdatePromptResponse>> PrepareAsyncUpdatePrompt(::grpc::ClientContext* context, const ::mcp::UpdatePromptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::UpdatePromptResponse>>(PrepareAsyncUpdatePromptRaw(context, request, cq));
    }
    virtual ::grpc::Status DeletePrompt(::grpc::ClientContext* context, const ::mcp::DeletePromptRequest& request, ::mcp::DeletePromptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::DeletePromptResponse>> AsyncDeletePrompt(::grpc::ClientContext* context, const ::mcp::DeletePromptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::DeletePromptResponse>>(AsyncDeletePromptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::DeletePromptResponse>> PrepareAsyncDeletePrompt(::grpc::ClientContext* context, const ::mcp::DeletePromptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcp::DeletePromptResponse>>(PrepareAsyncDeletePromptRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Registration and initialization
      virtual void Register(::grpc::ClientContext* context, const ::mcp::RegisterRequest* request, ::mcp::RegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::mcp::RegisterRequest* request, ::mcp::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Initialize(::grpc::ClientContext* context, const ::mcp::InitializeRequest* request, ::mcp::InitializeResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Initialize(::grpc::ClientContext* context, const ::mcp::InitializeRequest* request, ::mcp::InitializeResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Message handling
      virtual void HandleRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCRequest* request, ::mcp::JSONRPCResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandleRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCRequest* request, ::mcp::JSONRPCResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HandleNotification(::grpc::ClientContext* context, const ::mcp::JSONRPCNotification* request, ::mcp::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandleNotification(::grpc::ClientContext* context, const ::mcp::JSONRPCNotification* request, ::mcp::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HandleBatchRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCBatchRequest* request, ::mcp::JSONRPCBatchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandleBatchRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCBatchRequest* request, ::mcp::JSONRPCBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Schema management
      virtual void RegisterInputSchema(::grpc::ClientContext* context, const ::mcp::RegisterInputSchemaRequest* request, ::mcp::RegisterInputSchemaResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterInputSchema(::grpc::ClientContext* context, const ::mcp::RegisterInputSchemaRequest* request, ::mcp::RegisterInputSchemaResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetInputSchema(::grpc::ClientContext* context, const ::mcp::GetInputSchemaRequest* request, ::mcp::InputSchema* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetInputSchema(::grpc::ClientContext* context, const ::mcp::GetInputSchemaRequest* request, ::mcp::InputSchema* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Resource management
      virtual void ListResources(::grpc::ClientContext* context, const ::mcp::ListResourcesRequest* request, ::mcp::ListResourcesResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListResources(::grpc::ClientContext* context, const ::mcp::ListResourcesRequest* request, ::mcp::ListResourcesResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReadResource(::grpc::ClientContext* context, const ::mcp::ReadResourceRequest* request, ::mcp::ReadResourceResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadResource(::grpc::ClientContext* context, const ::mcp::ReadResourceRequest* request, ::mcp::ReadResourceResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Tool management
      virtual void RegisterTool(::grpc::ClientContext* context, const ::mcp::RegisterToolRequest* request, ::mcp::RegisterToolResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterTool(::grpc::ClientContext* context, const ::mcp::RegisterToolRequest* request, ::mcp::RegisterToolResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListTools(::grpc::ClientContext* context, const ::mcp::ListToolsRequest* request, ::mcp::ListToolsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListTools(::grpc::ClientContext* context, const ::mcp::ListToolsRequest* request, ::mcp::ListToolsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Prompt management
      virtual void RegisterPrompt(::grpc::ClientContext* context, const ::mcp::RegisterPromptRequest* request, ::mcp::RegisterPromptResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterPrompt(::grpc::ClientContext* context, const ::mcp::RegisterPromptRequest* request, ::mcp::RegisterPromptResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPrompt(::grpc::ClientContext* context, const ::mcp::GetPromptRequest* request, ::mcp::Prompt* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPrompt(::grpc::ClientContext* context, const ::mcp::GetPromptRequest* request, ::mcp::Prompt* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListPrompts(::grpc::ClientContext* context, const ::mcp::ListPromptsRequest* request, ::mcp::ListPromptsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListPrompts(::grpc::ClientContext* context, const ::mcp::ListPromptsRequest* request, ::mcp::ListPromptsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdatePrompt(::grpc::ClientContext* context, const ::mcp::UpdatePromptRequest* request, ::mcp::UpdatePromptResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdatePrompt(::grpc::ClientContext* context, const ::mcp::UpdatePromptRequest* request, ::mcp::UpdatePromptResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeletePrompt(::grpc::ClientContext* context, const ::mcp::DeletePromptRequest* request, ::mcp::DeletePromptResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeletePrompt(::grpc::ClientContext* context, const ::mcp::DeletePromptRequest* request, ::mcp::DeletePromptResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::mcp::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::mcp::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::InitializeResult>* AsyncInitializeRaw(::grpc::ClientContext* context, const ::mcp::InitializeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::InitializeResult>* PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::mcp::InitializeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::JSONRPCResponse>* AsyncHandleRequestRaw(::grpc::ClientContext* context, const ::mcp::JSONRPCRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::JSONRPCResponse>* PrepareAsyncHandleRequestRaw(::grpc::ClientContext* context, const ::mcp::JSONRPCRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::Empty>* AsyncHandleNotificationRaw(::grpc::ClientContext* context, const ::mcp::JSONRPCNotification& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::Empty>* PrepareAsyncHandleNotificationRaw(::grpc::ClientContext* context, const ::mcp::JSONRPCNotification& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::JSONRPCBatchResponse>* AsyncHandleBatchRequestRaw(::grpc::ClientContext* context, const ::mcp::JSONRPCBatchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::JSONRPCBatchResponse>* PrepareAsyncHandleBatchRequestRaw(::grpc::ClientContext* context, const ::mcp::JSONRPCBatchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterInputSchemaResponse>* AsyncRegisterInputSchemaRaw(::grpc::ClientContext* context, const ::mcp::RegisterInputSchemaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterInputSchemaResponse>* PrepareAsyncRegisterInputSchemaRaw(::grpc::ClientContext* context, const ::mcp::RegisterInputSchemaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::InputSchema>* AsyncGetInputSchemaRaw(::grpc::ClientContext* context, const ::mcp::GetInputSchemaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::InputSchema>* PrepareAsyncGetInputSchemaRaw(::grpc::ClientContext* context, const ::mcp::GetInputSchemaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ListResourcesResult>* AsyncListResourcesRaw(::grpc::ClientContext* context, const ::mcp::ListResourcesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ListResourcesResult>* PrepareAsyncListResourcesRaw(::grpc::ClientContext* context, const ::mcp::ListResourcesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ReadResourceResult>* AsyncReadResourceRaw(::grpc::ClientContext* context, const ::mcp::ReadResourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ReadResourceResult>* PrepareAsyncReadResourceRaw(::grpc::ClientContext* context, const ::mcp::ReadResourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterToolResponse>* AsyncRegisterToolRaw(::grpc::ClientContext* context, const ::mcp::RegisterToolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterToolResponse>* PrepareAsyncRegisterToolRaw(::grpc::ClientContext* context, const ::mcp::RegisterToolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ListToolsResponse>* AsyncListToolsRaw(::grpc::ClientContext* context, const ::mcp::ListToolsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ListToolsResponse>* PrepareAsyncListToolsRaw(::grpc::ClientContext* context, const ::mcp::ListToolsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterPromptResponse>* AsyncRegisterPromptRaw(::grpc::ClientContext* context, const ::mcp::RegisterPromptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::RegisterPromptResponse>* PrepareAsyncRegisterPromptRaw(::grpc::ClientContext* context, const ::mcp::RegisterPromptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::Prompt>* AsyncGetPromptRaw(::grpc::ClientContext* context, const ::mcp::GetPromptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::Prompt>* PrepareAsyncGetPromptRaw(::grpc::ClientContext* context, const ::mcp::GetPromptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ListPromptsResponse>* AsyncListPromptsRaw(::grpc::ClientContext* context, const ::mcp::ListPromptsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::ListPromptsResponse>* PrepareAsyncListPromptsRaw(::grpc::ClientContext* context, const ::mcp::ListPromptsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::UpdatePromptResponse>* AsyncUpdatePromptRaw(::grpc::ClientContext* context, const ::mcp::UpdatePromptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::UpdatePromptResponse>* PrepareAsyncUpdatePromptRaw(::grpc::ClientContext* context, const ::mcp::UpdatePromptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::DeletePromptResponse>* AsyncDeletePromptRaw(::grpc::ClientContext* context, const ::mcp::DeletePromptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcp::DeletePromptResponse>* PrepareAsyncDeletePromptRaw(::grpc::ClientContext* context, const ::mcp::DeletePromptRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Register(::grpc::ClientContext* context, const ::mcp::RegisterRequest& request, ::mcp::RegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::RegisterResponse>> AsyncRegister(::grpc::ClientContext* context, const ::mcp::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::RegisterResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::RegisterResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::mcp::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::RegisterResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    ::grpc::Status Initialize(::grpc::ClientContext* context, const ::mcp::InitializeRequest& request, ::mcp::InitializeResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::InitializeResult>> AsyncInitialize(::grpc::ClientContext* context, const ::mcp::InitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::InitializeResult>>(AsyncInitializeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::InitializeResult>> PrepareAsyncInitialize(::grpc::ClientContext* context, const ::mcp::InitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::InitializeResult>>(PrepareAsyncInitializeRaw(context, request, cq));
    }
    ::grpc::Status HandleRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCRequest& request, ::mcp::JSONRPCResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::JSONRPCResponse>> AsyncHandleRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::JSONRPCResponse>>(AsyncHandleRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::JSONRPCResponse>> PrepareAsyncHandleRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::JSONRPCResponse>>(PrepareAsyncHandleRequestRaw(context, request, cq));
    }
    ::grpc::Status HandleNotification(::grpc::ClientContext* context, const ::mcp::JSONRPCNotification& request, ::mcp::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::Empty>> AsyncHandleNotification(::grpc::ClientContext* context, const ::mcp::JSONRPCNotification& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::Empty>>(AsyncHandleNotificationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::Empty>> PrepareAsyncHandleNotification(::grpc::ClientContext* context, const ::mcp::JSONRPCNotification& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::Empty>>(PrepareAsyncHandleNotificationRaw(context, request, cq));
    }
    ::grpc::Status HandleBatchRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCBatchRequest& request, ::mcp::JSONRPCBatchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::JSONRPCBatchResponse>> AsyncHandleBatchRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCBatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::JSONRPCBatchResponse>>(AsyncHandleBatchRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::JSONRPCBatchResponse>> PrepareAsyncHandleBatchRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCBatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::JSONRPCBatchResponse>>(PrepareAsyncHandleBatchRequestRaw(context, request, cq));
    }
    ::grpc::Status RegisterInputSchema(::grpc::ClientContext* context, const ::mcp::RegisterInputSchemaRequest& request, ::mcp::RegisterInputSchemaResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::RegisterInputSchemaResponse>> AsyncRegisterInputSchema(::grpc::ClientContext* context, const ::mcp::RegisterInputSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::RegisterInputSchemaResponse>>(AsyncRegisterInputSchemaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::RegisterInputSchemaResponse>> PrepareAsyncRegisterInputSchema(::grpc::ClientContext* context, const ::mcp::RegisterInputSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::RegisterInputSchemaResponse>>(PrepareAsyncRegisterInputSchemaRaw(context, request, cq));
    }
    ::grpc::Status GetInputSchema(::grpc::ClientContext* context, const ::mcp::GetInputSchemaRequest& request, ::mcp::InputSchema* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::InputSchema>> AsyncGetInputSchema(::grpc::ClientContext* context, const ::mcp::GetInputSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::InputSchema>>(AsyncGetInputSchemaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::InputSchema>> PrepareAsyncGetInputSchema(::grpc::ClientContext* context, const ::mcp::GetInputSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::InputSchema>>(PrepareAsyncGetInputSchemaRaw(context, request, cq));
    }
    ::grpc::Status ListResources(::grpc::ClientContext* context, const ::mcp::ListResourcesRequest& request, ::mcp::ListResourcesResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::ListResourcesResult>> AsyncListResources(::grpc::ClientContext* context, const ::mcp::ListResourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::ListResourcesResult>>(AsyncListResourcesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::ListResourcesResult>> PrepareAsyncListResources(::grpc::ClientContext* context, const ::mcp::ListResourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::ListResourcesResult>>(PrepareAsyncListResourcesRaw(context, request, cq));
    }
    ::grpc::Status ReadResource(::grpc::ClientContext* context, const ::mcp::ReadResourceRequest& request, ::mcp::ReadResourceResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::ReadResourceResult>> AsyncReadResource(::grpc::ClientContext* context, const ::mcp::ReadResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::ReadResourceResult>>(AsyncReadResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::ReadResourceResult>> PrepareAsyncReadResource(::grpc::ClientContext* context, const ::mcp::ReadResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::ReadResourceResult>>(PrepareAsyncReadResourceRaw(context, request, cq));
    }
    ::grpc::Status RegisterTool(::grpc::ClientContext* context, const ::mcp::RegisterToolRequest& request, ::mcp::RegisterToolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::RegisterToolResponse>> AsyncRegisterTool(::grpc::ClientContext* context, const ::mcp::RegisterToolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::RegisterToolResponse>>(AsyncRegisterToolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::RegisterToolResponse>> PrepareAsyncRegisterTool(::grpc::ClientContext* context, const ::mcp::RegisterToolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::RegisterToolResponse>>(PrepareAsyncRegisterToolRaw(context, request, cq));
    }
    ::grpc::Status ListTools(::grpc::ClientContext* context, const ::mcp::ListToolsRequest& request, ::mcp::ListToolsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::ListToolsResponse>> AsyncListTools(::grpc::ClientContext* context, const ::mcp::ListToolsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::ListToolsResponse>>(AsyncListToolsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::ListToolsResponse>> PrepareAsyncListTools(::grpc::ClientContext* context, const ::mcp::ListToolsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::ListToolsResponse>>(PrepareAsyncListToolsRaw(context, request, cq));
    }
    ::grpc::Status RegisterPrompt(::grpc::ClientContext* context, const ::mcp::RegisterPromptRequest& request, ::mcp::RegisterPromptResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::RegisterPromptResponse>> AsyncRegisterPrompt(::grpc::ClientContext* context, const ::mcp::RegisterPromptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::RegisterPromptResponse>>(AsyncRegisterPromptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::RegisterPromptResponse>> PrepareAsyncRegisterPrompt(::grpc::ClientContext* context, const ::mcp::RegisterPromptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::RegisterPromptResponse>>(PrepareAsyncRegisterPromptRaw(context, request, cq));
    }
    ::grpc::Status GetPrompt(::grpc::ClientContext* context, const ::mcp::GetPromptRequest& request, ::mcp::Prompt* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::Prompt>> AsyncGetPrompt(::grpc::ClientContext* context, const ::mcp::GetPromptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::Prompt>>(AsyncGetPromptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::Prompt>> PrepareAsyncGetPrompt(::grpc::ClientContext* context, const ::mcp::GetPromptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::Prompt>>(PrepareAsyncGetPromptRaw(context, request, cq));
    }
    ::grpc::Status ListPrompts(::grpc::ClientContext* context, const ::mcp::ListPromptsRequest& request, ::mcp::ListPromptsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::ListPromptsResponse>> AsyncListPrompts(::grpc::ClientContext* context, const ::mcp::ListPromptsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::ListPromptsResponse>>(AsyncListPromptsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::ListPromptsResponse>> PrepareAsyncListPrompts(::grpc::ClientContext* context, const ::mcp::ListPromptsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::ListPromptsResponse>>(PrepareAsyncListPromptsRaw(context, request, cq));
    }
    ::grpc::Status UpdatePrompt(::grpc::ClientContext* context, const ::mcp::UpdatePromptRequest& request, ::mcp::UpdatePromptResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::UpdatePromptResponse>> AsyncUpdatePrompt(::grpc::ClientContext* context, const ::mcp::UpdatePromptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::UpdatePromptResponse>>(AsyncUpdatePromptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::UpdatePromptResponse>> PrepareAsyncUpdatePrompt(::grpc::ClientContext* context, const ::mcp::UpdatePromptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::UpdatePromptResponse>>(PrepareAsyncUpdatePromptRaw(context, request, cq));
    }
    ::grpc::Status DeletePrompt(::grpc::ClientContext* context, const ::mcp::DeletePromptRequest& request, ::mcp::DeletePromptResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::DeletePromptResponse>> AsyncDeletePrompt(::grpc::ClientContext* context, const ::mcp::DeletePromptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::DeletePromptResponse>>(AsyncDeletePromptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::DeletePromptResponse>> PrepareAsyncDeletePrompt(::grpc::ClientContext* context, const ::mcp::DeletePromptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcp::DeletePromptResponse>>(PrepareAsyncDeletePromptRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Register(::grpc::ClientContext* context, const ::mcp::RegisterRequest* request, ::mcp::RegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void Register(::grpc::ClientContext* context, const ::mcp::RegisterRequest* request, ::mcp::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Initialize(::grpc::ClientContext* context, const ::mcp::InitializeRequest* request, ::mcp::InitializeResult* response, std::function<void(::grpc::Status)>) override;
      void Initialize(::grpc::ClientContext* context, const ::mcp::InitializeRequest* request, ::mcp::InitializeResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HandleRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCRequest* request, ::mcp::JSONRPCResponse* response, std::function<void(::grpc::Status)>) override;
      void HandleRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCRequest* request, ::mcp::JSONRPCResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HandleNotification(::grpc::ClientContext* context, const ::mcp::JSONRPCNotification* request, ::mcp::Empty* response, std::function<void(::grpc::Status)>) override;
      void HandleNotification(::grpc::ClientContext* context, const ::mcp::JSONRPCNotification* request, ::mcp::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HandleBatchRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCBatchRequest* request, ::mcp::JSONRPCBatchResponse* response, std::function<void(::grpc::Status)>) override;
      void HandleBatchRequest(::grpc::ClientContext* context, const ::mcp::JSONRPCBatchRequest* request, ::mcp::JSONRPCBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterInputSchema(::grpc::ClientContext* context, const ::mcp::RegisterInputSchemaRequest* request, ::mcp::RegisterInputSchemaResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterInputSchema(::grpc::ClientContext* context, const ::mcp::RegisterInputSchemaRequest* request, ::mcp::RegisterInputSchemaResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetInputSchema(::grpc::ClientContext* context, const ::mcp::GetInputSchemaRequest* request, ::mcp::InputSchema* response, std::function<void(::grpc::Status)>) override;
      void GetInputSchema(::grpc::ClientContext* context, const ::mcp::GetInputSchemaRequest* request, ::mcp::InputSchema* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListResources(::grpc::ClientContext* context, const ::mcp::ListResourcesRequest* request, ::mcp::ListResourcesResult* response, std::function<void(::grpc::Status)>) override;
      void ListResources(::grpc::ClientContext* context, const ::mcp::ListResourcesRequest* request, ::mcp::ListResourcesResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadResource(::grpc::ClientContext* context, const ::mcp::ReadResourceRequest* request, ::mcp::ReadResourceResult* response, std::function<void(::grpc::Status)>) override;
      void ReadResource(::grpc::ClientContext* context, const ::mcp::ReadResourceRequest* request, ::mcp::ReadResourceResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterTool(::grpc::ClientContext* context, const ::mcp::RegisterToolRequest* request, ::mcp::RegisterToolResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterTool(::grpc::ClientContext* context, const ::mcp::RegisterToolRequest* request, ::mcp::RegisterToolResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListTools(::grpc::ClientContext* context, const ::mcp::ListToolsRequest* request, ::mcp::ListToolsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListTools(::grpc::ClientContext* context, const ::mcp::ListToolsRequest* request, ::mcp::ListToolsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterPrompt(::grpc::ClientContext* context, const ::mcp::RegisterPromptRequest* request, ::mcp::RegisterPromptResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterPrompt(::grpc::ClientContext* context, const ::mcp::RegisterPromptRequest* request, ::mcp::RegisterPromptResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPrompt(::grpc::ClientContext* context, const ::mcp::GetPromptRequest* request, ::mcp::Prompt* response, std::function<void(::grpc::Status)>) override;
      void GetPrompt(::grpc::ClientContext* context, const ::mcp::GetPromptRequest* request, ::mcp::Prompt* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListPrompts(::grpc::ClientContext* context, const ::mcp::ListPromptsRequest* request, ::mcp::ListPromptsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListPrompts(::grpc::ClientContext* context, const ::mcp::ListPromptsRequest* request, ::mcp::ListPromptsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdatePrompt(::grpc::ClientContext* context, const ::mcp::UpdatePromptRequest* request, ::mcp::UpdatePromptResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdatePrompt(::grpc::ClientContext* context, const ::mcp::UpdatePromptRequest* request, ::mcp::UpdatePromptResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeletePrompt(::grpc::ClientContext* context, const ::mcp::DeletePromptRequest* request, ::mcp::DeletePromptResponse* response, std::function<void(::grpc::Status)>) override;
      void DeletePrompt(::grpc::ClientContext* context, const ::mcp::DeletePromptRequest* request, ::mcp::DeletePromptResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mcp::RegisterResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::mcp::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::RegisterResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::mcp::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::InitializeResult>* AsyncInitializeRaw(::grpc::ClientContext* context, const ::mcp::InitializeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::InitializeResult>* PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::mcp::InitializeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::JSONRPCResponse>* AsyncHandleRequestRaw(::grpc::ClientContext* context, const ::mcp::JSONRPCRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::JSONRPCResponse>* PrepareAsyncHandleRequestRaw(::grpc::ClientContext* context, const ::mcp::JSONRPCRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::Empty>* AsyncHandleNotificationRaw(::grpc::ClientContext* context, const ::mcp::JSONRPCNotification& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::Empty>* PrepareAsyncHandleNotificationRaw(::grpc::ClientContext* context, const ::mcp::JSONRPCNotification& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::JSONRPCBatchResponse>* AsyncHandleBatchRequestRaw(::grpc::ClientContext* context, const ::mcp::JSONRPCBatchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::JSONRPCBatchResponse>* PrepareAsyncHandleBatchRequestRaw(::grpc::ClientContext* context, const ::mcp::JSONRPCBatchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::RegisterInputSchemaResponse>* AsyncRegisterInputSchemaRaw(::grpc::ClientContext* context, const ::mcp::RegisterInputSchemaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::RegisterInputSchemaResponse>* PrepareAsyncRegisterInputSchemaRaw(::grpc::ClientContext* context, const ::mcp::RegisterInputSchemaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::InputSchema>* AsyncGetInputSchemaRaw(::grpc::ClientContext* context, const ::mcp::GetInputSchemaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::InputSchema>* PrepareAsyncGetInputSchemaRaw(::grpc::ClientContext* context, const ::mcp::GetInputSchemaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::ListResourcesResult>* AsyncListResourcesRaw(::grpc::ClientContext* context, const ::mcp::ListResourcesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::ListResourcesResult>* PrepareAsyncListResourcesRaw(::grpc::ClientContext* context, const ::mcp::ListResourcesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::ReadResourceResult>* AsyncReadResourceRaw(::grpc::ClientContext* context, const ::mcp::ReadResourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::ReadResourceResult>* PrepareAsyncReadResourceRaw(::grpc::ClientContext* context, const ::mcp::ReadResourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::RegisterToolResponse>* AsyncRegisterToolRaw(::grpc::ClientContext* context, const ::mcp::RegisterToolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::RegisterToolResponse>* PrepareAsyncRegisterToolRaw(::grpc::ClientContext* context, const ::mcp::RegisterToolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::ListToolsResponse>* AsyncListToolsRaw(::grpc::ClientContext* context, const ::mcp::ListToolsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::ListToolsResponse>* PrepareAsyncListToolsRaw(::grpc::ClientContext* context, const ::mcp::ListToolsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::RegisterPromptResponse>* AsyncRegisterPromptRaw(::grpc::ClientContext* context, const ::mcp::RegisterPromptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::RegisterPromptResponse>* PrepareAsyncRegisterPromptRaw(::grpc::ClientContext* context, const ::mcp::RegisterPromptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::Prompt>* AsyncGetPromptRaw(::grpc::ClientContext* context, const ::mcp::GetPromptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::Prompt>* PrepareAsyncGetPromptRaw(::grpc::ClientContext* context, const ::mcp::GetPromptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::ListPromptsResponse>* AsyncListPromptsRaw(::grpc::ClientContext* context, const ::mcp::ListPromptsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::ListPromptsResponse>* PrepareAsyncListPromptsRaw(::grpc::ClientContext* context, const ::mcp::ListPromptsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::UpdatePromptResponse>* AsyncUpdatePromptRaw(::grpc::ClientContext* context, const ::mcp::UpdatePromptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::UpdatePromptResponse>* PrepareAsyncUpdatePromptRaw(::grpc::ClientContext* context, const ::mcp::UpdatePromptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::DeletePromptResponse>* AsyncDeletePromptRaw(::grpc::ClientContext* context, const ::mcp::DeletePromptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcp::DeletePromptResponse>* PrepareAsyncDeletePromptRaw(::grpc::ClientContext* context, const ::mcp::DeletePromptRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Register_;
    const ::grpc::internal::RpcMethod rpcmethod_Initialize_;
    const ::grpc::internal::RpcMethod rpcmethod_HandleRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_HandleNotification_;
    const ::grpc::internal::RpcMethod rpcmethod_HandleBatchRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterInputSchema_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInputSchema_;
    const ::grpc::internal::RpcMethod rpcmethod_ListResources_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadResource_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterTool_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTools_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterPrompt_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPrompt_;
    const ::grpc::internal::RpcMethod rpcmethod_ListPrompts_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdatePrompt_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePrompt_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Registration and initialization
    virtual ::grpc::Status Register(::grpc::ServerContext* context, const ::mcp::RegisterRequest* request, ::mcp::RegisterResponse* response);
    virtual ::grpc::Status Initialize(::grpc::ServerContext* context, const ::mcp::InitializeRequest* request, ::mcp::InitializeResult* response);
    // Message handling
    virtual ::grpc::Status HandleRequest(::grpc::ServerContext* context, const ::mcp::JSONRPCRequest* request, ::mcp::JSONRPCResponse* response);
    virtual ::grpc::Status HandleNotification(::grpc::ServerContext* context, const ::mcp::JSONRPCNotification* request, ::mcp::Empty* response);
    virtual ::grpc::Status HandleBatchRequest(::grpc::ServerContext* context, const ::mcp::JSONRPCBatchRequest* request, ::mcp::JSONRPCBatchResponse* response);
    // Schema management
    virtual ::grpc::Status RegisterInputSchema(::grpc::ServerContext* context, const ::mcp::RegisterInputSchemaRequest* request, ::mcp::RegisterInputSchemaResponse* response);
    virtual ::grpc::Status GetInputSchema(::grpc::ServerContext* context, const ::mcp::GetInputSchemaRequest* request, ::mcp::InputSchema* response);
    // Resource management
    virtual ::grpc::Status ListResources(::grpc::ServerContext* context, const ::mcp::ListResourcesRequest* request, ::mcp::ListResourcesResult* response);
    virtual ::grpc::Status ReadResource(::grpc::ServerContext* context, const ::mcp::ReadResourceRequest* request, ::mcp::ReadResourceResult* response);
    // Tool management
    virtual ::grpc::Status RegisterTool(::grpc::ServerContext* context, const ::mcp::RegisterToolRequest* request, ::mcp::RegisterToolResponse* response);
    virtual ::grpc::Status ListTools(::grpc::ServerContext* context, const ::mcp::ListToolsRequest* request, ::mcp::ListToolsResponse* response);
    // Prompt management
    virtual ::grpc::Status RegisterPrompt(::grpc::ServerContext* context, const ::mcp::RegisterPromptRequest* request, ::mcp::RegisterPromptResponse* response);
    virtual ::grpc::Status GetPrompt(::grpc::ServerContext* context, const ::mcp::GetPromptRequest* request, ::mcp::Prompt* response);
    virtual ::grpc::Status ListPrompts(::grpc::ServerContext* context, const ::mcp::ListPromptsRequest* request, ::mcp::ListPromptsResponse* response);
    virtual ::grpc::Status UpdatePrompt(::grpc::ServerContext* context, const ::mcp::UpdatePromptRequest* request, ::mcp::UpdatePromptResponse* response);
    virtual ::grpc::Status DeletePrompt(::grpc::ServerContext* context, const ::mcp::DeletePromptRequest* request, ::mcp::DeletePromptResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Register() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::mcp::RegisterRequest* /*request*/, ::mcp::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::mcp::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcp::RegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Initialize() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::mcp::InitializeRequest* /*request*/, ::mcp::InitializeResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitialize(::grpc::ServerContext* context, ::mcp::InitializeRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcp::InitializeResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleRequest() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_HandleRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequest(::grpc::ServerContext* /*context*/, const ::mcp::JSONRPCRequest* /*request*/, ::mcp::JSONRPCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleRequest(::grpc::ServerContext* context, ::mcp::JSONRPCRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcp::JSONRPCResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleNotification() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_HandleNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleNotification(::grpc::ServerContext* /*context*/, const ::mcp::JSONRPCNotification* /*request*/, ::mcp::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleNotification(::grpc::ServerContext* context, ::mcp::JSONRPCNotification* request, ::grpc::ServerAsyncResponseWriter< ::mcp::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleBatchRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleBatchRequest() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_HandleBatchRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleBatchRequest(::grpc::ServerContext* /*context*/, const ::mcp::JSONRPCBatchRequest* /*request*/, ::mcp::JSONRPCBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleBatchRequest(::grpc::ServerContext* context, ::mcp::JSONRPCBatchRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcp::JSONRPCBatchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterInputSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterInputSchema() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_RegisterInputSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInputSchema(::grpc::ServerContext* /*context*/, const ::mcp::RegisterInputSchemaRequest* /*request*/, ::mcp::RegisterInputSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterInputSchema(::grpc::ServerContext* context, ::mcp::RegisterInputSchemaRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcp::RegisterInputSchemaResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInputSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetInputSchema() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetInputSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInputSchema(::grpc::ServerContext* /*context*/, const ::mcp::GetInputSchemaRequest* /*request*/, ::mcp::InputSchema* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInputSchema(::grpc::ServerContext* context, ::mcp::GetInputSchemaRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcp::InputSchema>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListResources() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ListResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResources(::grpc::ServerContext* /*context*/, const ::mcp::ListResourcesRequest* /*request*/, ::mcp::ListResourcesResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListResources(::grpc::ServerContext* context, ::mcp::ListResourcesRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcp::ListResourcesResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadResource() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ReadResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadResource(::grpc::ServerContext* /*context*/, const ::mcp::ReadResourceRequest* /*request*/, ::mcp::ReadResourceResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadResource(::grpc::ServerContext* context, ::mcp::ReadResourceRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcp::ReadResourceResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterTool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterTool() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_RegisterTool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterTool(::grpc::ServerContext* /*context*/, const ::mcp::RegisterToolRequest* /*request*/, ::mcp::RegisterToolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterTool(::grpc::ServerContext* context, ::mcp::RegisterToolRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcp::RegisterToolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTools : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListTools() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_ListTools() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTools(::grpc::ServerContext* /*context*/, const ::mcp::ListToolsRequest* /*request*/, ::mcp::ListToolsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTools(::grpc::ServerContext* context, ::mcp::ListToolsRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcp::ListToolsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterPrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterPrompt() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_RegisterPrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPrompt(::grpc::ServerContext* /*context*/, const ::mcp::RegisterPromptRequest* /*request*/, ::mcp::RegisterPromptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterPrompt(::grpc::ServerContext* context, ::mcp::RegisterPromptRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcp::RegisterPromptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPrompt() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetPrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrompt(::grpc::ServerContext* /*context*/, const ::mcp::GetPromptRequest* /*request*/, ::mcp::Prompt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPrompt(::grpc::ServerContext* context, ::mcp::GetPromptRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcp::Prompt>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListPrompts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListPrompts() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_ListPrompts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPrompts(::grpc::ServerContext* /*context*/, const ::mcp::ListPromptsRequest* /*request*/, ::mcp::ListPromptsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPrompts(::grpc::ServerContext* context, ::mcp::ListPromptsRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcp::ListPromptsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdatePrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdatePrompt() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_UpdatePrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePrompt(::grpc::ServerContext* /*context*/, const ::mcp::UpdatePromptRequest* /*request*/, ::mcp::UpdatePromptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePrompt(::grpc::ServerContext* context, ::mcp::UpdatePromptRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcp::UpdatePromptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeletePrompt() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_DeletePrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePrompt(::grpc::ServerContext* /*context*/, const ::mcp::DeletePromptRequest* /*request*/, ::mcp::DeletePromptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePrompt(::grpc::ServerContext* context, ::mcp::DeletePromptRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcp::DeletePromptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Register<WithAsyncMethod_Initialize<WithAsyncMethod_HandleRequest<WithAsyncMethod_HandleNotification<WithAsyncMethod_HandleBatchRequest<WithAsyncMethod_RegisterInputSchema<WithAsyncMethod_GetInputSchema<WithAsyncMethod_ListResources<WithAsyncMethod_ReadResource<WithAsyncMethod_RegisterTool<WithAsyncMethod_ListTools<WithAsyncMethod_RegisterPrompt<WithAsyncMethod_GetPrompt<WithAsyncMethod_ListPrompts<WithAsyncMethod_UpdatePrompt<WithAsyncMethod_DeletePrompt<Service > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Register() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mcp::RegisterRequest, ::mcp::RegisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mcp::RegisterRequest* request, ::mcp::RegisterResponse* response) { return this->Register(context, request, response); }));}
    void SetMessageAllocatorFor_Register(
        ::grpc::MessageAllocator< ::mcp::RegisterRequest, ::mcp::RegisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mcp::RegisterRequest, ::mcp::RegisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::mcp::RegisterRequest* /*request*/, ::mcp::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::mcp::RegisterRequest* /*request*/, ::mcp::RegisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Initialize() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mcp::InitializeRequest, ::mcp::InitializeResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mcp::InitializeRequest* request, ::mcp::InitializeResult* response) { return this->Initialize(context, request, response); }));}
    void SetMessageAllocatorFor_Initialize(
        ::grpc::MessageAllocator< ::mcp::InitializeRequest, ::mcp::InitializeResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mcp::InitializeRequest, ::mcp::InitializeResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::mcp::InitializeRequest* /*request*/, ::mcp::InitializeResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Initialize(
      ::grpc::CallbackServerContext* /*context*/, const ::mcp::InitializeRequest* /*request*/, ::mcp::InitializeResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HandleRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HandleRequest() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mcp::JSONRPCRequest, ::mcp::JSONRPCResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mcp::JSONRPCRequest* request, ::mcp::JSONRPCResponse* response) { return this->HandleRequest(context, request, response); }));}
    void SetMessageAllocatorFor_HandleRequest(
        ::grpc::MessageAllocator< ::mcp::JSONRPCRequest, ::mcp::JSONRPCResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mcp::JSONRPCRequest, ::mcp::JSONRPCResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HandleRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequest(::grpc::ServerContext* /*context*/, const ::mcp::JSONRPCRequest* /*request*/, ::mcp::JSONRPCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::mcp::JSONRPCRequest* /*request*/, ::mcp::JSONRPCResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HandleNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HandleNotification() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::mcp::JSONRPCNotification, ::mcp::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mcp::JSONRPCNotification* request, ::mcp::Empty* response) { return this->HandleNotification(context, request, response); }));}
    void SetMessageAllocatorFor_HandleNotification(
        ::grpc::MessageAllocator< ::mcp::JSONRPCNotification, ::mcp::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mcp::JSONRPCNotification, ::mcp::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HandleNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleNotification(::grpc::ServerContext* /*context*/, const ::mcp::JSONRPCNotification* /*request*/, ::mcp::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleNotification(
      ::grpc::CallbackServerContext* /*context*/, const ::mcp::JSONRPCNotification* /*request*/, ::mcp::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HandleBatchRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HandleBatchRequest() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::mcp::JSONRPCBatchRequest, ::mcp::JSONRPCBatchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mcp::JSONRPCBatchRequest* request, ::mcp::JSONRPCBatchResponse* response) { return this->HandleBatchRequest(context, request, response); }));}
    void SetMessageAllocatorFor_HandleBatchRequest(
        ::grpc::MessageAllocator< ::mcp::JSONRPCBatchRequest, ::mcp::JSONRPCBatchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mcp::JSONRPCBatchRequest, ::mcp::JSONRPCBatchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HandleBatchRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleBatchRequest(::grpc::ServerContext* /*context*/, const ::mcp::JSONRPCBatchRequest* /*request*/, ::mcp::JSONRPCBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleBatchRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::mcp::JSONRPCBatchRequest* /*request*/, ::mcp::JSONRPCBatchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterInputSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterInputSchema() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::mcp::RegisterInputSchemaRequest, ::mcp::RegisterInputSchemaResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mcp::RegisterInputSchemaRequest* request, ::mcp::RegisterInputSchemaResponse* response) { return this->RegisterInputSchema(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterInputSchema(
        ::grpc::MessageAllocator< ::mcp::RegisterInputSchemaRequest, ::mcp::RegisterInputSchemaResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mcp::RegisterInputSchemaRequest, ::mcp::RegisterInputSchemaResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterInputSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInputSchema(::grpc::ServerContext* /*context*/, const ::mcp::RegisterInputSchemaRequest* /*request*/, ::mcp::RegisterInputSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterInputSchema(
      ::grpc::CallbackServerContext* /*context*/, const ::mcp::RegisterInputSchemaRequest* /*request*/, ::mcp::RegisterInputSchemaResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetInputSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetInputSchema() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::mcp::GetInputSchemaRequest, ::mcp::InputSchema>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mcp::GetInputSchemaRequest* request, ::mcp::InputSchema* response) { return this->GetInputSchema(context, request, response); }));}
    void SetMessageAllocatorFor_GetInputSchema(
        ::grpc::MessageAllocator< ::mcp::GetInputSchemaRequest, ::mcp::InputSchema>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mcp::GetInputSchemaRequest, ::mcp::InputSchema>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetInputSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInputSchema(::grpc::ServerContext* /*context*/, const ::mcp::GetInputSchemaRequest* /*request*/, ::mcp::InputSchema* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInputSchema(
      ::grpc::CallbackServerContext* /*context*/, const ::mcp::GetInputSchemaRequest* /*request*/, ::mcp::InputSchema* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListResources() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::mcp::ListResourcesRequest, ::mcp::ListResourcesResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mcp::ListResourcesRequest* request, ::mcp::ListResourcesResult* response) { return this->ListResources(context, request, response); }));}
    void SetMessageAllocatorFor_ListResources(
        ::grpc::MessageAllocator< ::mcp::ListResourcesRequest, ::mcp::ListResourcesResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mcp::ListResourcesRequest, ::mcp::ListResourcesResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResources(::grpc::ServerContext* /*context*/, const ::mcp::ListResourcesRequest* /*request*/, ::mcp::ListResourcesResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListResources(
      ::grpc::CallbackServerContext* /*context*/, const ::mcp::ListResourcesRequest* /*request*/, ::mcp::ListResourcesResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadResource() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::mcp::ReadResourceRequest, ::mcp::ReadResourceResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mcp::ReadResourceRequest* request, ::mcp::ReadResourceResult* response) { return this->ReadResource(context, request, response); }));}
    void SetMessageAllocatorFor_ReadResource(
        ::grpc::MessageAllocator< ::mcp::ReadResourceRequest, ::mcp::ReadResourceResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mcp::ReadResourceRequest, ::mcp::ReadResourceResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadResource(::grpc::ServerContext* /*context*/, const ::mcp::ReadResourceRequest* /*request*/, ::mcp::ReadResourceResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadResource(
      ::grpc::CallbackServerContext* /*context*/, const ::mcp::ReadResourceRequest* /*request*/, ::mcp::ReadResourceResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterTool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterTool() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::mcp::RegisterToolRequest, ::mcp::RegisterToolResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mcp::RegisterToolRequest* request, ::mcp::RegisterToolResponse* response) { return this->RegisterTool(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterTool(
        ::grpc::MessageAllocator< ::mcp::RegisterToolRequest, ::mcp::RegisterToolResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mcp::RegisterToolRequest, ::mcp::RegisterToolResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterTool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterTool(::grpc::ServerContext* /*context*/, const ::mcp::RegisterToolRequest* /*request*/, ::mcp::RegisterToolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterTool(
      ::grpc::CallbackServerContext* /*context*/, const ::mcp::RegisterToolRequest* /*request*/, ::mcp::RegisterToolResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListTools : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListTools() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::mcp::ListToolsRequest, ::mcp::ListToolsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mcp::ListToolsRequest* request, ::mcp::ListToolsResponse* response) { return this->ListTools(context, request, response); }));}
    void SetMessageAllocatorFor_ListTools(
        ::grpc::MessageAllocator< ::mcp::ListToolsRequest, ::mcp::ListToolsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mcp::ListToolsRequest, ::mcp::ListToolsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListTools() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTools(::grpc::ServerContext* /*context*/, const ::mcp::ListToolsRequest* /*request*/, ::mcp::ListToolsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTools(
      ::grpc::CallbackServerContext* /*context*/, const ::mcp::ListToolsRequest* /*request*/, ::mcp::ListToolsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterPrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterPrompt() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::mcp::RegisterPromptRequest, ::mcp::RegisterPromptResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mcp::RegisterPromptRequest* request, ::mcp::RegisterPromptResponse* response) { return this->RegisterPrompt(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterPrompt(
        ::grpc::MessageAllocator< ::mcp::RegisterPromptRequest, ::mcp::RegisterPromptResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mcp::RegisterPromptRequest, ::mcp::RegisterPromptResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterPrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPrompt(::grpc::ServerContext* /*context*/, const ::mcp::RegisterPromptRequest* /*request*/, ::mcp::RegisterPromptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterPrompt(
      ::grpc::CallbackServerContext* /*context*/, const ::mcp::RegisterPromptRequest* /*request*/, ::mcp::RegisterPromptResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPrompt() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::mcp::GetPromptRequest, ::mcp::Prompt>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mcp::GetPromptRequest* request, ::mcp::Prompt* response) { return this->GetPrompt(context, request, response); }));}
    void SetMessageAllocatorFor_GetPrompt(
        ::grpc::MessageAllocator< ::mcp::GetPromptRequest, ::mcp::Prompt>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mcp::GetPromptRequest, ::mcp::Prompt>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrompt(::grpc::ServerContext* /*context*/, const ::mcp::GetPromptRequest* /*request*/, ::mcp::Prompt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPrompt(
      ::grpc::CallbackServerContext* /*context*/, const ::mcp::GetPromptRequest* /*request*/, ::mcp::Prompt* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListPrompts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListPrompts() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::mcp::ListPromptsRequest, ::mcp::ListPromptsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mcp::ListPromptsRequest* request, ::mcp::ListPromptsResponse* response) { return this->ListPrompts(context, request, response); }));}
    void SetMessageAllocatorFor_ListPrompts(
        ::grpc::MessageAllocator< ::mcp::ListPromptsRequest, ::mcp::ListPromptsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mcp::ListPromptsRequest, ::mcp::ListPromptsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListPrompts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPrompts(::grpc::ServerContext* /*context*/, const ::mcp::ListPromptsRequest* /*request*/, ::mcp::ListPromptsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListPrompts(
      ::grpc::CallbackServerContext* /*context*/, const ::mcp::ListPromptsRequest* /*request*/, ::mcp::ListPromptsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdatePrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdatePrompt() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::mcp::UpdatePromptRequest, ::mcp::UpdatePromptResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mcp::UpdatePromptRequest* request, ::mcp::UpdatePromptResponse* response) { return this->UpdatePrompt(context, request, response); }));}
    void SetMessageAllocatorFor_UpdatePrompt(
        ::grpc::MessageAllocator< ::mcp::UpdatePromptRequest, ::mcp::UpdatePromptResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mcp::UpdatePromptRequest, ::mcp::UpdatePromptResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdatePrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePrompt(::grpc::ServerContext* /*context*/, const ::mcp::UpdatePromptRequest* /*request*/, ::mcp::UpdatePromptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdatePrompt(
      ::grpc::CallbackServerContext* /*context*/, const ::mcp::UpdatePromptRequest* /*request*/, ::mcp::UpdatePromptResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeletePrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeletePrompt() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::mcp::DeletePromptRequest, ::mcp::DeletePromptResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mcp::DeletePromptRequest* request, ::mcp::DeletePromptResponse* response) { return this->DeletePrompt(context, request, response); }));}
    void SetMessageAllocatorFor_DeletePrompt(
        ::grpc::MessageAllocator< ::mcp::DeletePromptRequest, ::mcp::DeletePromptResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mcp::DeletePromptRequest, ::mcp::DeletePromptResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeletePrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePrompt(::grpc::ServerContext* /*context*/, const ::mcp::DeletePromptRequest* /*request*/, ::mcp::DeletePromptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePrompt(
      ::grpc::CallbackServerContext* /*context*/, const ::mcp::DeletePromptRequest* /*request*/, ::mcp::DeletePromptResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Register<WithCallbackMethod_Initialize<WithCallbackMethod_HandleRequest<WithCallbackMethod_HandleNotification<WithCallbackMethod_HandleBatchRequest<WithCallbackMethod_RegisterInputSchema<WithCallbackMethod_GetInputSchema<WithCallbackMethod_ListResources<WithCallbackMethod_ReadResource<WithCallbackMethod_RegisterTool<WithCallbackMethod_ListTools<WithCallbackMethod_RegisterPrompt<WithCallbackMethod_GetPrompt<WithCallbackMethod_ListPrompts<WithCallbackMethod_UpdatePrompt<WithCallbackMethod_DeletePrompt<Service > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Register() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::mcp::RegisterRequest* /*request*/, ::mcp::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Initialize() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::mcp::InitializeRequest* /*request*/, ::mcp::InitializeResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HandleRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleRequest() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_HandleRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequest(::grpc::ServerContext* /*context*/, const ::mcp::JSONRPCRequest* /*request*/, ::mcp::JSONRPCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HandleNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleNotification() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_HandleNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleNotification(::grpc::ServerContext* /*context*/, const ::mcp::JSONRPCNotification* /*request*/, ::mcp::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HandleBatchRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleBatchRequest() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_HandleBatchRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleBatchRequest(::grpc::ServerContext* /*context*/, const ::mcp::JSONRPCBatchRequest* /*request*/, ::mcp::JSONRPCBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterInputSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterInputSchema() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_RegisterInputSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInputSchema(::grpc::ServerContext* /*context*/, const ::mcp::RegisterInputSchemaRequest* /*request*/, ::mcp::RegisterInputSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInputSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetInputSchema() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetInputSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInputSchema(::grpc::ServerContext* /*context*/, const ::mcp::GetInputSchemaRequest* /*request*/, ::mcp::InputSchema* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListResources() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ListResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResources(::grpc::ServerContext* /*context*/, const ::mcp::ListResourcesRequest* /*request*/, ::mcp::ListResourcesResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadResource() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ReadResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadResource(::grpc::ServerContext* /*context*/, const ::mcp::ReadResourceRequest* /*request*/, ::mcp::ReadResourceResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterTool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterTool() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_RegisterTool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterTool(::grpc::ServerContext* /*context*/, const ::mcp::RegisterToolRequest* /*request*/, ::mcp::RegisterToolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTools : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListTools() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_ListTools() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTools(::grpc::ServerContext* /*context*/, const ::mcp::ListToolsRequest* /*request*/, ::mcp::ListToolsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterPrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterPrompt() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_RegisterPrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPrompt(::grpc::ServerContext* /*context*/, const ::mcp::RegisterPromptRequest* /*request*/, ::mcp::RegisterPromptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPrompt() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetPrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrompt(::grpc::ServerContext* /*context*/, const ::mcp::GetPromptRequest* /*request*/, ::mcp::Prompt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListPrompts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListPrompts() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_ListPrompts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPrompts(::grpc::ServerContext* /*context*/, const ::mcp::ListPromptsRequest* /*request*/, ::mcp::ListPromptsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdatePrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdatePrompt() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_UpdatePrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePrompt(::grpc::ServerContext* /*context*/, const ::mcp::UpdatePromptRequest* /*request*/, ::mcp::UpdatePromptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeletePrompt() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_DeletePrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePrompt(::grpc::ServerContext* /*context*/, const ::mcp::DeletePromptRequest* /*request*/, ::mcp::DeletePromptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Register() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::mcp::RegisterRequest* /*request*/, ::mcp::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Initialize() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::mcp::InitializeRequest* /*request*/, ::mcp::InitializeResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitialize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleRequest() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_HandleRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequest(::grpc::ServerContext* /*context*/, const ::mcp::JSONRPCRequest* /*request*/, ::mcp::JSONRPCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleNotification() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_HandleNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleNotification(::grpc::ServerContext* /*context*/, const ::mcp::JSONRPCNotification* /*request*/, ::mcp::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleNotification(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleBatchRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleBatchRequest() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_HandleBatchRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleBatchRequest(::grpc::ServerContext* /*context*/, const ::mcp::JSONRPCBatchRequest* /*request*/, ::mcp::JSONRPCBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleBatchRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterInputSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterInputSchema() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_RegisterInputSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInputSchema(::grpc::ServerContext* /*context*/, const ::mcp::RegisterInputSchemaRequest* /*request*/, ::mcp::RegisterInputSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterInputSchema(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInputSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetInputSchema() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetInputSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInputSchema(::grpc::ServerContext* /*context*/, const ::mcp::GetInputSchemaRequest* /*request*/, ::mcp::InputSchema* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInputSchema(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListResources() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ListResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResources(::grpc::ServerContext* /*context*/, const ::mcp::ListResourcesRequest* /*request*/, ::mcp::ListResourcesResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListResources(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadResource() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_ReadResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadResource(::grpc::ServerContext* /*context*/, const ::mcp::ReadResourceRequest* /*request*/, ::mcp::ReadResourceResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadResource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterTool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterTool() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_RegisterTool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterTool(::grpc::ServerContext* /*context*/, const ::mcp::RegisterToolRequest* /*request*/, ::mcp::RegisterToolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterTool(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListTools : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListTools() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_ListTools() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTools(::grpc::ServerContext* /*context*/, const ::mcp::ListToolsRequest* /*request*/, ::mcp::ListToolsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTools(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterPrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterPrompt() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_RegisterPrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPrompt(::grpc::ServerContext* /*context*/, const ::mcp::RegisterPromptRequest* /*request*/, ::mcp::RegisterPromptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterPrompt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPrompt() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetPrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrompt(::grpc::ServerContext* /*context*/, const ::mcp::GetPromptRequest* /*request*/, ::mcp::Prompt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPrompt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListPrompts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListPrompts() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_ListPrompts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPrompts(::grpc::ServerContext* /*context*/, const ::mcp::ListPromptsRequest* /*request*/, ::mcp::ListPromptsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPrompts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdatePrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdatePrompt() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_UpdatePrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePrompt(::grpc::ServerContext* /*context*/, const ::mcp::UpdatePromptRequest* /*request*/, ::mcp::UpdatePromptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePrompt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeletePrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeletePrompt() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_DeletePrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePrompt(::grpc::ServerContext* /*context*/, const ::mcp::DeletePromptRequest* /*request*/, ::mcp::DeletePromptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePrompt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Register() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Register(context, request, response); }));
    }
    ~WithRawCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::mcp::RegisterRequest* /*request*/, ::mcp::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Initialize() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Initialize(context, request, response); }));
    }
    ~WithRawCallbackMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::mcp::InitializeRequest* /*request*/, ::mcp::InitializeResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Initialize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HandleRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HandleRequest() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandleRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_HandleRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleRequest(::grpc::ServerContext* /*context*/, const ::mcp::JSONRPCRequest* /*request*/, ::mcp::JSONRPCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HandleNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HandleNotification() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandleNotification(context, request, response); }));
    }
    ~WithRawCallbackMethod_HandleNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleNotification(::grpc::ServerContext* /*context*/, const ::mcp::JSONRPCNotification* /*request*/, ::mcp::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleNotification(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HandleBatchRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HandleBatchRequest() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandleBatchRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_HandleBatchRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleBatchRequest(::grpc::ServerContext* /*context*/, const ::mcp::JSONRPCBatchRequest* /*request*/, ::mcp::JSONRPCBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleBatchRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterInputSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterInputSchema() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterInputSchema(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterInputSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInputSchema(::grpc::ServerContext* /*context*/, const ::mcp::RegisterInputSchemaRequest* /*request*/, ::mcp::RegisterInputSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterInputSchema(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetInputSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetInputSchema() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetInputSchema(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetInputSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInputSchema(::grpc::ServerContext* /*context*/, const ::mcp::GetInputSchemaRequest* /*request*/, ::mcp::InputSchema* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInputSchema(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListResources() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListResources(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResources(::grpc::ServerContext* /*context*/, const ::mcp::ListResourcesRequest* /*request*/, ::mcp::ListResourcesResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListResources(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadResource() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadResource(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadResource(::grpc::ServerContext* /*context*/, const ::mcp::ReadResourceRequest* /*request*/, ::mcp::ReadResourceResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadResource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterTool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterTool() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterTool(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterTool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterTool(::grpc::ServerContext* /*context*/, const ::mcp::RegisterToolRequest* /*request*/, ::mcp::RegisterToolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterTool(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListTools : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListTools() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListTools(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListTools() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTools(::grpc::ServerContext* /*context*/, const ::mcp::ListToolsRequest* /*request*/, ::mcp::ListToolsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTools(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterPrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterPrompt() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterPrompt(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterPrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPrompt(::grpc::ServerContext* /*context*/, const ::mcp::RegisterPromptRequest* /*request*/, ::mcp::RegisterPromptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterPrompt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPrompt() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPrompt(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrompt(::grpc::ServerContext* /*context*/, const ::mcp::GetPromptRequest* /*request*/, ::mcp::Prompt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPrompt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListPrompts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListPrompts() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListPrompts(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListPrompts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPrompts(::grpc::ServerContext* /*context*/, const ::mcp::ListPromptsRequest* /*request*/, ::mcp::ListPromptsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListPrompts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdatePrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdatePrompt() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdatePrompt(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdatePrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePrompt(::grpc::ServerContext* /*context*/, const ::mcp::UpdatePromptRequest* /*request*/, ::mcp::UpdatePromptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdatePrompt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeletePrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeletePrompt() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeletePrompt(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeletePrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePrompt(::grpc::ServerContext* /*context*/, const ::mcp::DeletePromptRequest* /*request*/, ::mcp::DeletePromptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePrompt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Register() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcp::RegisterRequest, ::mcp::RegisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mcp::RegisterRequest, ::mcp::RegisterResponse>* streamer) {
                       return this->StreamedRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::mcp::RegisterRequest* /*request*/, ::mcp::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcp::RegisterRequest,::mcp::RegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Initialize() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcp::InitializeRequest, ::mcp::InitializeResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mcp::InitializeRequest, ::mcp::InitializeResult>* streamer) {
                       return this->StreamedInitialize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::mcp::InitializeRequest* /*request*/, ::mcp::InitializeResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitialize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcp::InitializeRequest,::mcp::InitializeResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandleRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandleRequest() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcp::JSONRPCRequest, ::mcp::JSONRPCResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mcp::JSONRPCRequest, ::mcp::JSONRPCResponse>* streamer) {
                       return this->StreamedHandleRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandleRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandleRequest(::grpc::ServerContext* /*context*/, const ::mcp::JSONRPCRequest* /*request*/, ::mcp::JSONRPCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandleRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcp::JSONRPCRequest,::mcp::JSONRPCResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandleNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandleNotification() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcp::JSONRPCNotification, ::mcp::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mcp::JSONRPCNotification, ::mcp::Empty>* streamer) {
                       return this->StreamedHandleNotification(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandleNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandleNotification(::grpc::ServerContext* /*context*/, const ::mcp::JSONRPCNotification* /*request*/, ::mcp::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandleNotification(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcp::JSONRPCNotification,::mcp::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandleBatchRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandleBatchRequest() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcp::JSONRPCBatchRequest, ::mcp::JSONRPCBatchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mcp::JSONRPCBatchRequest, ::mcp::JSONRPCBatchResponse>* streamer) {
                       return this->StreamedHandleBatchRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandleBatchRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandleBatchRequest(::grpc::ServerContext* /*context*/, const ::mcp::JSONRPCBatchRequest* /*request*/, ::mcp::JSONRPCBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandleBatchRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcp::JSONRPCBatchRequest,::mcp::JSONRPCBatchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterInputSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterInputSchema() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcp::RegisterInputSchemaRequest, ::mcp::RegisterInputSchemaResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mcp::RegisterInputSchemaRequest, ::mcp::RegisterInputSchemaResponse>* streamer) {
                       return this->StreamedRegisterInputSchema(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterInputSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterInputSchema(::grpc::ServerContext* /*context*/, const ::mcp::RegisterInputSchemaRequest* /*request*/, ::mcp::RegisterInputSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterInputSchema(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcp::RegisterInputSchemaRequest,::mcp::RegisterInputSchemaResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInputSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetInputSchema() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcp::GetInputSchemaRequest, ::mcp::InputSchema>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mcp::GetInputSchemaRequest, ::mcp::InputSchema>* streamer) {
                       return this->StreamedGetInputSchema(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetInputSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInputSchema(::grpc::ServerContext* /*context*/, const ::mcp::GetInputSchemaRequest* /*request*/, ::mcp::InputSchema* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInputSchema(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcp::GetInputSchemaRequest,::mcp::InputSchema>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListResources() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcp::ListResourcesRequest, ::mcp::ListResourcesResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mcp::ListResourcesRequest, ::mcp::ListResourcesResult>* streamer) {
                       return this->StreamedListResources(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListResources(::grpc::ServerContext* /*context*/, const ::mcp::ListResourcesRequest* /*request*/, ::mcp::ListResourcesResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListResources(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcp::ListResourcesRequest,::mcp::ListResourcesResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadResource() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcp::ReadResourceRequest, ::mcp::ReadResourceResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mcp::ReadResourceRequest, ::mcp::ReadResourceResult>* streamer) {
                       return this->StreamedReadResource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadResource(::grpc::ServerContext* /*context*/, const ::mcp::ReadResourceRequest* /*request*/, ::mcp::ReadResourceResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadResource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcp::ReadResourceRequest,::mcp::ReadResourceResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterTool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterTool() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcp::RegisterToolRequest, ::mcp::RegisterToolResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mcp::RegisterToolRequest, ::mcp::RegisterToolResponse>* streamer) {
                       return this->StreamedRegisterTool(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterTool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterTool(::grpc::ServerContext* /*context*/, const ::mcp::RegisterToolRequest* /*request*/, ::mcp::RegisterToolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterTool(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcp::RegisterToolRequest,::mcp::RegisterToolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTools : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListTools() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcp::ListToolsRequest, ::mcp::ListToolsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mcp::ListToolsRequest, ::mcp::ListToolsResponse>* streamer) {
                       return this->StreamedListTools(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListTools() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTools(::grpc::ServerContext* /*context*/, const ::mcp::ListToolsRequest* /*request*/, ::mcp::ListToolsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTools(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcp::ListToolsRequest,::mcp::ListToolsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterPrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterPrompt() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcp::RegisterPromptRequest, ::mcp::RegisterPromptResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mcp::RegisterPromptRequest, ::mcp::RegisterPromptResponse>* streamer) {
                       return this->StreamedRegisterPrompt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterPrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterPrompt(::grpc::ServerContext* /*context*/, const ::mcp::RegisterPromptRequest* /*request*/, ::mcp::RegisterPromptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterPrompt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcp::RegisterPromptRequest,::mcp::RegisterPromptResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPrompt() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcp::GetPromptRequest, ::mcp::Prompt>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mcp::GetPromptRequest, ::mcp::Prompt>* streamer) {
                       return this->StreamedGetPrompt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPrompt(::grpc::ServerContext* /*context*/, const ::mcp::GetPromptRequest* /*request*/, ::mcp::Prompt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPrompt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcp::GetPromptRequest,::mcp::Prompt>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListPrompts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListPrompts() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcp::ListPromptsRequest, ::mcp::ListPromptsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mcp::ListPromptsRequest, ::mcp::ListPromptsResponse>* streamer) {
                       return this->StreamedListPrompts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListPrompts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListPrompts(::grpc::ServerContext* /*context*/, const ::mcp::ListPromptsRequest* /*request*/, ::mcp::ListPromptsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListPrompts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcp::ListPromptsRequest,::mcp::ListPromptsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdatePrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdatePrompt() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcp::UpdatePromptRequest, ::mcp::UpdatePromptResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mcp::UpdatePromptRequest, ::mcp::UpdatePromptResponse>* streamer) {
                       return this->StreamedUpdatePrompt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdatePrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdatePrompt(::grpc::ServerContext* /*context*/, const ::mcp::UpdatePromptRequest* /*request*/, ::mcp::UpdatePromptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdatePrompt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcp::UpdatePromptRequest,::mcp::UpdatePromptResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePrompt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeletePrompt() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcp::DeletePromptRequest, ::mcp::DeletePromptResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mcp::DeletePromptRequest, ::mcp::DeletePromptResponse>* streamer) {
                       return this->StreamedDeletePrompt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeletePrompt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePrompt(::grpc::ServerContext* /*context*/, const ::mcp::DeletePromptRequest* /*request*/, ::mcp::DeletePromptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePrompt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcp::DeletePromptRequest,::mcp::DeletePromptResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Initialize<WithStreamedUnaryMethod_HandleRequest<WithStreamedUnaryMethod_HandleNotification<WithStreamedUnaryMethod_HandleBatchRequest<WithStreamedUnaryMethod_RegisterInputSchema<WithStreamedUnaryMethod_GetInputSchema<WithStreamedUnaryMethod_ListResources<WithStreamedUnaryMethod_ReadResource<WithStreamedUnaryMethod_RegisterTool<WithStreamedUnaryMethod_ListTools<WithStreamedUnaryMethod_RegisterPrompt<WithStreamedUnaryMethod_GetPrompt<WithStreamedUnaryMethod_ListPrompts<WithStreamedUnaryMethod_UpdatePrompt<WithStreamedUnaryMethod_DeletePrompt<Service > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Initialize<WithStreamedUnaryMethod_HandleRequest<WithStreamedUnaryMethod_HandleNotification<WithStreamedUnaryMethod_HandleBatchRequest<WithStreamedUnaryMethod_RegisterInputSchema<WithStreamedUnaryMethod_GetInputSchema<WithStreamedUnaryMethod_ListResources<WithStreamedUnaryMethod_ReadResource<WithStreamedUnaryMethod_RegisterTool<WithStreamedUnaryMethod_ListTools<WithStreamedUnaryMethod_RegisterPrompt<WithStreamedUnaryMethod_GetPrompt<WithStreamedUnaryMethod_ListPrompts<WithStreamedUnaryMethod_UpdatePrompt<WithStreamedUnaryMethod_DeletePrompt<Service > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace mcp


#endif  // GRPC_mcp_5fservice_2eproto__INCLUDED
